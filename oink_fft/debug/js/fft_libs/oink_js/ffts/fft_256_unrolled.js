let FFT_FAC_4 = new Float32Array([
1.0000000000000000,-0.0000000000000000,-0.0000000437113883,-1.0000000000000000
]);
let FFT_FAC_8 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.7071067690849304,-0.7071067690849304,-0.0000000437113883,-1.0000000000000000,-0.7071067690849304,-0.7071067690849304
]);
let FFT_FAC_16 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9238795042037964,-0.3826834559440613,0.7071067690849304,-0.7071067690849304,0.3826834261417389,-0.9238795042037964,
-0.0000000437113883,-1.0000000000000000,-0.3826833963394165,-0.9238795638084412,-0.7071067690849304,-0.7071067690849304,-0.9238795042037964,-0.3826834857463837
]);
let FFT_FAC_32 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9807852506637573,-0.1950903236865997,0.9238795042037964,-0.3826834559440613,0.8314695954322815,-0.5555702447891235,
0.7071067690849304,-0.7071067690849304,0.5555702447891235,-0.8314695954322815,0.3826834261417389,-0.9238795042037964,0.1950903534889221,-0.9807852506637573,
-0.0000000437113883,-1.0000000000000000,-0.1950903236865997,-0.9807852506637573,-0.3826833963394165,-0.9238795638084412,-0.5555701851844788,-0.8314696550369263,
-0.7071067690849304,-0.7071067690849304,-0.8314696550369263,-0.5555701851844788,-0.9238795042037964,-0.3826834857463837,-0.9807853102684021,-0.1950903087854385
]);
let FFT_FAC_64 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9951847195625305,-0.0980171412229538,0.9807852506637573,-0.1950903236865997,0.9569403529167175,-0.2902846634387970,
0.9238795042037964,-0.3826834559440613,0.8819212913513184,-0.4713967144489288,0.8314695954322815,-0.5555702447891235,0.7730104923248291,-0.6343932747840881,
0.7071067690849304,-0.7071067690849304,0.6343932747840881,-0.7730104327201843,0.5555702447891235,-0.8314695954322815,0.4713967740535736,-0.8819212317466736,
0.3826834261417389,-0.9238795042037964,0.2902846336364746,-0.9569403529167175,0.1950903534889221,-0.9807852506637573,0.0980171337723732,-0.9951847195625305,
-0.0000000437113883,-1.0000000000000000,-0.0980171039700508,-0.9951847195625305,-0.1950903236865997,-0.9807852506637573,-0.2902847230434418,-0.9569402933120728,
-0.3826833963394165,-0.9238795638084412,-0.4713966250419617,-0.8819212913513184,-0.5555701851844788,-0.8314696550369263,-0.6343932747840881,-0.7730104923248291,
-0.7071067690849304,-0.7071067690849304,-0.7730104923248291,-0.6343932747840881,-0.8314696550369263,-0.5555701851844788,-0.8819212317466736,-0.4713968336582184,
-0.9238795042037964,-0.3826834857463837,-0.9569403529167175,-0.2902847230434418,-0.9807853102684021,-0.1950903087854385,-0.9951847195625305,-0.0980170965194702
]);
let FFT_FAC_128 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9987954497337341,-0.0490676760673523,0.9951847195625305,-0.0980171412229538,0.9891765117645264,-0.1467304676771164,
0.9807852506637573,-0.1950903236865997,0.9700312614440918,-0.2429801821708679,0.9569403529167175,-0.2902846634387970,0.9415440559387207,-0.3368898332118988,
0.9238795042037964,-0.3826834559440613,0.9039893150329590,-0.4275550842285156,0.8819212913513184,-0.4713967144489288,0.8577286005020142,-0.5141027569770813,
0.8314695954322815,-0.5555702447891235,0.8032075166702271,-0.5956993103027344,0.7730104923248291,-0.6343932747840881,0.7409511208534241,-0.6715589761734009,
0.7071067690849304,-0.7071067690849304,0.6715589761734009,-0.7409511208534241,0.6343932747840881,-0.7730104327201843,0.5956993103027344,-0.8032075166702271,
0.5555702447891235,-0.8314695954322815,0.5141028165817261,-0.8577286005020142,0.4713967740535736,-0.8819212317466736,0.4275551140308380,-0.9039893150329590,
0.3826834261417389,-0.9238795042037964,0.3368898332118988,-0.9415440559387207,0.2902846336364746,-0.9569403529167175,0.2429802417755127,-0.9700312614440918,
0.1950903534889221,-0.9807852506637573,0.1467304974794388,-0.9891765117645264,0.0980171337723732,-0.9951847195625305,0.0490676499903202,-0.9987954497337341,
-0.0000000437113883,-1.0000000000000000,-0.0490676201879978,-0.9987954497337341,-0.0980171039700508,-0.9951847195625305,-0.1467304527759552,-0.9891765117645264,
-0.1950903236865997,-0.9807852506637573,-0.2429801970720291,-0.9700312614440918,-0.2902847230434418,-0.9569402933120728,-0.3368898034095764,-0.9415440559387207,
-0.3826833963394165,-0.9238795638084412,-0.4275550842285156,-0.9039893150329590,-0.4713966250419617,-0.8819212913513184,-0.5141027569770813,-0.8577286005020142,
-0.5555701851844788,-0.8314696550369263,-0.5956993699073792,-0.8032075166702271,-0.6343932747840881,-0.7730104923248291,-0.6715590357780457,-0.7409510612487793,
-0.7071067690849304,-0.7071067690849304,-0.7409510612487793,-0.6715590357780457,-0.7730104923248291,-0.6343932747840881,-0.8032075166702271,-0.5956993699073792,
-0.8314696550369263,-0.5555701851844788,-0.8577286005020142,-0.5141027569770813,-0.8819212317466736,-0.4713968336582184,-0.9039893150329590,-0.4275550544261932,
-0.9238795042037964,-0.3826834857463837,-0.9415441155433655,-0.3368898034095764,-0.9569403529167175,-0.2902847230434418,-0.9700312614440918,-0.2429800778627396,
-0.9807853102684021,-0.1950903087854385,-0.9891765117645264,-0.1467305719852448,-0.9951847195625305,-0.0980170965194702,-0.9987954497337341,-0.0490677244961262
]);
let FFT_FAC_256 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9996988177299500,-0.0245412290096283,0.9987954497337341,-0.0490676760673523,0.9972904324531555,-0.0735645666718483,
0.9951847195625305,-0.0980171412229538,0.9924795627593994,-0.1224106699228287,0.9891765117645264,-0.1467304676771164,0.9852776527404785,-0.1709618866443634,
0.9807852506637573,-0.1950903236865997,0.9757021069526672,-0.2191012352705002,0.9700312614440918,-0.2429801821708679,0.9637760519981384,-0.2667127549648285,
0.9569403529167175,-0.2902846634387970,0.9495281577110291,-0.3136817514896393,0.9415440559387207,-0.3368898332118988,0.9329928159713745,-0.3598950505256653,
0.9238795042037964,-0.3826834559440613,0.9142097830772400,-0.4052413105964661,0.9039893150329590,-0.4275550842285156,0.8932242989540100,-0.4496113359928131,
0.8819212913513184,-0.4713967144489288,0.8700870275497437,-0.4928981661796570,0.8577286005020142,-0.5141027569770813,0.8448535799980164,-0.5349976420402527,
0.8314695954322815,-0.5555702447891235,0.8175848126411438,-0.5758082270622253,0.8032075166702271,-0.5956993103027344,0.7883464694023132,-0.6152315735816956,
0.7730104923248291,-0.6343932747840881,0.7572088241577148,-0.6531728506088257,0.7409511208534241,-0.6715589761734009,0.7242470979690552,-0.6895405650138855,
0.7071067690849304,-0.7071067690849304,0.6895405650138855,-0.7242470383644104,0.6715589761734009,-0.7409511208534241,0.6531728506088257,-0.7572088241577148,
0.6343932747840881,-0.7730104327201843,0.6152315735816956,-0.7883464097976685,0.5956993103027344,-0.8032075166702271,0.5758082270622253,-0.8175848126411438,
0.5555702447891235,-0.8314695954322815,0.5349976420402527,-0.8448535799980164,0.5141028165817261,-0.8577286005020142,0.4928981959819794,-0.8700869679450989,
0.4713967740535736,-0.8819212317466736,0.4496113061904907,-0.8932242989540100,0.4275551140308380,-0.9039893150329590,0.4052412807941437,-0.9142097830772400,
0.3826834261417389,-0.9238795042037964,0.3598950803279877,-0.9329927563667297,0.3368898332118988,-0.9415440559387207,0.3136817514896393,-0.9495281577110291,
0.2902846336364746,-0.9569403529167175,0.2667127549648285,-0.9637760519981384,0.2429802417755127,-0.9700312614440918,0.2191012203693390,-0.9757021069526672,
0.1950903534889221,-0.9807852506637573,0.1709618568420410,-0.9852776527404785,0.1467304974794388,-0.9891765117645264,0.1224106252193451,-0.9924795627593994,
0.0980171337723732,-0.9951847195625305,0.0735646113753319,-0.9972904324531555,0.0490676499903202,-0.9987954497337341,0.0245412550866604,-0.9996988177299500,
-0.0000000437113883,-1.0000000000000000,-0.0245412234216928,-0.9996988177299500,-0.0490676201879978,-0.9987954497337341,-0.0735645741224289,-0.9972904324531555,
-0.0980171039700508,-0.9951847195625305,-0.1224107071757317,-0.9924795031547546,-0.1467304527759552,-0.9891765117645264,-0.1709619462490082,-0.9852776527404785,
-0.1950903236865997,-0.9807852506637573,-0.2191011905670166,-0.9757021665573120,-0.2429801970720291,-0.9700312614440918,-0.2667127251625061,-0.9637760519981384,
-0.2902847230434418,-0.9569402933120728,-0.3136817216873169,-0.9495281577110291,-0.3368898034095764,-0.9415440559387207,-0.3598950505256653,-0.9329928159713745,
-0.3826833963394165,-0.9238795638084412,-0.4052413403987885,-0.9142097234725952,-0.4275550842285156,-0.9039893150329590,-0.4496113657951355,-0.8932242989540100,
-0.4713966250419617,-0.8819212913513184,-0.4928981661796570,-0.8700870275497437,-0.5141027569770813,-0.8577286005020142,-0.5349977016448975,-0.8448535203933716,
-0.5555701851844788,-0.8314696550369263,-0.5758081674575806,-0.8175848126411438,-0.5956993699073792,-0.8032075166702271,-0.6152315139770508,-0.7883464694023132,
-0.6343932747840881,-0.7730104923248291,-0.6531728506088257,-0.7572088241577148,-0.6715590357780457,-0.7409510612487793,-0.6895405054092407,-0.7242470979690552,
-0.7071067690849304,-0.7071067690849304,-0.7242471575737000,-0.6895405054092407,-0.7409510612487793,-0.6715590357780457,-0.7572088241577148,-0.6531728506088257,
-0.7730104923248291,-0.6343932747840881,-0.7883464694023132,-0.6152315139770508,-0.8032075166702271,-0.5956993699073792,-0.8175848126411438,-0.5758081674575806,
-0.8314696550369263,-0.5555701851844788,-0.8448535203933716,-0.5349977016448975,-0.8577286005020142,-0.5141027569770813,-0.8700870275497437,-0.4928981363773346,
-0.8819212317466736,-0.4713968336582184,-0.8932242989540100,-0.4496113657951355,-0.9039893150329590,-0.4275550544261932,-0.9142097830772400,-0.4052412211894989,
-0.9238795042037964,-0.3826834857463837,-0.9329928159713745,-0.3598950505256653,-0.9415441155433655,-0.3368898034095764,-0.9495281577110291,-0.3136818408966064,
-0.9569403529167175,-0.2902847230434418,-0.9637760519981384,-0.2667127251625061,-0.9700312614440918,-0.2429800778627396,-0.9757021069526672,-0.2191012948751450,
-0.9807853102684021,-0.1950903087854385,-0.9852776527404785,-0.1709618121385574,-0.9891765117645264,-0.1467305719852448,-0.9924795031547546,-0.1224106997251511,
-0.9951847195625305,-0.0980170965194702,-0.9972904920578003,-0.0735644474625587,-0.9987954497337341,-0.0490677244961262,-0.9996988177299500,-0.0245412103831768
]);


let iBR256 = new Float32Array(256);
let iP256  = new Float32Array(256);
let _iP256 = new Float32Array(256);
let out256 = new Float32Array(512);

function fftReal256(realInput) { 
    let size = realInput.length;
    if (size != 256) {
        for (let i = 0; i < 256; i++) {
            iP256[i] = (i < size) ? realInput[i] : 0.0;
        }
        _iP256 = iP256;
    } else {
        _iP256 = realInput;
    }


    //Bit Reversal
    {
        iBR256[0]=_iP256[0]; 
        iBR256[1]=_iP256[128]; 
        iBR256[2]=_iP256[64]; 
        iBR256[3]=_iP256[192]; 
        iBR256[4]=_iP256[32]; 
        iBR256[5]=_iP256[160]; 
        iBR256[6]=_iP256[96]; 
        iBR256[7]=_iP256[224]; 
        iBR256[8]=_iP256[16]; 
        iBR256[9]=_iP256[144]; 
        iBR256[10]=_iP256[80]; 
        iBR256[11]=_iP256[208]; 
        iBR256[12]=_iP256[48]; 
        iBR256[13]=_iP256[176]; 
        iBR256[14]=_iP256[112]; 
        iBR256[15]=_iP256[240]; 
        iBR256[16]=_iP256[8]; 
        iBR256[17]=_iP256[136]; 
        iBR256[18]=_iP256[72]; 
        iBR256[19]=_iP256[200]; 
        iBR256[20]=_iP256[40]; 
        iBR256[21]=_iP256[168]; 
        iBR256[22]=_iP256[104]; 
        iBR256[23]=_iP256[232]; 
        iBR256[24]=_iP256[24]; 
        iBR256[25]=_iP256[152]; 
        iBR256[26]=_iP256[88]; 
        iBR256[27]=_iP256[216]; 
        iBR256[28]=_iP256[56]; 
        iBR256[29]=_iP256[184]; 
        iBR256[30]=_iP256[120]; 
        iBR256[31]=_iP256[248]; 
        iBR256[32]=_iP256[4]; 
        iBR256[33]=_iP256[132]; 
        iBR256[34]=_iP256[68]; 
        iBR256[35]=_iP256[196]; 
        iBR256[36]=_iP256[36]; 
        iBR256[37]=_iP256[164]; 
        iBR256[38]=_iP256[100]; 
        iBR256[39]=_iP256[228]; 
        iBR256[40]=_iP256[20]; 
        iBR256[41]=_iP256[148]; 
        iBR256[42]=_iP256[84]; 
        iBR256[43]=_iP256[212]; 
        iBR256[44]=_iP256[52]; 
        iBR256[45]=_iP256[180]; 
        iBR256[46]=_iP256[116]; 
        iBR256[47]=_iP256[244]; 
        iBR256[48]=_iP256[12]; 
        iBR256[49]=_iP256[140]; 
        iBR256[50]=_iP256[76]; 
        iBR256[51]=_iP256[204]; 
        iBR256[52]=_iP256[44]; 
        iBR256[53]=_iP256[172]; 
        iBR256[54]=_iP256[108]; 
        iBR256[55]=_iP256[236]; 
        iBR256[56]=_iP256[28]; 
        iBR256[57]=_iP256[156]; 
        iBR256[58]=_iP256[92]; 
        iBR256[59]=_iP256[220]; 
        iBR256[60]=_iP256[60]; 
        iBR256[61]=_iP256[188]; 
        iBR256[62]=_iP256[124]; 
        iBR256[63]=_iP256[252]; 
        iBR256[64]=_iP256[2]; 
        iBR256[65]=_iP256[130]; 
        iBR256[66]=_iP256[66]; 
        iBR256[67]=_iP256[194]; 
        iBR256[68]=_iP256[34]; 
        iBR256[69]=_iP256[162]; 
        iBR256[70]=_iP256[98]; 
        iBR256[71]=_iP256[226]; 
        iBR256[72]=_iP256[18]; 
        iBR256[73]=_iP256[146]; 
        iBR256[74]=_iP256[82]; 
        iBR256[75]=_iP256[210]; 
        iBR256[76]=_iP256[50]; 
        iBR256[77]=_iP256[178]; 
        iBR256[78]=_iP256[114]; 
        iBR256[79]=_iP256[242]; 
        iBR256[80]=_iP256[10]; 
        iBR256[81]=_iP256[138]; 
        iBR256[82]=_iP256[74]; 
        iBR256[83]=_iP256[202]; 
        iBR256[84]=_iP256[42]; 
        iBR256[85]=_iP256[170]; 
        iBR256[86]=_iP256[106]; 
        iBR256[87]=_iP256[234]; 
        iBR256[88]=_iP256[26]; 
        iBR256[89]=_iP256[154]; 
        iBR256[90]=_iP256[90]; 
        iBR256[91]=_iP256[218]; 
        iBR256[92]=_iP256[58]; 
        iBR256[93]=_iP256[186]; 
        iBR256[94]=_iP256[122]; 
        iBR256[95]=_iP256[250]; 
        iBR256[96]=_iP256[6]; 
        iBR256[97]=_iP256[134]; 
        iBR256[98]=_iP256[70]; 
        iBR256[99]=_iP256[198]; 
        iBR256[100]=_iP256[38]; 
        iBR256[101]=_iP256[166]; 
        iBR256[102]=_iP256[102]; 
        iBR256[103]=_iP256[230]; 
        iBR256[104]=_iP256[22]; 
        iBR256[105]=_iP256[150]; 
        iBR256[106]=_iP256[86]; 
        iBR256[107]=_iP256[214]; 
        iBR256[108]=_iP256[54]; 
        iBR256[109]=_iP256[182]; 
        iBR256[110]=_iP256[118]; 
        iBR256[111]=_iP256[246]; 
        iBR256[112]=_iP256[14]; 
        iBR256[113]=_iP256[142]; 
        iBR256[114]=_iP256[78]; 
        iBR256[115]=_iP256[206]; 
        iBR256[116]=_iP256[46]; 
        iBR256[117]=_iP256[174]; 
        iBR256[118]=_iP256[110]; 
        iBR256[119]=_iP256[238]; 
        iBR256[120]=_iP256[30]; 
        iBR256[121]=_iP256[158]; 
        iBR256[122]=_iP256[94]; 
        iBR256[123]=_iP256[222]; 
        iBR256[124]=_iP256[62]; 
        iBR256[125]=_iP256[190]; 
        iBR256[126]=_iP256[126]; 
        iBR256[127]=_iP256[254]; 
        iBR256[128]=_iP256[1]; 
        iBR256[129]=_iP256[129]; 
        iBR256[130]=_iP256[65]; 
        iBR256[131]=_iP256[193]; 
        iBR256[132]=_iP256[33]; 
        iBR256[133]=_iP256[161]; 
        iBR256[134]=_iP256[97]; 
        iBR256[135]=_iP256[225]; 
        iBR256[136]=_iP256[17]; 
        iBR256[137]=_iP256[145]; 
        iBR256[138]=_iP256[81]; 
        iBR256[139]=_iP256[209]; 
        iBR256[140]=_iP256[49]; 
        iBR256[141]=_iP256[177]; 
        iBR256[142]=_iP256[113]; 
        iBR256[143]=_iP256[241]; 
        iBR256[144]=_iP256[9]; 
        iBR256[145]=_iP256[137]; 
        iBR256[146]=_iP256[73]; 
        iBR256[147]=_iP256[201]; 
        iBR256[148]=_iP256[41]; 
        iBR256[149]=_iP256[169]; 
        iBR256[150]=_iP256[105]; 
        iBR256[151]=_iP256[233]; 
        iBR256[152]=_iP256[25]; 
        iBR256[153]=_iP256[153]; 
        iBR256[154]=_iP256[89]; 
        iBR256[155]=_iP256[217]; 
        iBR256[156]=_iP256[57]; 
        iBR256[157]=_iP256[185]; 
        iBR256[158]=_iP256[121]; 
        iBR256[159]=_iP256[249]; 
        iBR256[160]=_iP256[5]; 
        iBR256[161]=_iP256[133]; 
        iBR256[162]=_iP256[69]; 
        iBR256[163]=_iP256[197]; 
        iBR256[164]=_iP256[37]; 
        iBR256[165]=_iP256[165]; 
        iBR256[166]=_iP256[101]; 
        iBR256[167]=_iP256[229]; 
        iBR256[168]=_iP256[21]; 
        iBR256[169]=_iP256[149]; 
        iBR256[170]=_iP256[85]; 
        iBR256[171]=_iP256[213]; 
        iBR256[172]=_iP256[53]; 
        iBR256[173]=_iP256[181]; 
        iBR256[174]=_iP256[117]; 
        iBR256[175]=_iP256[245]; 
        iBR256[176]=_iP256[13]; 
        iBR256[177]=_iP256[141]; 
        iBR256[178]=_iP256[77]; 
        iBR256[179]=_iP256[205]; 
        iBR256[180]=_iP256[45]; 
        iBR256[181]=_iP256[173]; 
        iBR256[182]=_iP256[109]; 
        iBR256[183]=_iP256[237]; 
        iBR256[184]=_iP256[29]; 
        iBR256[185]=_iP256[157]; 
        iBR256[186]=_iP256[93]; 
        iBR256[187]=_iP256[221]; 
        iBR256[188]=_iP256[61]; 
        iBR256[189]=_iP256[189]; 
        iBR256[190]=_iP256[125]; 
        iBR256[191]=_iP256[253]; 
        iBR256[192]=_iP256[3]; 
        iBR256[193]=_iP256[131]; 
        iBR256[194]=_iP256[67]; 
        iBR256[195]=_iP256[195]; 
        iBR256[196]=_iP256[35]; 
        iBR256[197]=_iP256[163]; 
        iBR256[198]=_iP256[99]; 
        iBR256[199]=_iP256[227]; 
        iBR256[200]=_iP256[19]; 
        iBR256[201]=_iP256[147]; 
        iBR256[202]=_iP256[83]; 
        iBR256[203]=_iP256[211]; 
        iBR256[204]=_iP256[51]; 
        iBR256[205]=_iP256[179]; 
        iBR256[206]=_iP256[115]; 
        iBR256[207]=_iP256[243]; 
        iBR256[208]=_iP256[11]; 
        iBR256[209]=_iP256[139]; 
        iBR256[210]=_iP256[75]; 
        iBR256[211]=_iP256[203]; 
        iBR256[212]=_iP256[43]; 
        iBR256[213]=_iP256[171]; 
        iBR256[214]=_iP256[107]; 
        iBR256[215]=_iP256[235]; 
        iBR256[216]=_iP256[27]; 
        iBR256[217]=_iP256[155]; 
        iBR256[218]=_iP256[91]; 
        iBR256[219]=_iP256[219]; 
        iBR256[220]=_iP256[59]; 
        iBR256[221]=_iP256[187]; 
        iBR256[222]=_iP256[123]; 
        iBR256[223]=_iP256[251]; 
        iBR256[224]=_iP256[7]; 
        iBR256[225]=_iP256[135]; 
        iBR256[226]=_iP256[71]; 
        iBR256[227]=_iP256[199]; 
        iBR256[228]=_iP256[39]; 
        iBR256[229]=_iP256[167]; 
        iBR256[230]=_iP256[103]; 
        iBR256[231]=_iP256[231]; 
        iBR256[232]=_iP256[23]; 
        iBR256[233]=_iP256[151]; 
        iBR256[234]=_iP256[87]; 
        iBR256[235]=_iP256[215]; 
        iBR256[236]=_iP256[55]; 
        iBR256[237]=_iP256[183]; 
        iBR256[238]=_iP256[119]; 
        iBR256[239]=_iP256[247]; 
        iBR256[240]=_iP256[15]; 
        iBR256[241]=_iP256[143]; 
        iBR256[242]=_iP256[79]; 
        iBR256[243]=_iP256[207]; 
        iBR256[244]=_iP256[47]; 
        iBR256[245]=_iP256[175]; 
        iBR256[246]=_iP256[111]; 
        iBR256[247]=_iP256[239]; 
        iBR256[248]=_iP256[31]; 
        iBR256[249]=_iP256[159]; 
        iBR256[250]=_iP256[95]; 
        iBR256[251]=_iP256[223]; 
        iBR256[252]=_iP256[63]; 
        iBR256[253]=_iP256[191]; 
        iBR256[254]=_iP256[127]; 
        iBR256[255]=_iP256[255]; 
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 4 - FFT step for SIZE 2/4 
    ////////////////////////////////////////////////

    for (let idx = 0, out_idx = 0; idx < 256; idx += 4, out_idx += 8) {
        let x0aRe = iBR256[idx    ];
        let x1aRe = iBR256[idx + 1];
        let x2aRe = iBR256[idx + 2];
        let x3aRe = iBR256[idx + 3];

        let sum1  =   x0aRe + x1aRe;
        let sum2  =   x2aRe + x3aRe;
        let diff1 =   x0aRe - x1aRe;
        let diff2 =   x3aRe - x2aRe;

        out256[out_idx]     = sum1 + sum2;
        out256[out_idx + 1] = 0.0;
        out256[out_idx + 2] = diff1;
        out256[out_idx + 3] = diff2;
        out256[out_idx + 4] = sum1 - sum2;
        out256[out_idx + 5] = 0.0;
        out256[out_idx + 6] = diff1;
        out256[out_idx + 7] = -diff2;
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 4 - FFT step for SIZE 8/16 
    ////////////////////////////////////////////////

    for (let idx = 0; idx < 512; idx += 32) {
        let xA0re  = out256[0   + idx];
        let xA1re  = out256[2   + idx];
        let xA1im  = out256[3   + idx];
        let xA2re  = out256[4   + idx];

        let xA4re  = out256[8   + idx];
        out256[8  + idx]  =     xA0re - xA4re;
        let xA5re  = out256[10  + idx];
        let xA5im  = out256[11  + idx];
        let xA6re  = out256[12  + idx];

        let xA8re  = out256[16  + idx]; 
        let xA9re  = out256[18  + idx]; 
        let xA9im  = out256[19  + idx]; 
        let xA10re = out256[20  + idx]; 

        let xA12re = out256[24  + idx]; 
        out256[24  + idx] =     xA0re - xA4re;
        out256[25  + idx] =     xA8re - xA12re;
        out256[9  + idx]  =   - xA8re + xA12re;
        out256[0  + idx]  = xA0re + xA4re + (xA8re + xA12re);
        out256[1  + idx]  = 0;
        out256[16  + idx] = xA0re + xA4re - (xA8re + xA12re);
        out256[17  + idx] = 0;
        let xA13re = out256[26  + idx]; 
        let xA13im = out256[27  + idx]; 
        let xA14re = out256[28  + idx]; 


        let tRe = 0.7071067690849304;  //FFT_FAC_8[2];
        let x1re  =  xA1re + (xA5re  *  tRe + xA5im  *  tRe);    
        let x1im  =  xA1im + (xA5re  * -tRe + xA5im  *  tRe);
        let x9re  =  xA9re + (xA13re *  tRe - xA13im * -tRe); 
        let x9im  =  xA9im + (xA13re * -tRe + xA13im *  tRe);

        let t1re  = 0.9238795042037964; //FFT_FAC_16[2];
        let t3re  = 0.3826834261417389; //FFT_FAC_16[6];
        let res3  =  x1im + (x9re * -t3re  + x9im *  t1re);
        out256[31  + idx] = -res3;
        let res2  =  x1re + (x9re *  t1re  - x9im * -t3re);
        out256[30  + idx] =  res2;
        let res19 =  x1im - (x9re * -t3re  + x9im *  t1re);
        out256[19  + idx] =  res19;
        let res18 =  x1re - (x9re *  t1re  - x9im * -t3re);
        out256[18  + idx] =  res18;

        out256[15  + idx] = -res19;
        out256[14  + idx] =  res18;
        out256[3   + idx]  =  res3;
        out256[2   + idx]  =  res2;

         
        let res4  = xA2re + (xA10re *  tRe + xA14re * -tRe);
        out256[4   + idx]  =  res4;
        let res5  =-xA6re + (xA10re * -tRe - xA14re *  tRe);
        out256[5   + idx]  =  res5;
        let res20 = xA2re - (xA10re *  tRe + xA14re * -tRe);
        out256[12  + idx] =  res20;
        let res21 =-xA6re - (xA10re * -tRe - xA14re *  tRe);
        out256[13  + idx] = -res21;

        out256[20  + idx] =  res20;
        out256[21  + idx] =  res21;
        out256[28  + idx] =  res4;
        out256[29  + idx] = -res5;


        let x3re  =  xA1re - (xA5re  *  tRe + xA5im  *  tRe);    
        let x3im  = -xA1im + (xA5re  * -tRe + xA5im  *  tRe);
        let x11re =  xA9re + (xA13re * -tRe - xA13im *  tRe); 
        let x11im = -xA9im + (xA13re * -tRe + xA13im *  tRe);


        let res7  = x3im + (x11re * -t1re + x11im *  t3re);
        out256[27  + idx] = -res7;
        let res6  = x3re + (x11re *  t3re - x11im * -t1re);
        out256[26  + idx] =  res6;
        let res23 = x3im - (x11re * -t1re + x11im *  t3re);
        out256[23  + idx] =  res23;
        let res22 = x3re - (x11re *  t3re - x11im * -t1re);
        out256[22  + idx] =  res22;

        out256[11  + idx] = -res23;
        out256[10  + idx] =  res22;
        out256[6   + idx]  =  res6;
        out256[7   + idx]  =  res7;
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 32 
    ////////////////////////////////////////////////
    /*{ 
     for (let j = 0; j < 16; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 16;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 32 + j;
         let oI = 32 + j + 16;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 64 + j;
         let oI = 64 + j + 16;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 96 + j;
         let oI = 96 + j + 16;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 16;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 160 + j;
         let oI = 160 + j + 16;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 192 + j;
         let oI = 192 + j + 16;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 224 + j;
         let oI = 224 + j + 16;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 64 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 32; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 32;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 64 + j;
         let oI = 64 + j + 32;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 32;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 192 + j;
         let oI = 192 + j + 32;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
    } */


    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 4 - FFT step for SIZE 32/64
    ////////////////////////////////////////////////
     for (let idx = 0; idx < 512; idx += 128) {
        let xA1re   = out256[ 2 + idx];
        let xA1im   = out256[ 3 + idx];
        let xA17re  = out256[34 + idx];
        let xA17im  = out256[35 + idx];
        let xA33re  = out256[66 + idx];
        let xA33im  = out256[67 + idx];
        let xA49re  = out256[98 + idx];
        let xA49im  = out256[99 + idx];

        let tA1re   = 0.9807852506637573; //FFT_FAC_32[2];
        let tA7re   = 0.1950903534889221; //FFT_FAC_32[14];
        let res2    = xA1re  + (xA17re *  tA1re - xA17im * -tA7re);
        let res3    = xA1im  + (xA17re * -tA7re + xA17im *  tA1re);
        let res18   = xA33re + (xA49re *  tA1re - xA49im * -tA7re);
        let res19   = xA33im + (xA49re * -tA7re + xA49im *  tA1re);
        let t1Re    = 0.9951847195625305; //FFT_FAC_64[2];
        let t15Re   = 0.0980171337723732; //FFT_FAC_64[30];

        let resB3   =  res3 + (res18 * -t15Re + res19 *  t1Re );
        out256[127 + idx]  = -resB3;
        let resB2   =  res2 + (res18 *  t1Re  - res19 * -t15Re);
        out256[126 + idx]  =  resB2;
        let resB67  =  res3 - (res18 * -t15Re + res19 *  t1Re );
        out256[67  + idx]  =  resB67;
        let resB66  =  res2 - (res18 *  t1Re  - res19 * -t15Re);
        out256[66  + idx]  =  resB66;

        out256[63  + idx]  = -resB67;
        out256[62  + idx]  =  resB66;
        out256[3   + idx]  =  resB3;
        out256[2   + idx]  =  resB2;



        let xA2re   = out256[ 4 + idx];
        let xA2im   = out256[ 5 + idx];
        let xA18re  = out256[36 + idx];
        let xA18im  = out256[37 + idx];
        let xA34re  = out256[68 + idx];
        let xA34im  = out256[69 + idx];
        let xA50re  = out256[100 + idx];
        let xA50im  = out256[101 + idx];  

        let tA2re   = 0.9238795042037964; //FFT_FAC_32[4];
        let tA6re   = 0.3826834261417389; //FFT_FAC_32[12];
        let res4    = xA2re + (xA18re *  tA2re - xA18im * -tA6re);
        let res5    = xA2im + (xA18re * -tA6re + xA18im *  tA2re);
        let res20   = xA34re + (xA50re *  tA2re - xA50im * -tA6re);
        let res21   = xA34im + (xA50re * -tA6re + xA50im *  tA2re);
        let t2Re    = 0.9807852506637573; //FFT_FAC_64[4];
        let t14Re   = 0.1950903534889221; //FFT_FAC_64[28];

        let resB4   =  res4 + (res20 *  t2Re  - res21 * -t14Re);
        out256[4  + idx]   =  resB4;
        let resB5   =  res5 + (res20 * -t14Re + res21 *  t2Re );
        out256[5  + idx]   =  resB5;
        let resB68  =  res4 - (res20 *  t2Re  - res21 * -t14Re);
        out256[60  + idx]  =  resB68;
        let resB69  =  res5 - (res20 * -t14Re + res21 *  t2Re );
        out256[61  + idx]  = -resB69;

        out256[68  + idx]  =  resB68;
        out256[69  + idx]  =  resB69;
        out256[124  + idx] =  resB4;
        out256[125  + idx] = -resB5;



        let xA3re   = out256[ 6 + idx];
        let xA3im   = out256[ 7 + idx];
        let xA19re  = out256[38 + idx];
        let xA19im  = out256[39 + idx];
        let xA35re  = out256[70 + idx];
        let xA35im  = out256[71 + idx];
        let xA51re  = out256[102 + idx];
        let xA51im  = out256[103 + idx];

        let tA3re   = 0.8314695954322815; //FFT_FAC_32[6];
        let tA5re   = 0.5555702447891235; //FFT_FAC_32[10];
        let res6    = xA3re  + (xA19re *  tA3re - xA19im * -tA5re);
        let res7    = xA3im  + (xA19re * -tA5re + xA19im *  tA3re);
        let res22   = xA35re + (xA51re *  tA3re - xA51im * -tA5re);
        let res23   = xA35im + (xA51re * -tA5re + xA51im *  tA3re);
        let t3Re    = 0.9569403529167175; //FFT_FAC_64[6];
        let t13Re   = 0.2902846336364746; //FFT_FAC_64[26];
        let resB7   =  res7 + (res22 * -t13Re + res23 *  t3Re );
        out256[123  + idx] = -resB7;
        let resB6   =  res6 + (res22 *  t3Re  - res23 * -t13Re);
        out256[122  + idx] =  resB6;
        let resB71  =  res7 - (res22 * -t13Re + res23 *  t3Re );
        out256[71  + idx]  =  resB71;
        let resB70  =  res6 - (res22 *  t3Re  - res23 * -t13Re);
        out256[70  + idx]  =  resB70;

        out256[59  + idx]  = -resB71;
        out256[58  + idx]  =  resB70;
        out256[7  + idx]   =  resB7;
        out256[6  + idx]   =  resB6;



        let xA4re   = out256[ 8 + idx];
        let xA4im   = out256[ 9 + idx];
        let xA20re  = out256[40 + idx];
        let xA20im  = out256[41 + idx];
        let xA36re  = out256[72 + idx];
        let xA36im  = out256[73 + idx];
        let xA52re  = out256[104 + idx];
        let xA52im  = out256[105 + idx];

        let tA4re   = 0.7071067690849304; //FFT_FAC_32[8];
        let res8    = xA4re + (xA20re *  tA4re - xA20im * -tA4re);
        let res9    = xA4im + (xA20re * -tA4re + xA20im *  tA4re);
        let res24   = xA36re + (xA52re *  tA4re - xA52im * -tA4re);
        let res25   = xA36im + (xA52re * -tA4re + xA52im *  tA4re);
        let t4Re    = 0.9238795042037964; //FFT_FAC_64[8];
        let t12Re   = 0.3826834261417389; //FFT_FAC_64[24];
        let resB8   =  res8 + (res24 *  t4Re  - res25 * -t12Re);
        out256[8  + idx]   =  resB8;
        let resB9   =  res9 + (res24 * -t12Re + res25 *  t4Re);
        out256[9  + idx]   =  resB9;
        let resB72  =  res8 - (res24 *  t4Re  - res25 * -t12Re);
        out256[56  + idx]  =  resB72;
        let resB73  =  res9 - (res24 * -t12Re + res25 *  t4Re);
        out256[57  + idx]  = -resB73;

        out256[72  + idx]  =  resB72;
        out256[73  + idx]  =  resB73;
        out256[120  + idx] =  resB8;
        out256[121  + idx] = -resB9;



        let xA5re   = out256[10 + idx];
        let xA5im   = out256[11 + idx];
        let xA21re  = out256[42 + idx];
        let xA21im  = out256[43 + idx];
        let xA37re  = out256[74 + idx];
        let xA37im  = out256[75 + idx];
        let xA53re  = out256[106 + idx];
        let xA53im  = out256[107 + idx];

        let res10   = xA5re + (xA21re *  tA5re - xA21im * -tA3re);
        let res11   = xA5im + (xA21re * -tA3re + xA21im *  tA5re);
        let res26   = xA37re + (xA53re *  tA5re - xA53im * -tA3re);
        let res27   = xA37im + (xA53re * -tA3re + xA53im *  tA5re);
        let t5Re  = 0.8819212913513184; //FFT_FAC_64[10];
        let t11Re = 0.4713967740535736; //FFT_FAC_64[22];
        let resB11  =  res11 + (res26 * -t11Re + res27 *  t5Re);
        out256[119  + idx] = -resB11;
        let resB10  =  res10 + (res26 *  t5Re  - res27 * -t11Re);
        out256[118  + idx] =  resB10;
        let resB75  =  res11 - (res26 * -t11Re + res27 *  t5Re);
        out256[75  + idx]  =  resB75;
        let resB74  =  res10 - (res26 *  t5Re  - res27 * -t11Re);
        out256[74  + idx]  =  resB74;

        out256[55  + idx]  = -resB75;
        out256[54  + idx]  =  resB74;
        out256[11  + idx]  =  resB11;
        out256[10  + idx]  =  resB10;



        let xA6re   = out256[12 + idx];
        let xA6im   = out256[13 + idx];
        let xA22re  = out256[44 + idx];
        let xA22im  = out256[45 + idx];
        let xA38re  = out256[76 + idx];
        let xA38im  = out256[77 + idx];
        let xA54re  = out256[108 + idx];
        let xA54im  = out256[109 + idx];

        let res12   = xA6re + (xA22re *  tA6re - xA22im * -tA2re);
        let res13   = xA6im + (xA22re * -tA2re + xA22im *  tA6re);
        let res28   = xA38re + (xA54re *  tA6re - xA54im * -tA2re);
        let res29   = xA38im + (xA54re * -tA2re + xA54im *  tA6re);
        let t6Re  = 0.8314695954322815; //FFT_FAC_64[12];
        let t10Re = 0.5555702447891235; //FFT_FAC_64[20];
        let resB12  =  res12 + (res28 *  t6Re  - res29 * -t10Re);
        out256[12  + idx]  =  resB12;
        let resB13  =  res13 + (res28 * -t10Re + res29 *  t6Re);
        out256[13  + idx]  =  resB13;
        let resB76  =  res12 - (res28 *  t6Re  - res29 * -t10Re);
        out256[52  + idx]  =  resB76;
        let resB77  =  res13 - (res28 * -t10Re + res29 *  t6Re);
        out256[53  + idx]  = -resB77;

        out256[76  + idx]  =  resB76;
        out256[77  + idx]  =  resB77;
        out256[116  + idx] =  resB12;
        out256[117  + idx] = -resB13;



        let xA7re   = out256[14 + idx];
        let xA7im   = out256[15 + idx];
        let xA23re  = out256[46 + idx];
        let xA23im  = out256[47 + idx];
        let xA39re  = out256[78 + idx];
        let xA39im  = out256[79 + idx];
        let xA55re  = out256[110 + idx];
        let xA55im  = out256[111 + idx];

        let res14   = xA7re + (xA23re *  tA7re - xA23im * -tA1re);
        let res15   = xA7im + (xA23re * -tA1re + xA23im *  tA7re);
        let res30   = xA39re + (xA55re *  tA7re - xA55im * -tA1re);
        let res31   = xA39im + (xA55re * -tA1re + xA55im *  tA7re);
        let t7Re  = 0.7730104923248291; //FFT_FAC_64[14];
        let t9Re  = 0.6343932747840881; //FFT_FAC_64[18];
        let resB15  =  res15 + (res30 * -t9Re + res31 *  t7Re);
        out256[115  + idx] = -resB15;
        let resB14  =  res14 + (res30 *  t7Re - res31 * -t9Re);
        out256[114  + idx] =  resB14;
        let resB79  =  res15 - (res30 * -t9Re + res31 *  t7Re);
        out256[79  + idx]  =  resB79;
        let resB78  =  res14 - (res30 *  t7Re - res31 * -t9Re);
        out256[78  + idx]  =  resB78;
        
        out256[51  + idx]  = -resB79;
        out256[50  + idx]  =  resB78;
        out256[15  + idx]  =  resB15;
        out256[14  + idx]  =  resB14;



        let xA8re   = out256[16 + idx];
        let xA8im   = out256[17 + idx];
        let xA24re = out256[48 + idx];
        let xA24im  = out256[49 + idx];
        let xA40re  = out256[80 + idx];
        let xA40im  = out256[81 + idx];
        let xA56re  = out256[112 + idx];
        let xA56im  = out256[113 + idx];

        let t8Re  = 0.7071067690849304; //FFT_FAC_64[16];
        out256[16  + idx]  =  xA8re + xA24im + ((xA40re + xA56im) *  t8Re - (xA40im - xA56re) * -t8Re);
        out256[17  + idx]  =  xA8im - xA24re + ((xA40re + xA56im) * -t8Re + (xA40im - xA56re) *  t8Re);
        out256[48  + idx]   = xA8re - xA24im + ((xA40re - xA56im) * -t8Re - (xA40im + xA56re) * -t8Re);
        out256[49  + idx]   = xA8im + xA24re + ((xA40re - xA56im) * -t8Re + (xA40im + xA56re) * -t8Re);
        out256[80  + idx]  =  xA8re + xA24im - ((xA40re + xA56im) *  t8Re - (xA40im - xA56re) * -t8Re);
        out256[81  + idx]  =  xA8im - xA24re - ((xA40re + xA56im) * -t8Re + (xA40im - xA56re) *  t8Re);
        out256[112  + idx]  = xA8re - xA24im - ((xA40re - xA56im) * -t8Re - (xA40im + xA56re) * -t8Re);
        out256[113  + idx]  = xA8im + xA24re - ((xA40re - xA56im) * -t8Re + (xA40im + xA56re) * -t8Re);





        let res46   =  xA7re  - (xA23re *  tA7re - xA23im * -tA1re);
        let res47   =  xA7im  - (xA23re * -tA1re + xA23im *  tA7re);
        let res62   =  xA39re - (xA55re *  tA7re - xA55im * -tA1re);
        let res63   =  xA39im - (xA55re * -tA1re + xA55im *  tA7re);
        let resB19  = -res47 + (res62 * -t7Re + -res63 *  t9Re);
        out256[111  + idx] = -resB19;
        let resB18  =  res46 + (res62 *  t9Re - -res63 * -t7Re);
        out256[110  + idx] =  resB18;
        let resB83  = -res47 - (res62 * -t7Re + -res63 *  t9Re);
        out256[83  + idx]  =  resB83;
        let resB82  =  res46 - (res62 *  t9Re - -res63 * -t7Re);
        out256[82  + idx]  =  resB82;

        out256[47  + idx]  = -resB83;
        out256[46  + idx]  =  resB82;
        out256[19  + idx]  =  resB19;
        out256[18  + idx]  =  resB18;



        let res44   =  xA6re  - (xA22re *  tA6re - xA22im * -tA2re);
        let res45   =  xA6im  - (xA22re * -tA2re + xA22im *  tA6re);
        let res60   =  xA38re - (xA54re *  tA6re - xA54im * -tA2re);
        let res61   =  xA38im - (xA54re * -tA2re + xA54im *  tA6re);
        let resB20  =  res44 + (res60 *  t10Re - -res61 * -t6Re );
        out256[20  + idx]  =  resB20;
        let resB21  = -res45 + (res60 * -t6Re  + -res61 *  t10Re);
        out256[21  + idx]  =  resB21;
        let resB84  =  res44 - (res60 *  t10Re - -res61 * -t6Re );
        out256[44  + idx]  =  resB84;
        let resB85  = -res45 - (res60 * -t6Re  + -res61 *  t10Re);
        out256[45  + idx]  = -resB85;

        out256[84  + idx]  =  resB84;
        out256[85  + idx]  =  resB85;
        out256[108  + idx] =  resB20;
        out256[109  + idx] = -resB21;



        let res42   =  xA5re  - (xA21re *  tA5re - xA21im * -tA3re);
        let res43   =  xA5im  - (xA21re * -tA3re + xA21im *  tA5re);
        let res58   =  xA37re - (xA53re *  tA5re - xA53im * -tA3re);
        let res59   =  xA37im - (xA53re * -tA3re + xA53im *  tA5re);
        let resB23  = -res43 + (res58 * -t5Re  + -res59 *  t11Re);
        out256[107  + idx] = -resB23;
        let resB22  =  res42 + (res58 *  t11Re - -res59 * -t5Re );
        out256[106  + idx] =  resB22;
        let resB87  = -res43 - (res58 * -t5Re  + -res59 *  t11Re);
        out256[87  + idx]  =  resB87;
        let resB86  =  res42 - (res58 *  t11Re - -res59 * -t5Re );
        out256[86  + idx]  =  resB86;

        out256[43  + idx]  = -resB87;
        out256[42  + idx]  =  resB86;
        out256[23  + idx]  =  resB23;
        out256[22  + idx]  =  resB22;



        let res40   =  xA4re  - (xA20re *  tA4re - xA20im * -tA4re);
        let res41   =  xA4im  - (xA20re * -tA4re + xA20im *  tA4re);
        let res56   =  xA36re - (xA52re *  tA4re - xA52im * -tA4re);
        let res57   =  xA36im - (xA52re * -tA4re + xA52im *  tA4re);
        let resB24  =  res40 + (res56 *  t12Re - -res57 * -t4Re );
        out256[24  + idx]  =  resB24;
        let resB25  = -res41 + (res56 * -t4Re  + -res57 * t12Re );
        out256[25  + idx]  =  resB25;
        let resB88  =  res40 - (res56 *  t12Re - -res57 * -t4Re );
        out256[40  + idx]  =  resB88;
        let resB89  = -res41 - (res56 * -t4Re  + -res57 * t12Re );
        out256[41  + idx]  = -resB89;

        out256[88  + idx]  =  resB88;
        out256[89  + idx]  =  resB89;
        out256[104  + idx] =  resB24;
        out256[105  + idx] = -resB25;



        let res38   =  xA3re  - (xA19re *  tA3re - xA19im * -tA5re);
        let res39   =  xA3im  - (xA19re * -tA5re + xA19im *  tA3re);
        let res54   =  xA35re - (xA51re *  tA3re - xA51im * -tA5re);
        let res55   =  xA35im - (xA51re * -tA5re + xA51im *  tA3re);
        let resB27  = -res39 + (res54 * -t3Re  + -res55 *  t13Re);
        out256[103  + idx] = -resB27;
        let resB26  =  res38 + (res54 *  t13Re - -res55 * -t3Re );
        out256[102  + idx] =  resB26;
        let resB91  = -res39 - (res54 * -t3Re  + -res55 *  t13Re);
        out256[91  + idx]  =  resB91;
        let resB90  =  res38 - (res54 *  t13Re - -res55 * -t3Re );
        out256[90  + idx]  =  resB90;

        out256[39  + idx]  = -resB91;
        out256[38  + idx]  =  resB90;
        out256[27  + idx]  =  resB27;
        out256[26  + idx]  =  resB26;



        let res36   = xA2re  - (xA18re *  tA2re - xA18im * -tA6re);
        let res37   = xA2im  - (xA18re * -tA6re + xA18im *  tA2re);
        let res52   = xA34re - (xA50re *  tA2re - xA50im * -tA6re);
        let res53   = xA34im - (xA50re * -tA6re + xA50im *  tA2re);
        let resB28  =  res36 + (res52 *  t14Re - -res53 * -t2Re );
        out256[28  + idx]  =  resB28;
        let resB29  = -res37 + (res52 * -t2Re  + -res53 *  t14Re);
        out256[29  + idx]  =  resB29;
        let resB92  =  res36 - (res52 *  t14Re - -res53 * -t2Re );
        out256[36  + idx]  =  resB92;
        let resB93  = -res37 - (res52 * -t2Re  + -res53 *  t14Re);
        out256[37  + idx]  = -resB93;

        out256[92  + idx]  =  resB92;
        out256[93  + idx]  =  resB93;
        out256[100  + idx] =  resB28;
        out256[101  + idx] = -resB29;



        let res34   =  xA1re - (xA17re *  tA1re - xA17im * -tA7re);
        let res35   =  xA1im - (xA17re * -tA7re + xA17im *  tA1re);
        let res50   =  xA33re - (xA49re *  tA1re - xA49im * -tA7re);
        let res51   =  xA33im - (xA49re * -tA7re + xA49im *  tA1re);
        let resB31  = -res35 + (res50 * -t1Re  + -res51 *  t15Re);
        out256[99  + idx]  = -resB31;
        let resB30  =  res34 + (res50 *  t15Re - -res51 * -t1Re );
        out256[98  + idx]  =  resB30;
        let resB95  = -res35 - (res50 * -t1Re  + -res51 *  t15Re);
        out256[95  + idx]  =  resB95;
        let resB94  =  res34 - (res50 *  t15Re - -res51 * -t1Re );
        out256[94  + idx]  =  resB94;

        out256[35  + idx]  = -resB95;
        out256[34  + idx]  =  resB94;
        out256[31  + idx]  =  resB31;
        out256[30  + idx]  =  resB30;



        let xA0re  = out256[ 0 + idx];
        let xA0im  = out256[ 1 + idx];
        let xA16re  = out256[32 + idx];
        let xA16im  = out256[33 + idx];
        let xA32re  = out256[64 + idx];
        let xA32im  = out256[65 + idx];
        let xA48re  = out256[96 + idx];
        let xA48im  = out256[97 + idx]; 

        out256[0   + idx]  =  xA0re + xA16re + xA32re + xA48re;
        out256[1   + idx]  =  xA0im + xA16im + xA32im + xA48im;
        out256[32  + idx]  =  xA0re - xA16re + xA32im - xA48im;
        out256[33  + idx]  =  xA0im - xA16im - xA32re + xA48re;
        out256[64  + idx]  =  xA0re + xA16re - xA32re - xA48re;
        out256[65  + idx]  =  xA0im + xA16im - xA32im - xA48im;
        out256[96  + idx]  =  xA0re - xA16re - xA32im + xA48im;
        out256[97  + idx]  =  xA0im - xA16im + xA32re - xA48re;
     }




    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 128 
    ////////////////////////////////////////////////
    /*
    { 
     for (let j = 0; j < 64; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 64;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 64;
         let eRe  = out256[eI * 2    ];
         let eIm  = out256[eI * 2 + 1];
         let oRe  = out256[oI * 2    ];
         let oIm  = out256[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[eI * 2    ] = eRe + t_oRe;
         out256[eI * 2 + 1] = eIm + t_oIm;
         out256[oI * 2    ] = eRe - t_oRe;
         out256[oI * 2 + 1] = eIm - t_oIm;
     }
    }*/

    { 
     for (let i = 0; i < 128; i+=2) { 
         let tRe  = FFT_FAC_128[i    ];
         let tIm  = FFT_FAC_128[i + 1];

         let i1reA = i;
         let i1imA = i + 1;
         let i1reB = i + 128;
         let i1imB = i + 129;

         let eRe1  = out256[i1reA];
         let eIm1  = out256[i1imA];
         let oRe1  = out256[i1reB];
         let oIm1  = out256[i1imB];
         let t_oRe1 = oRe1 * tRe - oIm1 * tIm;
         let t_oIm1 = oRe1 * tIm + oIm1 * tRe;
         out256[i1reA] = eRe1 + t_oRe1;
         out256[i1imB] = eIm1 + t_oIm1;
         out256[i1reA] = eRe1 - t_oRe1;
         out256[i1imB] = eIm1 - t_oIm1;

         let i2reA = i + 256;
         let i2imA = i + 257;
         let i2reB = i + 384;
         let i2imB = i + 385;

         let eRe2  = out256[i2reA];
         let eIm2  = out256[i2imB];
         let oRe2  = out256[i2reA];
         let oIm2  = out256[i2imB];
         let t_oRe2 = oRe2 * tRe - oIm2 * tIm;
         let t_oIm2 = oRe2 * tIm + oIm2 * tRe;
         out256[i2reA] = eRe2 + t_oRe2;
         out256[i2imB] = eIm2 + t_oIm2;
         out256[i2reA] = eRe2 - t_oRe2;
         out256[i2imB] = eIm2 - t_oIm2;
     }
    } 


    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 256 
    ////////////////////////////////////////////////
    { 
     for (let i = 0; i < 256; i+=2) { 
         let i1reA = i;
         let i1imA = i + 1;
         let i1reB = i + 256;
         let i1imB = i + 257;

         if(i > 128){
            out256[i1reA] =  out256[512 - i1reA];
            out256[i1imA] = -out256[512 - i1imA];
            out256[i1reB] =  out256[512 - i1reB];
            out256[i1imB] = -out256[512 - i1imB];
            continue;
         }

         let tRe  = FFT_FAC_256[i];
         let tIm  = FFT_FAC_256[i + 1];

         let eRe  = out256[i1reA];
         let eIm  = out256[i1imA];
         let oRe  = out256[i1reB];
         let oIm  = out256[i1imB];

         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out256[i1reB] = eRe + t_oRe;
         out256[i1imB] = eIm + t_oIm;
         out256[i1reB] = eRe - t_oRe;
         out256[i1imB] = eIm - t_oIm;
     }
    }

    return out256;
} 

export {fftReal256}; 
