let FFT_FAC_4 = new Float32Array([
1.0000000000000000,-0.0000000000000000,-0.0000000437113883,-1.0000000000000000
]);
let FFT_FAC_8 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.7071067690849304,-0.7071067690849304,-0.0000000437113883,-1.0000000000000000,-0.7071067690849304,-0.7071067690849304
]);
let FFT_FAC_16 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9238795042037964,-0.3826834559440613,0.7071067690849304,-0.7071067690849304,0.3826834261417389,-0.9238795042037964,
-0.0000000437113883,-1.0000000000000000,-0.3826833963394165,-0.9238795638084412,-0.7071067690849304,-0.7071067690849304,-0.9238795042037964,-0.3826834857463837
]);
let FFT_FAC_32 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9807852506637573,-0.1950903236865997,0.9238795042037964,-0.3826834559440613,0.8314695954322815,-0.5555702447891235,
0.7071067690849304,-0.7071067690849304,0.5555702447891235,-0.8314695954322815,0.3826834261417389,-0.9238795042037964,0.1950903534889221,-0.9807852506637573,
-0.0000000437113883,-1.0000000000000000,-0.1950903236865997,-0.9807852506637573,-0.3826833963394165,-0.9238795638084412,-0.5555701851844788,-0.8314696550369263,
-0.7071067690849304,-0.7071067690849304,-0.8314696550369263,-0.5555701851844788,-0.9238795042037964,-0.3826834857463837,-0.9807853102684021,-0.1950903087854385
]);
let FFT_FAC_64 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9951847195625305,-0.0980171412229538,0.9807852506637573,-0.1950903236865997,0.9569403529167175,-0.2902846634387970,
0.9238795042037964,-0.3826834559440613,0.8819212913513184,-0.4713967144489288,0.8314695954322815,-0.5555702447891235,0.7730104923248291,-0.6343932747840881,
0.7071067690849304,-0.7071067690849304,0.6343932747840881,-0.7730104327201843,0.5555702447891235,-0.8314695954322815,0.4713967740535736,-0.8819212317466736,
0.3826834261417389,-0.9238795042037964,0.2902846336364746,-0.9569403529167175,0.1950903534889221,-0.9807852506637573,0.0980171337723732,-0.9951847195625305,
-0.0000000437113883,-1.0000000000000000,-0.0980171039700508,-0.9951847195625305,-0.1950903236865997,-0.9807852506637573,-0.2902847230434418,-0.9569402933120728,
-0.3826833963394165,-0.9238795638084412,-0.4713966250419617,-0.8819212913513184,-0.5555701851844788,-0.8314696550369263,-0.6343932747840881,-0.7730104923248291,
-0.7071067690849304,-0.7071067690849304,-0.7730104923248291,-0.6343932747840881,-0.8314696550369263,-0.5555701851844788,-0.8819212317466736,-0.4713968336582184,
-0.9238795042037964,-0.3826834857463837,-0.9569403529167175,-0.2902847230434418,-0.9807853102684021,-0.1950903087854385,-0.9951847195625305,-0.0980170965194702
]);
let FFT_FAC_128 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9987954497337341,-0.0490676760673523,0.9951847195625305,-0.0980171412229538,0.9891765117645264,-0.1467304676771164,
0.9807852506637573,-0.1950903236865997,0.9700312614440918,-0.2429801821708679,0.9569403529167175,-0.2902846634387970,0.9415440559387207,-0.3368898332118988,
0.9238795042037964,-0.3826834559440613,0.9039893150329590,-0.4275550842285156,0.8819212913513184,-0.4713967144489288,0.8577286005020142,-0.5141027569770813,
0.8314695954322815,-0.5555702447891235,0.8032075166702271,-0.5956993103027344,0.7730104923248291,-0.6343932747840881,0.7409511208534241,-0.6715589761734009,
0.7071067690849304,-0.7071067690849304,0.6715589761734009,-0.7409511208534241,0.6343932747840881,-0.7730104327201843,0.5956993103027344,-0.8032075166702271,
0.5555702447891235,-0.8314695954322815,0.5141028165817261,-0.8577286005020142,0.4713967740535736,-0.8819212317466736,0.4275551140308380,-0.9039893150329590,
0.3826834261417389,-0.9238795042037964,0.3368898332118988,-0.9415440559387207,0.2902846336364746,-0.9569403529167175,0.2429802417755127,-0.9700312614440918,
0.1950903534889221,-0.9807852506637573,0.1467304974794388,-0.9891765117645264,0.0980171337723732,-0.9951847195625305,0.0490676499903202,-0.9987954497337341,
-0.0000000437113883,-1.0000000000000000,-0.0490676201879978,-0.9987954497337341,-0.0980171039700508,-0.9951847195625305,-0.1467304527759552,-0.9891765117645264,
-0.1950903236865997,-0.9807852506637573,-0.2429801970720291,-0.9700312614440918,-0.2902847230434418,-0.9569402933120728,-0.3368898034095764,-0.9415440559387207,
-0.3826833963394165,-0.9238795638084412,-0.4275550842285156,-0.9039893150329590,-0.4713966250419617,-0.8819212913513184,-0.5141027569770813,-0.8577286005020142,
-0.5555701851844788,-0.8314696550369263,-0.5956993699073792,-0.8032075166702271,-0.6343932747840881,-0.7730104923248291,-0.6715590357780457,-0.7409510612487793,
-0.7071067690849304,-0.7071067690849304,-0.7409510612487793,-0.6715590357780457,-0.7730104923248291,-0.6343932747840881,-0.8032075166702271,-0.5956993699073792,
-0.8314696550369263,-0.5555701851844788,-0.8577286005020142,-0.5141027569770813,-0.8819212317466736,-0.4713968336582184,-0.9039893150329590,-0.4275550544261932,
-0.9238795042037964,-0.3826834857463837,-0.9415441155433655,-0.3368898034095764,-0.9569403529167175,-0.2902847230434418,-0.9700312614440918,-0.2429800778627396,
-0.9807853102684021,-0.1950903087854385,-0.9891765117645264,-0.1467305719852448,-0.9951847195625305,-0.0980170965194702,-0.9987954497337341,-0.0490677244961262
]);
let FFT_FAC_256 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9996988177299500,-0.0245412290096283,0.9987954497337341,-0.0490676760673523,0.9972904324531555,-0.0735645666718483,
0.9951847195625305,-0.0980171412229538,0.9924795627593994,-0.1224106699228287,0.9891765117645264,-0.1467304676771164,0.9852776527404785,-0.1709618866443634,
0.9807852506637573,-0.1950903236865997,0.9757021069526672,-0.2191012352705002,0.9700312614440918,-0.2429801821708679,0.9637760519981384,-0.2667127549648285,
0.9569403529167175,-0.2902846634387970,0.9495281577110291,-0.3136817514896393,0.9415440559387207,-0.3368898332118988,0.9329928159713745,-0.3598950505256653,
0.9238795042037964,-0.3826834559440613,0.9142097830772400,-0.4052413105964661,0.9039893150329590,-0.4275550842285156,0.8932242989540100,-0.4496113359928131,
0.8819212913513184,-0.4713967144489288,0.8700870275497437,-0.4928981661796570,0.8577286005020142,-0.5141027569770813,0.8448535799980164,-0.5349976420402527,
0.8314695954322815,-0.5555702447891235,0.8175848126411438,-0.5758082270622253,0.8032075166702271,-0.5956993103027344,0.7883464694023132,-0.6152315735816956,
0.7730104923248291,-0.6343932747840881,0.7572088241577148,-0.6531728506088257,0.7409511208534241,-0.6715589761734009,0.7242470979690552,-0.6895405650138855,
0.7071067690849304,-0.7071067690849304,0.6895405650138855,-0.7242470383644104,0.6715589761734009,-0.7409511208534241,0.6531728506088257,-0.7572088241577148,
0.6343932747840881,-0.7730104327201843,0.6152315735816956,-0.7883464097976685,0.5956993103027344,-0.8032075166702271,0.5758082270622253,-0.8175848126411438,
0.5555702447891235,-0.8314695954322815,0.5349976420402527,-0.8448535799980164,0.5141028165817261,-0.8577286005020142,0.4928981959819794,-0.8700869679450989,
0.4713967740535736,-0.8819212317466736,0.4496113061904907,-0.8932242989540100,0.4275551140308380,-0.9039893150329590,0.4052412807941437,-0.9142097830772400,
0.3826834261417389,-0.9238795042037964,0.3598950803279877,-0.9329927563667297,0.3368898332118988,-0.9415440559387207,0.3136817514896393,-0.9495281577110291,
0.2902846336364746,-0.9569403529167175,0.2667127549648285,-0.9637760519981384,0.2429802417755127,-0.9700312614440918,0.2191012203693390,-0.9757021069526672,
0.1950903534889221,-0.9807852506637573,0.1709618568420410,-0.9852776527404785,0.1467304974794388,-0.9891765117645264,0.1224106252193451,-0.9924795627593994,
0.0980171337723732,-0.9951847195625305,0.0735646113753319,-0.9972904324531555,0.0490676499903202,-0.9987954497337341,0.0245412550866604,-0.9996988177299500,
-0.0000000437113883,-1.0000000000000000,-0.0245412234216928,-0.9996988177299500,-0.0490676201879978,-0.9987954497337341,-0.0735645741224289,-0.9972904324531555,
-0.0980171039700508,-0.9951847195625305,-0.1224107071757317,-0.9924795031547546,-0.1467304527759552,-0.9891765117645264,-0.1709619462490082,-0.9852776527404785,
-0.1950903236865997,-0.9807852506637573,-0.2191011905670166,-0.9757021665573120,-0.2429801970720291,-0.9700312614440918,-0.2667127251625061,-0.9637760519981384,
-0.2902847230434418,-0.9569402933120728,-0.3136817216873169,-0.9495281577110291,-0.3368898034095764,-0.9415440559387207,-0.3598950505256653,-0.9329928159713745,
-0.3826833963394165,-0.9238795638084412,-0.4052413403987885,-0.9142097234725952,-0.4275550842285156,-0.9039893150329590,-0.4496113657951355,-0.8932242989540100,
-0.4713966250419617,-0.8819212913513184,-0.4928981661796570,-0.8700870275497437,-0.5141027569770813,-0.8577286005020142,-0.5349977016448975,-0.8448535203933716,
-0.5555701851844788,-0.8314696550369263,-0.5758081674575806,-0.8175848126411438,-0.5956993699073792,-0.8032075166702271,-0.6152315139770508,-0.7883464694023132,
-0.6343932747840881,-0.7730104923248291,-0.6531728506088257,-0.7572088241577148,-0.6715590357780457,-0.7409510612487793,-0.6895405054092407,-0.7242470979690552,
-0.7071067690849304,-0.7071067690849304,-0.7242471575737000,-0.6895405054092407,-0.7409510612487793,-0.6715590357780457,-0.7572088241577148,-0.6531728506088257,
-0.7730104923248291,-0.6343932747840881,-0.7883464694023132,-0.6152315139770508,-0.8032075166702271,-0.5956993699073792,-0.8175848126411438,-0.5758081674575806,
-0.8314696550369263,-0.5555701851844788,-0.8448535203933716,-0.5349977016448975,-0.8577286005020142,-0.5141027569770813,-0.8700870275497437,-0.4928981363773346,
-0.8819212317466736,-0.4713968336582184,-0.8932242989540100,-0.4496113657951355,-0.9039893150329590,-0.4275550544261932,-0.9142097830772400,-0.4052412211894989,
-0.9238795042037964,-0.3826834857463837,-0.9329928159713745,-0.3598950505256653,-0.9415441155433655,-0.3368898034095764,-0.9495281577110291,-0.3136818408966064,
-0.9569403529167175,-0.2902847230434418,-0.9637760519981384,-0.2667127251625061,-0.9700312614440918,-0.2429800778627396,-0.9757021069526672,-0.2191012948751450,
-0.9807853102684021,-0.1950903087854385,-0.9852776527404785,-0.1709618121385574,-0.9891765117645264,-0.1467305719852448,-0.9924795031547546,-0.1224106997251511,
-0.9951847195625305,-0.0980170965194702,-0.9972904920578003,-0.0735644474625587,-0.9987954497337341,-0.0490677244961262,-0.9996988177299500,-0.0245412103831768
]);
let FFT_FAC_512 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9999247193336487,-0.0122715383768082,0.9996988177299500,-0.0245412290096283,0.9993223547935486,-0.0368072241544724,
0.9987954497337341,-0.0490676760673523,0.9981181025505066,-0.0613207370042801,0.9972904324531555,-0.0735645666718483,0.9963126182556152,-0.0857973098754883,
0.9951847195625305,-0.0980171412229538,0.9939069747924805,-0.1102222055196762,0.9924795627593994,-0.1224106699228287,0.9909026622772217,-0.1345807015895844,
0.9891765117645264,-0.1467304676771164,0.9873014092445374,-0.1588581502437592,0.9852776527404785,-0.1709618866443634,0.9831054806709290,-0.1830398887395859,
0.9807852506637573,-0.1950903236865997,0.9783173799514771,-0.2071113735437393,0.9757021069526672,-0.2191012352705002,0.9729399681091309,-0.2310581207275391,
0.9700312614440918,-0.2429801821708679,0.9669764637947083,-0.2548656463623047,0.9637760519981384,-0.2667127549648285,0.9604305028915405,-0.2785196900367737,
0.9569403529167175,-0.2902846634387970,0.9533060193061829,-0.3020059466362000,0.9495281577110291,-0.3136817514896393,0.9456073045730591,-0.3253102898597717,
0.9415440559387207,-0.3368898332118988,0.9373390078544617,-0.3484186828136444,0.9329928159713745,-0.3598950505256653,0.9285060763359070,-0.3713172078132629,
0.9238795042037964,-0.3826834559440613,0.9191138744354248,-0.3939920365810394,0.9142097830772400,-0.4052413105964661,0.9091680049896240,-0.4164295494556427,
0.9039893150329590,-0.4275550842285156,0.8986744880676270,-0.4386162459850311,0.8932242989540100,-0.4496113359928131,0.8876396417617798,-0.4605386853218079,
0.8819212913513184,-0.4713967144489288,0.8760700821876526,-0.4821837544441223,0.8700870275497437,-0.4928981661796570,0.8639728426933289,-0.5035383701324463,
0.8577286005020142,-0.5141027569770813,0.8513551950454712,-0.5245897173881531,0.8448535799980164,-0.5349976420402527,0.8382247090339661,-0.5453249812126160,
0.8314695954322815,-0.5555702447891235,0.8245893120765686,-0.5657317638397217,0.8175848126411438,-0.5758082270622253,0.8104572296142578,-0.5857978463172913,
0.8032075166702271,-0.5956993103027344,0.7958369255065918,-0.6055110096931458,0.7883464694023132,-0.6152315735816956,0.7807372212409973,-0.6248595118522644,
0.7730104923248291,-0.6343932747840881,0.7651672363281250,-0.6438315510749817,0.7572088241577148,-0.6531728506088257,0.7491363883018494,-0.6624158024787903,
0.7409511208534241,-0.6715589761734009,0.7326542735099792,-0.6806010007858276,0.7242470979690552,-0.6895405650138855,0.7157308459281921,-0.6983762383460999,
0.7071067690849304,-0.7071067690849304,0.6983762383460999,-0.7157308459281921,0.6895405650138855,-0.7242470383644104,0.6806010007858276,-0.7326542735099792,
0.6715589761734009,-0.7409511208534241,0.6624157428741455,-0.7491363883018494,0.6531728506088257,-0.7572088241577148,0.6438315510749817,-0.7651672959327698,
0.6343932747840881,-0.7730104327201843,0.6248595118522644,-0.7807372212409973,0.6152315735816956,-0.7883464097976685,0.6055110692977905,-0.7958369255065918,
0.5956993103027344,-0.8032075166702271,0.5857978463172913,-0.8104571700096130,0.5758082270622253,-0.8175848126411438,0.5657318234443665,-0.8245893120765686,
0.5555702447891235,-0.8314695954322815,0.5453249812126160,-0.8382247090339661,0.5349976420402527,-0.8448535799980164,0.5245896577835083,-0.8513551950454712,
0.5141028165817261,-0.8577286005020142,0.5035384297370911,-0.8639728426933289,0.4928981959819794,-0.8700869679450989,0.4821837246417999,-0.8760701417922974,
0.4713967740535736,-0.8819212317466736,0.4605387151241302,-0.8876396417617798,0.4496113061904907,-0.8932242989540100,0.4386162757873535,-0.8986744284629822,
0.4275551140308380,-0.9039893150329590,0.4164295494556427,-0.9091680049896240,0.4052412807941437,-0.9142097830772400,0.3939920663833618,-0.9191138148307800,
0.3826834261417389,-0.9238795042037964,0.3713171482086182,-0.9285060763359070,0.3598950803279877,-0.9329927563667297,0.3484186828136444,-0.9373390078544617,
0.3368898332118988,-0.9415440559387207,0.3253102302551270,-0.9456073641777039,0.3136817514896393,-0.9495281577110291,0.3020059466362000,-0.9533060193061829,
0.2902846336364746,-0.9569403529167175,0.2785197198390961,-0.9604305028915405,0.2667127549648285,-0.9637760519981384,0.2548656463623047,-0.9669764637947083,
0.2429802417755127,-0.9700312614440918,0.2310581356287003,-0.9729399681091309,0.2191012203693390,-0.9757021069526672,0.2071113288402557,-0.9783173799514771,
0.1950903534889221,-0.9807852506637573,0.1830398887395859,-0.9831054806709290,0.1709618568420410,-0.9852776527404785,0.1588581949472427,-0.9873014092445374,
0.1467304974794388,-0.9891765117645264,0.1345806866884232,-0.9909026622772217,0.1224106252193451,-0.9924795627593994,0.1102222353219986,-0.9939069747924805,
0.0980171337723732,-0.9951847195625305,0.0857972726225853,-0.9963126182556152,0.0735646113753319,-0.9972904324531555,0.0613207481801510,-0.9981181025505066,
0.0490676499903202,-0.9987954497337341,0.0368071645498276,-0.9993224143981934,0.0245412550866604,-0.9996988177299500,0.0122715290635824,-0.9999247193336487,
-0.0000000437113883,-1.0000000000000000,-0.0122714973986149,-0.9999247193336487,-0.0245412234216928,-0.9996988177299500,-0.0368072502315044,-0.9993223547935486,
-0.0490676201879978,-0.9987954497337341,-0.0613207146525383,-0.9981181025505066,-0.0735645741224289,-0.9972904324531555,-0.0857973620295525,-0.9963126182556152,
-0.0980171039700508,-0.9951847195625305,-0.1102222055196762,-0.9939069747924805,-0.1224107071757317,-0.9924795031547546,-0.1345806568861008,-0.9909026622772217,
-0.1467304527759552,-0.9891765117645264,-0.1588581651449203,-0.9873014092445374,-0.1709619462490082,-0.9852776527404785,-0.1830398589372635,-0.9831054806709290,
-0.1950903236865997,-0.9807852506637573,-0.2071114182472229,-0.9783173799514771,-0.2191011905670166,-0.9757021665573120,-0.2310580909252167,-0.9729399681091309,
-0.2429801970720291,-0.9700312614440918,-0.2548657059669495,-0.9669764637947083,-0.2667127251625061,-0.9637760519981384,-0.2785196900367737,-0.9604305028915405,
-0.2902847230434418,-0.9569402933120728,-0.3020059168338776,-0.9533060789108276,-0.3136817216873169,-0.9495281577110291,-0.3253103196620941,-0.9456073045730591,
-0.3368898034095764,-0.9415440559387207,-0.3484186530113220,-0.9373390078544617,-0.3598950505256653,-0.9329928159713745,-0.3713172376155853,-0.9285060763359070,
-0.3826833963394165,-0.9238795638084412,-0.3939920365810394,-0.9191138744354248,-0.4052413403987885,-0.9142097234725952,-0.4164295196533203,-0.9091680049896240,
-0.4275550842285156,-0.9039893150329590,-0.4386162459850311,-0.8986744284629822,-0.4496113657951355,-0.8932242989540100,-0.4605388045310974,-0.8876395821571350,
-0.4713966250419617,-0.8819212913513184,-0.4821836948394775,-0.8760701417922974,-0.4928981661796570,-0.8700870275497437,-0.5035383701324463,-0.8639728426933289,
-0.5141027569770813,-0.8577286005020142,-0.5245897173881531,-0.8513551354408264,-0.5349977016448975,-0.8448535203933716,-0.5453249216079712,-0.8382247686386108,
-0.5555701851844788,-0.8314696550369263,-0.5657317638397217,-0.8245893120765686,-0.5758081674575806,-0.8175848126411438,-0.5857979059219360,-0.8104571700096130,
-0.5956993699073792,-0.8032075166702271,-0.6055111289024353,-0.7958368659019470,-0.6152315139770508,-0.7883464694023132,-0.6248594522476196,-0.7807372808456421,
-0.6343932747840881,-0.7730104923248291,-0.6438315510749817,-0.7651672363281250,-0.6531728506088257,-0.7572088241577148,-0.6624158024787903,-0.7491363286972046,
-0.6715590357780457,-0.7409510612487793,-0.6806009411811829,-0.7326543331146240,-0.6895405054092407,-0.7242470979690552,-0.6983762383460999,-0.7157308459281921,
-0.7071067690849304,-0.7071067690849304,-0.7157308459281921,-0.6983762383460999,-0.7242471575737000,-0.6895405054092407,-0.7326543331146240,-0.6806009411811829,
-0.7409510612487793,-0.6715590357780457,-0.7491363286972046,-0.6624158024787903,-0.7572088241577148,-0.6531728506088257,-0.7651672959327698,-0.6438315510749817,
-0.7730104923248291,-0.6343932747840881,-0.7807372808456421,-0.6248594522476196,-0.7883464694023132,-0.6152315139770508,-0.7958368659019470,-0.6055111289024353,
-0.8032075166702271,-0.5956993699073792,-0.8104571700096130,-0.5857978463172913,-0.8175848126411438,-0.5758081674575806,-0.8245893120765686,-0.5657317638397217,
-0.8314696550369263,-0.5555701851844788,-0.8382246494293213,-0.5453251004219055,-0.8448535203933716,-0.5349977016448975,-0.8513551950454712,-0.5245897173881531,
-0.8577286005020142,-0.5141027569770813,-0.8639728426933289,-0.5035383701324463,-0.8700870275497437,-0.4928981363773346,-0.8760701417922974,-0.4821836948394775,
-0.8819212317466736,-0.4713968336582184,-0.8876395821571350,-0.4605387747287750,-0.8932242989540100,-0.4496113657951355,-0.8986744880676270,-0.4386162459850311,
-0.9039893150329590,-0.4275550544261932,-0.9091680049896240,-0.4164294898509979,-0.9142097830772400,-0.4052412211894989,-0.9191138148307800,-0.3939921259880066,
-0.9238795042037964,-0.3826834857463837,-0.9285060763359070,-0.3713172376155853,-0.9329928159713745,-0.3598950505256653,-0.9373390078544617,-0.3484186530113220,
-0.9415441155433655,-0.3368898034095764,-0.9456073641777039,-0.3253102004528046,-0.9495281577110291,-0.3136818408966064,-0.9533060193061829,-0.3020060062408447,
-0.9569403529167175,-0.2902847230434418,-0.9604305028915405,-0.2785196900367737,-0.9637760519981384,-0.2667127251625061,-0.9669764637947083,-0.2548655867576599,
-0.9700312614440918,-0.2429800778627396,-0.9729399085044861,-0.2310581952333450,-0.9757021069526672,-0.2191012948751450,-0.9783173799514771,-0.2071114033460617,
-0.9807853102684021,-0.1950903087854385,-0.9831054806709290,-0.1830398440361023,-0.9852776527404785,-0.1709618121385574,-0.9873014092445374,-0.1588580310344696,
-0.9891765117645264,-0.1467305719852448,-0.9909026026725769,-0.1345807611942291,-0.9924795031547546,-0.1224106997251511,-0.9939069747924805,-0.1102221980690956,
-0.9951847195625305,-0.0980170965194702,-0.9963126182556152,-0.0857972279191017,-0.9972904920578003,-0.0735644474625587,-0.9981181025505066,-0.0613208226859570,
-0.9987954497337341,-0.0490677244961262,-0.9993223547935486,-0.0368072390556335,-0.9996988177299500,-0.0245412103831768,-0.9999247193336487,-0.0122714852914214
]);
let FFT_FAC_1024 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9999811649322510,-0.0061358846724033,0.9999247193336487,-0.0122715383768082,0.9998306035995483,-0.0184067301452160,
0.9996988177299500,-0.0245412290096283,0.9995294213294983,-0.0306748021394014,0.9993223547935486,-0.0368072241544724,0.9990777373313904,-0.0429382547736168,
0.9987954497337341,-0.0490676760673523,0.9984755516052246,-0.0551952458918095,0.9981181025505066,-0.0613207370042801,0.9977230429649353,-0.0674439147114754,
0.9972904324531555,-0.0735645666718483,0.9968202710151672,-0.0796824395656586,0.9963126182556152,-0.0857973098754883,0.9957674145698547,-0.0919089540839195,
0.9951847195625305,-0.0980171412229538,0.9945645928382874,-0.1041216328740120,0.9939069747924805,-0.1102222055196762,0.9932119250297546,-0.1163186356425285,
0.9924795627593994,-0.1224106699228287,0.9917097687721252,-0.1284981071949005,0.9909026622772217,-0.1345807015895844,0.9900581836700439,-0.1406582444906235,
0.9891765117645264,-0.1467304676771164,0.9882575869560242,-0.1527971923351288,0.9873014092445374,-0.1588581502437592,0.9863080978393555,-0.1649131178855896,
0.9852776527404785,-0.1709618866443634,0.9842100739479065,-0.1770042181015015,0.9831054806709290,-0.1830398887395859,0.9819638729095459,-0.1890686601400375,
0.9807852506637573,-0.1950903236865997,0.9795697927474976,-0.2011046260595322,0.9783173799514771,-0.2071113735437393,0.9770281314849854,-0.2131103128194809,
0.9757021069526672,-0.2191012352705002,0.9743393659591675,-0.2250839173793793,0.9729399681091309,-0.2310581207275391,0.9715039134025574,-0.2370235919952393,
0.9700312614440918,-0.2429801821708679,0.9685220718383789,-0.2489276081323624,0.9669764637947083,-0.2548656463623047,0.9653944373130798,-0.2607941329479218,
0.9637760519981384,-0.2667127549648285,0.9621214270591736,-0.2726213634014130,0.9604305028915405,-0.2785196900367737,0.9587034583091736,-0.2844075560569763,
0.9569403529167175,-0.2902846634387970,0.9551411867141724,-0.2961508631706238,0.9533060193061829,-0.3020059466362000,0.9514350295066833,-0.3078496456146240,
0.9495281577110291,-0.3136817514896393,0.9475855827331543,-0.3195020258426666,0.9456073045730591,-0.3253102898597717,0.9435934424400330,-0.3311063051223755,
0.9415440559387207,-0.3368898332118988,0.9394592046737671,-0.3426607251167297,0.9373390078544617,-0.3484186828136444,0.9351835250854492,-0.3541635274887085,
0.9329928159713745,-0.3598950505256653,0.9307669401168823,-0.3656129837036133,0.9285060763359070,-0.3713172078132629,0.9262102246284485,-0.3770073950290680,
0.9238795042037964,-0.3826834559440613,0.9215140342712402,-0.3883450329303741,0.9191138744354248,-0.3939920365810394,0.9166790843009949,-0.3996241986751556,
0.9142097830772400,-0.4052413105964661,0.9117060303688049,-0.4108431935310364,0.9091680049896240,-0.4164295494556427,0.9065957069396973,-0.4220002889633179,
0.9039893150329590,-0.4275550842285156,0.9013488292694092,-0.4330938160419464,0.8986744880676270,-0.4386162459850311,0.8959662318229675,-0.4441221356391907,
0.8932242989540100,-0.4496113359928131,0.8904487490653992,-0.4550835788249969,0.8876396417617798,-0.4605386853218079,0.8847970962524414,-0.4659765064716339,
0.8819212913513184,-0.4713967144489288,0.8790122270584106,-0.4767992496490479,0.8760700821876526,-0.4821837544441223,0.8730949759483337,-0.4875501692295074,
0.8700870275497437,-0.4928981661796570,0.8670462369918823,-0.4982276558876038,0.8639728426933289,-0.5035383701324463,0.8608669042587280,-0.5088301897048950,
0.8577286005020142,-0.5141027569770813,0.8545579910278320,-0.5193560123443604,0.8513551950454712,-0.5245897173881531,0.8481203317642212,-0.5298035740852356,
0.8448535799980164,-0.5349976420402527,0.8415549993515015,-0.5401715040206909,0.8382247090339661,-0.5453249812126160,0.8348628878593445,-0.5504579544067383,
0.8314695954322815,-0.5555702447891235,0.8280450105667114,-0.5606616139411926,0.8245893120765686,-0.5657317638397217,0.8211024999618530,-0.5707807540893555,
0.8175848126411438,-0.5758082270622253,0.8140363097190857,-0.5808140039443970,0.8104572296142578,-0.5857978463172913,0.8068475723266602,-0.5907596945762634,
0.8032075166702271,-0.5956993103027344,0.7995373010635376,-0.6006164550781250,0.7958369255065918,-0.6055110096931458,0.7921065688133240,-0.6103827953338623,
0.7883464694023132,-0.6152315735816956,0.7845566272735596,-0.6200572252273560,0.7807372212409973,-0.6248595118522644,0.7768884301185608,-0.6296382546424866,
0.7730104923248291,-0.6343932747840881,0.7691033482551575,-0.6391244530677795,0.7651672363281250,-0.6438315510749817,0.7612023949623108,-0.6485143899917603,
0.7572088241577148,-0.6531728506088257,0.7531868219375610,-0.6578066945075989,0.7491363883018494,-0.6624158024787903,0.7450578212738037,-0.6669999361038208,
0.7409511208534241,-0.6715589761734009,0.7368165850639343,-0.6760927438735962,0.7326542735099792,-0.6806010007858276,0.7284643650054932,-0.6850836873054504,
0.7242470979690552,-0.6895405650138855,0.7200024724006653,-0.6939714550971985,0.7157308459281921,-0.6983762383460999,0.7114322185516357,-0.7027547359466553,
0.7071067690849304,-0.7071067690849304,0.7027547359466553,-0.7114321589469910,0.6983762383460999,-0.7157308459281921,0.6939714550971985,-0.7200025320053101,
0.6895405650138855,-0.7242470383644104,0.6850836873054504,-0.7284643650054932,0.6806010007858276,-0.7326542735099792,0.6760926842689514,-0.7368165850639343,
0.6715589761734009,-0.7409511208534241,0.6669999361038208,-0.7450577616691589,0.6624157428741455,-0.7491363883018494,0.6578066945075989,-0.7531867623329163,
0.6531728506088257,-0.7572088241577148,0.6485143899917603,-0.7612023949623108,0.6438315510749817,-0.7651672959327698,0.6391244530677795,-0.7691033482551575,
0.6343932747840881,-0.7730104327201843,0.6296381950378418,-0.7768884897232056,0.6248595118522644,-0.7807372212409973,0.6200572252273560,-0.7845565676689148,
0.6152315735816956,-0.7883464097976685,0.6103827953338623,-0.7921065688133240,0.6055110692977905,-0.7958369255065918,0.6006164550781250,-0.7995373010635376,
0.5956993103027344,-0.8032075166702271,0.5907596945762634,-0.8068475127220154,0.5857978463172913,-0.8104571700096130,0.5808139443397522,-0.8140363097190857,
0.5758082270622253,-0.8175848126411438,0.5707807540893555,-0.8211024999618530,0.5657318234443665,-0.8245893120765686,0.5606615543365479,-0.8280450701713562,
0.5555702447891235,-0.8314695954322815,0.5504579544067383,-0.8348628878593445,0.5453249812126160,-0.8382247090339661,0.5401715040206909,-0.8415549397468567,
0.5349976420402527,-0.8448535799980164,0.5298036336898804,-0.8481203317642212,0.5245896577835083,-0.8513551950454712,0.5193559527397156,-0.8545579910278320,
0.5141028165817261,-0.8577286005020142,0.5088301897048950,-0.8608669042587280,0.5035384297370911,-0.8639728426933289,0.4982276856899261,-0.8670462369918823,
0.4928981959819794,-0.8700869679450989,0.4875501394271851,-0.8730949759483337,0.4821837246417999,-0.8760701417922974,0.4767992794513702,-0.8790122270584106,
0.4713967740535736,-0.8819212317466736,0.4659765064716339,-0.8847970962524414,0.4605387151241302,-0.8876396417617798,0.4550835788249969,-0.8904487490653992,
0.4496113061904907,-0.8932242989540100,0.4441221058368683,-0.8959662914276123,0.4386162757873535,-0.8986744284629822,0.4330938458442688,-0.9013488292694092,
0.4275551140308380,-0.9039893150329590,0.4220002591609955,-0.9065957069396973,0.4164295494556427,-0.9091680049896240,0.4108431339263916,-0.9117060303688049,
0.4052412807941437,-0.9142097830772400,0.3996242582798004,-0.9166790246963501,0.3939920663833618,-0.9191138148307800,0.3883450627326965,-0.9215140342712402,
0.3826834261417389,-0.9238795042037964,0.3770073950290680,-0.9262102246284485,0.3713171482086182,-0.9285060763359070,0.3656129539012909,-0.9307669997215271,
0.3598950803279877,-0.9329927563667297,0.3541635572910309,-0.9351835250854492,0.3484186828136444,-0.9373390078544617,0.3426607251167297,-0.9394592046737671,
0.3368898332118988,-0.9415440559387207,0.3311062753200531,-0.9435934424400330,0.3253102302551270,-0.9456073641777039,0.3195020854473114,-0.9475855827331543,
0.3136817514896393,-0.9495281577110291,0.3078496456146240,-0.9514350295066833,0.3020059466362000,-0.9533060193061829,0.2961508631706238,-0.9551411867141724,
0.2902846336364746,-0.9569403529167175,0.2844075858592987,-0.9587034583091736,0.2785197198390961,-0.9604305028915405,0.2726213932037354,-0.9621214270591736,
0.2667127549648285,-0.9637760519981384,0.2607941031455994,-0.9653944373130798,0.2548656463623047,-0.9669764637947083,0.2489275634288788,-0.9685221314430237,
0.2429802417755127,-0.9700312614440918,0.2370236366987228,-0.9715038537979126,0.2310581356287003,-0.9729399681091309,0.2250839173793793,-0.9743393659591675,
0.2191012203693390,-0.9757021069526672,0.2131102830171585,-0.9770281314849854,0.2071113288402557,-0.9783173799514771,0.2011046856641769,-0.9795697331428528,
0.1950903534889221,-0.9807852506637573,0.1890686899423599,-0.9819638729095459,0.1830398887395859,-0.9831054806709290,0.1770042032003403,-0.9842100739479065,
0.1709618568420410,-0.9852776527404785,0.1649130731821060,-0.9863080978393555,0.1588581949472427,-0.9873014092445374,0.1527972221374512,-0.9882575869560242,
0.1467304974794388,-0.9891765117645264,0.1406582444906235,-0.9900581836700439,0.1345806866884232,-0.9909026622772217,0.1284980773925781,-0.9917097687721252,
0.1224106252193451,-0.9924795627593994,0.1163186803460121,-0.9932119250297546,0.1102222353219986,-0.9939069747924805,0.1041216477751732,-0.9945645928382874,
0.0980171337723732,-0.9951847195625305,0.0919089391827583,-0.9957674145698547,0.0857972726225853,-0.9963126182556152,0.0796823799610138,-0.9968203306198120,
0.0735646113753319,-0.9972904324531555,0.0674439445137978,-0.9977230429649353,0.0613207481801510,-0.9981181025505066,0.0551952384412289,-0.9984755516052246,
0.0490676499903202,-0.9987954497337341,0.0429382175207138,-0.9990777373313904,0.0368071645498276,-0.9993224143981934,0.0306748468428850,-0.9995294213294983,
0.0245412550866604,-0.9996988177299500,0.0184067375957966,-0.9998306035995483,0.0122715290635824,-0.9999247193336487,0.0061358581297100,-0.9999811649322510,
-0.0000000437113883,-1.0000000000000000,-0.0061358264647424,-0.9999811649322510,-0.0122714973986149,-0.9999247193336487,-0.0184067059308290,-0.9998306035995483,
-0.0245412234216928,-0.9996988177299500,-0.0306748151779175,-0.9995294213294983,-0.0368072502315044,-0.9993223547935486,-0.0429383032023907,-0.9990777373313904,
-0.0490676201879978,-0.9987954497337341,-0.0551952049136162,-0.9984756112098694,-0.0613207146525383,-0.9981181025505066,-0.0674439147114754,-0.9977230429649353,
-0.0735645741224289,-0.9972904324531555,-0.0796824693679810,-0.9968202710151672,-0.0857973620295525,-0.9963126182556152,-0.0919089019298553,-0.9957674145698547,
-0.0980171039700508,-0.9951847195625305,-0.1041216179728508,-0.9945645928382874,-0.1102222055196762,-0.9939069747924805,-0.1163186505436897,-0.9932119250297546,
-0.1224107071757317,-0.9924795031547546,-0.1284981667995453,-0.9917097687721252,-0.1345806568861008,-0.9909026622772217,-0.1406581997871399,-0.9900582432746887,
-0.1467304527759552,-0.9891765117645264,-0.1527971923351288,-0.9882575869560242,-0.1588581651449203,-0.9873014092445374,-0.1649131625890732,-0.9863080978393555,
-0.1709619462490082,-0.9852776527404785,-0.1770041733980179,-0.9842100739479065,-0.1830398589372635,-0.9831054806709290,-0.1890686452388763,-0.9819638729095459,
-0.1950903236865997,-0.9807852506637573,-0.2011046558618546,-0.9795697331428528,-0.2071114182472229,-0.9783173799514771,-0.2131103724241257,-0.9770281314849854,
-0.2191011905670166,-0.9757021665573120,-0.2250838875770569,-0.9743393659591675,-0.2310580909252167,-0.9729399681091309,-0.2370236068964005,-0.9715039134025574,
-0.2429801970720291,-0.9700312614440918,-0.2489276528358459,-0.9685220718383789,-0.2548657059669495,-0.9669764637947083,-0.2607940733432770,-0.9653944373130798,
-0.2667127251625061,-0.9637760519981384,-0.2726213335990906,-0.9621214270591736,-0.2785196900367737,-0.9604305028915405,-0.2844075560569763,-0.9587034583091736,
-0.2902847230434418,-0.9569402933120728,-0.2961508333683014,-0.9551411867141724,-0.3020059168338776,-0.9533060789108276,-0.3078496158123016,-0.9514350295066833,
-0.3136817216873169,-0.9495281577110291,-0.3195020556449890,-0.9475855827331543,-0.3253103196620941,-0.9456073045730591,-0.3311063647270203,-0.9435934424400330,
-0.3368898034095764,-0.9415440559387207,-0.3426606953144073,-0.9394592642784119,-0.3484186530113220,-0.9373390078544617,-0.3541635274887085,-0.9351835250854492,
-0.3598950505256653,-0.9329928159713745,-0.3656130135059357,-0.9307669401168823,-0.3713172376155853,-0.9285060763359070,-0.3770073652267456,-0.9262102842330933,
-0.3826833963394165,-0.9238795638084412,-0.3883450329303741,-0.9215140342712402,-0.3939920365810394,-0.9191138744354248,-0.3996242284774780,-0.9166790246963501,
-0.4052413403987885,-0.9142097234725952,-0.4108432233333588,-0.9117060303688049,-0.4164295196533203,-0.9091680049896240,-0.4220002293586731,-0.9065957069396973,
-0.4275550842285156,-0.9039893150329590,-0.4330938160419464,-0.9013488292694092,-0.4386162459850311,-0.8986744284629822,-0.4441221654415131,-0.8959662318229675,
-0.4496113657951355,-0.8932242989540100,-0.4550836384296417,-0.8904486894607544,-0.4605388045310974,-0.8876395821571350,-0.4659765958786011,-0.8847970366477966,
-0.4713966250419617,-0.8819212913513184,-0.4767991304397583,-0.8790122866630554,-0.4821836948394775,-0.8760701417922974,-0.4875501096248627,-0.8730950355529785,
-0.4928981661796570,-0.8700870275497437,-0.4982276558876038,-0.8670462369918823,-0.5035383701324463,-0.8639728426933289,-0.5088301301002502,-0.8608669638633728,
-0.5141027569770813,-0.8577286005020142,-0.5193560123443604,-0.8545579910278320,-0.5245897173881531,-0.8513551354408264,-0.5298036932945251,-0.8481203317642212,
-0.5349977016448975,-0.8448535203933716,-0.5401715636253357,-0.8415549397468567,-0.5453249216079712,-0.8382247686386108,-0.5504578948020935,-0.8348629474639893,
-0.5555701851844788,-0.8314696550369263,-0.5606615543365479,-0.8280450701713562,-0.5657317638397217,-0.8245893120765686,-0.5707807540893555,-0.8211024999618530,
-0.5758081674575806,-0.8175848126411438,-0.5808139443397522,-0.8140363097190857,-0.5857979059219360,-0.8104571700096130,-0.5907597541809082,-0.8068475127220154,
-0.5956993699073792,-0.8032075166702271,-0.6006165742874146,-0.7995372414588928,-0.6055111289024353,-0.7958368659019470,-0.6103829145431519,-0.7921065092086792,
-0.6152315139770508,-0.7883464694023132,-0.6200571656227112,-0.7845566272735596,-0.6248594522476196,-0.7807372808456421,-0.6296381950378418,-0.7768884897232056,
-0.6343932747840881,-0.7730104923248291,-0.6391244530677795,-0.7691033482551575,-0.6438315510749817,-0.7651672363281250,-0.6485143899917603,-0.7612023949623108,
-0.6531728506088257,-0.7572088241577148,-0.6578067541122437,-0.7531867623329163,-0.6624158024787903,-0.7491363286972046,-0.6669999957084656,-0.7450577020645142,
-0.6715590357780457,-0.7409510612487793,-0.6760926246643066,-0.7368166446685791,-0.6806009411811829,-0.7326543331146240,-0.6850836277008057,-0.7284644246101379,
-0.6895405054092407,-0.7242470979690552,-0.6939714550971985,-0.7200025320053101,-0.6983762383460999,-0.7157308459281921,-0.7027547359466553,-0.7114322185516357,
-0.7071067690849304,-0.7071067690849304,-0.7114322185516357,-0.7027547359466553,-0.7157308459281921,-0.6983762383460999,-0.7200025320053101,-0.6939713954925537,
-0.7242471575737000,-0.6895405054092407,-0.7284644246101379,-0.6850836277008057,-0.7326543331146240,-0.6806009411811829,-0.7368164658546448,-0.6760928034782410,
-0.7409510612487793,-0.6715590357780457,-0.7450577616691589,-0.6669999957084656,-0.7491363286972046,-0.6624158024787903,-0.7531867623329163,-0.6578066945075989,
-0.7572088241577148,-0.6531728506088257,-0.7612023949623108,-0.6485143899917603,-0.7651672959327698,-0.6438315510749817,-0.7691033482551575,-0.6391243934631348,
-0.7730104923248291,-0.6343932747840881,-0.7768884897232056,-0.6296381950378418,-0.7807372808456421,-0.6248594522476196,-0.7845566868782043,-0.6200571060180664,
-0.7883464694023132,-0.6152315139770508,-0.7921065092086792,-0.6103829145431519,-0.7958368659019470,-0.6055111289024353,-0.7995372414588928,-0.6006165146827698,
-0.8032075166702271,-0.5956993699073792,-0.8068475127220154,-0.5907597541809082,-0.8104571700096130,-0.5857978463172913,-0.8140363097190857,-0.5808139443397522,
-0.8175848126411438,-0.5758081674575806,-0.8211025595664978,-0.5707806944847107,-0.8245893120765686,-0.5657317638397217,-0.8280450701713562,-0.5606614947319031,
-0.8314696550369263,-0.5555701851844788,-0.8348629474639893,-0.5504578948020935,-0.8382246494293213,-0.5453251004219055,-0.8415549397468567,-0.5401715636253357,
-0.8448535203933716,-0.5349977016448975,-0.8481203317642212,-0.5298036932945251,-0.8513551950454712,-0.5245897173881531,-0.8545579910278320,-0.5193560123443604,
-0.8577286005020142,-0.5141027569770813,-0.8608669638633728,-0.5088301301002502,-0.8639728426933289,-0.5035383701324463,-0.8670462369918823,-0.4982276260852814,
-0.8700870275497437,-0.4928981363773346,-0.8730950355529785,-0.4875501096248627,-0.8760701417922974,-0.4821836948394775,-0.8790122866630554,-0.4767991304397583,
-0.8819212317466736,-0.4713968336582184,-0.8847970366477966,-0.4659765660762787,-0.8876395821571350,-0.4605387747287750,-0.8904486894607544,-0.4550836384296417,
-0.8932242989540100,-0.4496113657951355,-0.8959662318229675,-0.4441221654415131,-0.8986744880676270,-0.4386162459850311,-0.9013488292694092,-0.4330938160419464,
-0.9039893150329590,-0.4275550544261932,-0.9065957069396973,-0.4220002293586731,-0.9091680049896240,-0.4164294898509979,-0.9117060899734497,-0.4108431041240692,
-0.9142097830772400,-0.4052412211894989,-0.9166790843009949,-0.3996241092681885,-0.9191138148307800,-0.3939921259880066,-0.9215139746665955,-0.3883451223373413,
-0.9238795042037964,-0.3826834857463837,-0.9262102246284485,-0.3770074546337128,-0.9285060763359070,-0.3713172376155853,-0.9307669401168823,-0.3656130135059357,
-0.9329928159713745,-0.3598950505256653,-0.9351835250854492,-0.3541634976863861,-0.9373390078544617,-0.3484186530113220,-0.9394592642784119,-0.3426606655120850,
-0.9415441155433655,-0.3368898034095764,-0.9435935020446777,-0.3311062157154083,-0.9456073641777039,-0.3253102004528046,-0.9475856423377991,-0.3195019066333771,
-0.9495281577110291,-0.3136818408966064,-0.9514349699020386,-0.3078497350215912,-0.9533060193061829,-0.3020060062408447,-0.9551411271095276,-0.2961509227752686,
-0.9569403529167175,-0.2902847230434418,-0.9587034583091736,-0.2844075560569763,-0.9604305028915405,-0.2785196900367737,-0.9621214270591736,-0.2726213335990906,
-0.9637760519981384,-0.2667127251625061,-0.9653944373130798,-0.2607940733432770,-0.9669764637947083,-0.2548655867576599,-0.9685221314430237,-0.2489275187253952,
-0.9700312614440918,-0.2429800778627396,-0.9715038537979126,-0.2370237112045288,-0.9729399085044861,-0.2310581952333450,-0.9743393659591675,-0.2250839918851852,
-0.9757021069526672,-0.2191012948751450,-0.9770281314849854,-0.2131103575229645,-0.9783173799514771,-0.2071114033460617,-0.9795697927474976,-0.2011046409606934,
-0.9807853102684021,-0.1950903087854385,-0.9819638729095459,-0.1890686452388763,-0.9831054806709290,-0.1830398440361023,-0.9842100739479065,-0.1770041584968567,
-0.9852776527404785,-0.1709618121385574,-0.9863080978393555,-0.1649130284786224,-0.9873014092445374,-0.1588580310344696,-0.9882575273513794,-0.1527972966432571,
-0.9891765117645264,-0.1467305719852448,-0.9900581836700439,-0.1406583189964294,-0.9909026026725769,-0.1345807611942291,-0.9917097687721252,-0.1284981518983841,
-0.9924795031547546,-0.1224106997251511,-0.9932119250297546,-0.1163186356425285,-0.9939069747924805,-0.1102221980690956,-0.9945645928382874,-0.1041216030716896,
-0.9951847195625305,-0.0980170965194702,-0.9957674145698547,-0.0919088944792747,-0.9963126182556152,-0.0857972279191017,-0.9968203306198120,-0.0796823352575302,
-0.9972904920578003,-0.0735644474625587,-0.9977230429649353,-0.0674440264701843,-0.9981181025505066,-0.0613208226859570,-0.9984755516052246,-0.0551953129470348,
-0.9987954497337341,-0.0490677244961262,-0.9990777373313904,-0.0429382920265198,-0.9993223547935486,-0.0368072390556335,-0.9995294213294983,-0.0306748021394014,
-0.9996988177299500,-0.0245412103831768,-0.9998306035995483,-0.0184066947549582,-0.9999247193336487,-0.0122714852914214,-0.9999811649322510,-0.0061358148232102
]);


let iBR1024 = new Float32Array(1024);
let iP1024  = new Float32Array(1024);
let _iP1024 = new Float32Array(1024);
let out1024 = new Float32Array(2048);

function fftReal1024(realInput) { 
    let size = realInput.length;
    if (size != 1024) {
        for (let i = 0; i < 1024; i++) {
            iP1024[i] = (i < size) ? realInput[i] : 0.0;
        }
        _iP1024 = iP1024;
    } else {
        _iP1024 = realInput;
    }


    //Bit Reversal
    {
        iBR1024[0]=_iP1024[0]; 
        iBR1024[1]=_iP1024[512]; 
        iBR1024[2]=_iP1024[256]; 
        iBR1024[3]=_iP1024[768]; 
        iBR1024[4]=_iP1024[128]; 
        iBR1024[5]=_iP1024[640]; 
        iBR1024[6]=_iP1024[384]; 
        iBR1024[7]=_iP1024[896]; 
        iBR1024[8]=_iP1024[64]; 
        iBR1024[9]=_iP1024[576]; 
        iBR1024[10]=_iP1024[320]; 
        iBR1024[11]=_iP1024[832]; 
        iBR1024[12]=_iP1024[192]; 
        iBR1024[13]=_iP1024[704]; 
        iBR1024[14]=_iP1024[448]; 
        iBR1024[15]=_iP1024[960]; 
        iBR1024[16]=_iP1024[32]; 
        iBR1024[17]=_iP1024[544]; 
        iBR1024[18]=_iP1024[288]; 
        iBR1024[19]=_iP1024[800]; 
        iBR1024[20]=_iP1024[160]; 
        iBR1024[21]=_iP1024[672]; 
        iBR1024[22]=_iP1024[416]; 
        iBR1024[23]=_iP1024[928]; 
        iBR1024[24]=_iP1024[96]; 
        iBR1024[25]=_iP1024[608]; 
        iBR1024[26]=_iP1024[352]; 
        iBR1024[27]=_iP1024[864]; 
        iBR1024[28]=_iP1024[224]; 
        iBR1024[29]=_iP1024[736]; 
        iBR1024[30]=_iP1024[480]; 
        iBR1024[31]=_iP1024[992]; 
        iBR1024[32]=_iP1024[16]; 
        iBR1024[33]=_iP1024[528]; 
        iBR1024[34]=_iP1024[272]; 
        iBR1024[35]=_iP1024[784]; 
        iBR1024[36]=_iP1024[144]; 
        iBR1024[37]=_iP1024[656]; 
        iBR1024[38]=_iP1024[400]; 
        iBR1024[39]=_iP1024[912]; 
        iBR1024[40]=_iP1024[80]; 
        iBR1024[41]=_iP1024[592]; 
        iBR1024[42]=_iP1024[336]; 
        iBR1024[43]=_iP1024[848]; 
        iBR1024[44]=_iP1024[208]; 
        iBR1024[45]=_iP1024[720]; 
        iBR1024[46]=_iP1024[464]; 
        iBR1024[47]=_iP1024[976]; 
        iBR1024[48]=_iP1024[48]; 
        iBR1024[49]=_iP1024[560]; 
        iBR1024[50]=_iP1024[304]; 
        iBR1024[51]=_iP1024[816]; 
        iBR1024[52]=_iP1024[176]; 
        iBR1024[53]=_iP1024[688]; 
        iBR1024[54]=_iP1024[432]; 
        iBR1024[55]=_iP1024[944]; 
        iBR1024[56]=_iP1024[112]; 
        iBR1024[57]=_iP1024[624]; 
        iBR1024[58]=_iP1024[368]; 
        iBR1024[59]=_iP1024[880]; 
        iBR1024[60]=_iP1024[240]; 
        iBR1024[61]=_iP1024[752]; 
        iBR1024[62]=_iP1024[496]; 
        iBR1024[63]=_iP1024[1008]; 
        iBR1024[64]=_iP1024[8]; 
        iBR1024[65]=_iP1024[520]; 
        iBR1024[66]=_iP1024[264]; 
        iBR1024[67]=_iP1024[776]; 
        iBR1024[68]=_iP1024[136]; 
        iBR1024[69]=_iP1024[648]; 
        iBR1024[70]=_iP1024[392]; 
        iBR1024[71]=_iP1024[904]; 
        iBR1024[72]=_iP1024[72]; 
        iBR1024[73]=_iP1024[584]; 
        iBR1024[74]=_iP1024[328]; 
        iBR1024[75]=_iP1024[840]; 
        iBR1024[76]=_iP1024[200]; 
        iBR1024[77]=_iP1024[712]; 
        iBR1024[78]=_iP1024[456]; 
        iBR1024[79]=_iP1024[968]; 
        iBR1024[80]=_iP1024[40]; 
        iBR1024[81]=_iP1024[552]; 
        iBR1024[82]=_iP1024[296]; 
        iBR1024[83]=_iP1024[808]; 
        iBR1024[84]=_iP1024[168]; 
        iBR1024[85]=_iP1024[680]; 
        iBR1024[86]=_iP1024[424]; 
        iBR1024[87]=_iP1024[936]; 
        iBR1024[88]=_iP1024[104]; 
        iBR1024[89]=_iP1024[616]; 
        iBR1024[90]=_iP1024[360]; 
        iBR1024[91]=_iP1024[872]; 
        iBR1024[92]=_iP1024[232]; 
        iBR1024[93]=_iP1024[744]; 
        iBR1024[94]=_iP1024[488]; 
        iBR1024[95]=_iP1024[1000]; 
        iBR1024[96]=_iP1024[24]; 
        iBR1024[97]=_iP1024[536]; 
        iBR1024[98]=_iP1024[280]; 
        iBR1024[99]=_iP1024[792]; 
        iBR1024[100]=_iP1024[152]; 
        iBR1024[101]=_iP1024[664]; 
        iBR1024[102]=_iP1024[408]; 
        iBR1024[103]=_iP1024[920]; 
        iBR1024[104]=_iP1024[88]; 
        iBR1024[105]=_iP1024[600]; 
        iBR1024[106]=_iP1024[344]; 
        iBR1024[107]=_iP1024[856]; 
        iBR1024[108]=_iP1024[216]; 
        iBR1024[109]=_iP1024[728]; 
        iBR1024[110]=_iP1024[472]; 
        iBR1024[111]=_iP1024[984]; 
        iBR1024[112]=_iP1024[56]; 
        iBR1024[113]=_iP1024[568]; 
        iBR1024[114]=_iP1024[312]; 
        iBR1024[115]=_iP1024[824]; 
        iBR1024[116]=_iP1024[184]; 
        iBR1024[117]=_iP1024[696]; 
        iBR1024[118]=_iP1024[440]; 
        iBR1024[119]=_iP1024[952]; 
        iBR1024[120]=_iP1024[120]; 
        iBR1024[121]=_iP1024[632]; 
        iBR1024[122]=_iP1024[376]; 
        iBR1024[123]=_iP1024[888]; 
        iBR1024[124]=_iP1024[248]; 
        iBR1024[125]=_iP1024[760]; 
        iBR1024[126]=_iP1024[504]; 
        iBR1024[127]=_iP1024[1016]; 
        iBR1024[128]=_iP1024[4]; 
        iBR1024[129]=_iP1024[516]; 
        iBR1024[130]=_iP1024[260]; 
        iBR1024[131]=_iP1024[772]; 
        iBR1024[132]=_iP1024[132]; 
        iBR1024[133]=_iP1024[644]; 
        iBR1024[134]=_iP1024[388]; 
        iBR1024[135]=_iP1024[900]; 
        iBR1024[136]=_iP1024[68]; 
        iBR1024[137]=_iP1024[580]; 
        iBR1024[138]=_iP1024[324]; 
        iBR1024[139]=_iP1024[836]; 
        iBR1024[140]=_iP1024[196]; 
        iBR1024[141]=_iP1024[708]; 
        iBR1024[142]=_iP1024[452]; 
        iBR1024[143]=_iP1024[964]; 
        iBR1024[144]=_iP1024[36]; 
        iBR1024[145]=_iP1024[548]; 
        iBR1024[146]=_iP1024[292]; 
        iBR1024[147]=_iP1024[804]; 
        iBR1024[148]=_iP1024[164]; 
        iBR1024[149]=_iP1024[676]; 
        iBR1024[150]=_iP1024[420]; 
        iBR1024[151]=_iP1024[932]; 
        iBR1024[152]=_iP1024[100]; 
        iBR1024[153]=_iP1024[612]; 
        iBR1024[154]=_iP1024[356]; 
        iBR1024[155]=_iP1024[868]; 
        iBR1024[156]=_iP1024[228]; 
        iBR1024[157]=_iP1024[740]; 
        iBR1024[158]=_iP1024[484]; 
        iBR1024[159]=_iP1024[996]; 
        iBR1024[160]=_iP1024[20]; 
        iBR1024[161]=_iP1024[532]; 
        iBR1024[162]=_iP1024[276]; 
        iBR1024[163]=_iP1024[788]; 
        iBR1024[164]=_iP1024[148]; 
        iBR1024[165]=_iP1024[660]; 
        iBR1024[166]=_iP1024[404]; 
        iBR1024[167]=_iP1024[916]; 
        iBR1024[168]=_iP1024[84]; 
        iBR1024[169]=_iP1024[596]; 
        iBR1024[170]=_iP1024[340]; 
        iBR1024[171]=_iP1024[852]; 
        iBR1024[172]=_iP1024[212]; 
        iBR1024[173]=_iP1024[724]; 
        iBR1024[174]=_iP1024[468]; 
        iBR1024[175]=_iP1024[980]; 
        iBR1024[176]=_iP1024[52]; 
        iBR1024[177]=_iP1024[564]; 
        iBR1024[178]=_iP1024[308]; 
        iBR1024[179]=_iP1024[820]; 
        iBR1024[180]=_iP1024[180]; 
        iBR1024[181]=_iP1024[692]; 
        iBR1024[182]=_iP1024[436]; 
        iBR1024[183]=_iP1024[948]; 
        iBR1024[184]=_iP1024[116]; 
        iBR1024[185]=_iP1024[628]; 
        iBR1024[186]=_iP1024[372]; 
        iBR1024[187]=_iP1024[884]; 
        iBR1024[188]=_iP1024[244]; 
        iBR1024[189]=_iP1024[756]; 
        iBR1024[190]=_iP1024[500]; 
        iBR1024[191]=_iP1024[1012]; 
        iBR1024[192]=_iP1024[12]; 
        iBR1024[193]=_iP1024[524]; 
        iBR1024[194]=_iP1024[268]; 
        iBR1024[195]=_iP1024[780]; 
        iBR1024[196]=_iP1024[140]; 
        iBR1024[197]=_iP1024[652]; 
        iBR1024[198]=_iP1024[396]; 
        iBR1024[199]=_iP1024[908]; 
        iBR1024[200]=_iP1024[76]; 
        iBR1024[201]=_iP1024[588]; 
        iBR1024[202]=_iP1024[332]; 
        iBR1024[203]=_iP1024[844]; 
        iBR1024[204]=_iP1024[204]; 
        iBR1024[205]=_iP1024[716]; 
        iBR1024[206]=_iP1024[460]; 
        iBR1024[207]=_iP1024[972]; 
        iBR1024[208]=_iP1024[44]; 
        iBR1024[209]=_iP1024[556]; 
        iBR1024[210]=_iP1024[300]; 
        iBR1024[211]=_iP1024[812]; 
        iBR1024[212]=_iP1024[172]; 
        iBR1024[213]=_iP1024[684]; 
        iBR1024[214]=_iP1024[428]; 
        iBR1024[215]=_iP1024[940]; 
        iBR1024[216]=_iP1024[108]; 
        iBR1024[217]=_iP1024[620]; 
        iBR1024[218]=_iP1024[364]; 
        iBR1024[219]=_iP1024[876]; 
        iBR1024[220]=_iP1024[236]; 
        iBR1024[221]=_iP1024[748]; 
        iBR1024[222]=_iP1024[492]; 
        iBR1024[223]=_iP1024[1004]; 
        iBR1024[224]=_iP1024[28]; 
        iBR1024[225]=_iP1024[540]; 
        iBR1024[226]=_iP1024[284]; 
        iBR1024[227]=_iP1024[796]; 
        iBR1024[228]=_iP1024[156]; 
        iBR1024[229]=_iP1024[668]; 
        iBR1024[230]=_iP1024[412]; 
        iBR1024[231]=_iP1024[924]; 
        iBR1024[232]=_iP1024[92]; 
        iBR1024[233]=_iP1024[604]; 
        iBR1024[234]=_iP1024[348]; 
        iBR1024[235]=_iP1024[860]; 
        iBR1024[236]=_iP1024[220]; 
        iBR1024[237]=_iP1024[732]; 
        iBR1024[238]=_iP1024[476]; 
        iBR1024[239]=_iP1024[988]; 
        iBR1024[240]=_iP1024[60]; 
        iBR1024[241]=_iP1024[572]; 
        iBR1024[242]=_iP1024[316]; 
        iBR1024[243]=_iP1024[828]; 
        iBR1024[244]=_iP1024[188]; 
        iBR1024[245]=_iP1024[700]; 
        iBR1024[246]=_iP1024[444]; 
        iBR1024[247]=_iP1024[956]; 
        iBR1024[248]=_iP1024[124]; 
        iBR1024[249]=_iP1024[636]; 
        iBR1024[250]=_iP1024[380]; 
        iBR1024[251]=_iP1024[892]; 
        iBR1024[252]=_iP1024[252]; 
        iBR1024[253]=_iP1024[764]; 
        iBR1024[254]=_iP1024[508]; 
        iBR1024[255]=_iP1024[1020]; 
        iBR1024[256]=_iP1024[2]; 
        iBR1024[257]=_iP1024[514]; 
        iBR1024[258]=_iP1024[258]; 
        iBR1024[259]=_iP1024[770]; 
        iBR1024[260]=_iP1024[130]; 
        iBR1024[261]=_iP1024[642]; 
        iBR1024[262]=_iP1024[386]; 
        iBR1024[263]=_iP1024[898]; 
        iBR1024[264]=_iP1024[66]; 
        iBR1024[265]=_iP1024[578]; 
        iBR1024[266]=_iP1024[322]; 
        iBR1024[267]=_iP1024[834]; 
        iBR1024[268]=_iP1024[194]; 
        iBR1024[269]=_iP1024[706]; 
        iBR1024[270]=_iP1024[450]; 
        iBR1024[271]=_iP1024[962]; 
        iBR1024[272]=_iP1024[34]; 
        iBR1024[273]=_iP1024[546]; 
        iBR1024[274]=_iP1024[290]; 
        iBR1024[275]=_iP1024[802]; 
        iBR1024[276]=_iP1024[162]; 
        iBR1024[277]=_iP1024[674]; 
        iBR1024[278]=_iP1024[418]; 
        iBR1024[279]=_iP1024[930]; 
        iBR1024[280]=_iP1024[98]; 
        iBR1024[281]=_iP1024[610]; 
        iBR1024[282]=_iP1024[354]; 
        iBR1024[283]=_iP1024[866]; 
        iBR1024[284]=_iP1024[226]; 
        iBR1024[285]=_iP1024[738]; 
        iBR1024[286]=_iP1024[482]; 
        iBR1024[287]=_iP1024[994]; 
        iBR1024[288]=_iP1024[18]; 
        iBR1024[289]=_iP1024[530]; 
        iBR1024[290]=_iP1024[274]; 
        iBR1024[291]=_iP1024[786]; 
        iBR1024[292]=_iP1024[146]; 
        iBR1024[293]=_iP1024[658]; 
        iBR1024[294]=_iP1024[402]; 
        iBR1024[295]=_iP1024[914]; 
        iBR1024[296]=_iP1024[82]; 
        iBR1024[297]=_iP1024[594]; 
        iBR1024[298]=_iP1024[338]; 
        iBR1024[299]=_iP1024[850]; 
        iBR1024[300]=_iP1024[210]; 
        iBR1024[301]=_iP1024[722]; 
        iBR1024[302]=_iP1024[466]; 
        iBR1024[303]=_iP1024[978]; 
        iBR1024[304]=_iP1024[50]; 
        iBR1024[305]=_iP1024[562]; 
        iBR1024[306]=_iP1024[306]; 
        iBR1024[307]=_iP1024[818]; 
        iBR1024[308]=_iP1024[178]; 
        iBR1024[309]=_iP1024[690]; 
        iBR1024[310]=_iP1024[434]; 
        iBR1024[311]=_iP1024[946]; 
        iBR1024[312]=_iP1024[114]; 
        iBR1024[313]=_iP1024[626]; 
        iBR1024[314]=_iP1024[370]; 
        iBR1024[315]=_iP1024[882]; 
        iBR1024[316]=_iP1024[242]; 
        iBR1024[317]=_iP1024[754]; 
        iBR1024[318]=_iP1024[498]; 
        iBR1024[319]=_iP1024[1010]; 
        iBR1024[320]=_iP1024[10]; 
        iBR1024[321]=_iP1024[522]; 
        iBR1024[322]=_iP1024[266]; 
        iBR1024[323]=_iP1024[778]; 
        iBR1024[324]=_iP1024[138]; 
        iBR1024[325]=_iP1024[650]; 
        iBR1024[326]=_iP1024[394]; 
        iBR1024[327]=_iP1024[906]; 
        iBR1024[328]=_iP1024[74]; 
        iBR1024[329]=_iP1024[586]; 
        iBR1024[330]=_iP1024[330]; 
        iBR1024[331]=_iP1024[842]; 
        iBR1024[332]=_iP1024[202]; 
        iBR1024[333]=_iP1024[714]; 
        iBR1024[334]=_iP1024[458]; 
        iBR1024[335]=_iP1024[970]; 
        iBR1024[336]=_iP1024[42]; 
        iBR1024[337]=_iP1024[554]; 
        iBR1024[338]=_iP1024[298]; 
        iBR1024[339]=_iP1024[810]; 
        iBR1024[340]=_iP1024[170]; 
        iBR1024[341]=_iP1024[682]; 
        iBR1024[342]=_iP1024[426]; 
        iBR1024[343]=_iP1024[938]; 
        iBR1024[344]=_iP1024[106]; 
        iBR1024[345]=_iP1024[618]; 
        iBR1024[346]=_iP1024[362]; 
        iBR1024[347]=_iP1024[874]; 
        iBR1024[348]=_iP1024[234]; 
        iBR1024[349]=_iP1024[746]; 
        iBR1024[350]=_iP1024[490]; 
        iBR1024[351]=_iP1024[1002]; 
        iBR1024[352]=_iP1024[26]; 
        iBR1024[353]=_iP1024[538]; 
        iBR1024[354]=_iP1024[282]; 
        iBR1024[355]=_iP1024[794]; 
        iBR1024[356]=_iP1024[154]; 
        iBR1024[357]=_iP1024[666]; 
        iBR1024[358]=_iP1024[410]; 
        iBR1024[359]=_iP1024[922]; 
        iBR1024[360]=_iP1024[90]; 
        iBR1024[361]=_iP1024[602]; 
        iBR1024[362]=_iP1024[346]; 
        iBR1024[363]=_iP1024[858]; 
        iBR1024[364]=_iP1024[218]; 
        iBR1024[365]=_iP1024[730]; 
        iBR1024[366]=_iP1024[474]; 
        iBR1024[367]=_iP1024[986]; 
        iBR1024[368]=_iP1024[58]; 
        iBR1024[369]=_iP1024[570]; 
        iBR1024[370]=_iP1024[314]; 
        iBR1024[371]=_iP1024[826]; 
        iBR1024[372]=_iP1024[186]; 
        iBR1024[373]=_iP1024[698]; 
        iBR1024[374]=_iP1024[442]; 
        iBR1024[375]=_iP1024[954]; 
        iBR1024[376]=_iP1024[122]; 
        iBR1024[377]=_iP1024[634]; 
        iBR1024[378]=_iP1024[378]; 
        iBR1024[379]=_iP1024[890]; 
        iBR1024[380]=_iP1024[250]; 
        iBR1024[381]=_iP1024[762]; 
        iBR1024[382]=_iP1024[506]; 
        iBR1024[383]=_iP1024[1018]; 
        iBR1024[384]=_iP1024[6]; 
        iBR1024[385]=_iP1024[518]; 
        iBR1024[386]=_iP1024[262]; 
        iBR1024[387]=_iP1024[774]; 
        iBR1024[388]=_iP1024[134]; 
        iBR1024[389]=_iP1024[646]; 
        iBR1024[390]=_iP1024[390]; 
        iBR1024[391]=_iP1024[902]; 
        iBR1024[392]=_iP1024[70]; 
        iBR1024[393]=_iP1024[582]; 
        iBR1024[394]=_iP1024[326]; 
        iBR1024[395]=_iP1024[838]; 
        iBR1024[396]=_iP1024[198]; 
        iBR1024[397]=_iP1024[710]; 
        iBR1024[398]=_iP1024[454]; 
        iBR1024[399]=_iP1024[966]; 
        iBR1024[400]=_iP1024[38]; 
        iBR1024[401]=_iP1024[550]; 
        iBR1024[402]=_iP1024[294]; 
        iBR1024[403]=_iP1024[806]; 
        iBR1024[404]=_iP1024[166]; 
        iBR1024[405]=_iP1024[678]; 
        iBR1024[406]=_iP1024[422]; 
        iBR1024[407]=_iP1024[934]; 
        iBR1024[408]=_iP1024[102]; 
        iBR1024[409]=_iP1024[614]; 
        iBR1024[410]=_iP1024[358]; 
        iBR1024[411]=_iP1024[870]; 
        iBR1024[412]=_iP1024[230]; 
        iBR1024[413]=_iP1024[742]; 
        iBR1024[414]=_iP1024[486]; 
        iBR1024[415]=_iP1024[998]; 
        iBR1024[416]=_iP1024[22]; 
        iBR1024[417]=_iP1024[534]; 
        iBR1024[418]=_iP1024[278]; 
        iBR1024[419]=_iP1024[790]; 
        iBR1024[420]=_iP1024[150]; 
        iBR1024[421]=_iP1024[662]; 
        iBR1024[422]=_iP1024[406]; 
        iBR1024[423]=_iP1024[918]; 
        iBR1024[424]=_iP1024[86]; 
        iBR1024[425]=_iP1024[598]; 
        iBR1024[426]=_iP1024[342]; 
        iBR1024[427]=_iP1024[854]; 
        iBR1024[428]=_iP1024[214]; 
        iBR1024[429]=_iP1024[726]; 
        iBR1024[430]=_iP1024[470]; 
        iBR1024[431]=_iP1024[982]; 
        iBR1024[432]=_iP1024[54]; 
        iBR1024[433]=_iP1024[566]; 
        iBR1024[434]=_iP1024[310]; 
        iBR1024[435]=_iP1024[822]; 
        iBR1024[436]=_iP1024[182]; 
        iBR1024[437]=_iP1024[694]; 
        iBR1024[438]=_iP1024[438]; 
        iBR1024[439]=_iP1024[950]; 
        iBR1024[440]=_iP1024[118]; 
        iBR1024[441]=_iP1024[630]; 
        iBR1024[442]=_iP1024[374]; 
        iBR1024[443]=_iP1024[886]; 
        iBR1024[444]=_iP1024[246]; 
        iBR1024[445]=_iP1024[758]; 
        iBR1024[446]=_iP1024[502]; 
        iBR1024[447]=_iP1024[1014]; 
        iBR1024[448]=_iP1024[14]; 
        iBR1024[449]=_iP1024[526]; 
        iBR1024[450]=_iP1024[270]; 
        iBR1024[451]=_iP1024[782]; 
        iBR1024[452]=_iP1024[142]; 
        iBR1024[453]=_iP1024[654]; 
        iBR1024[454]=_iP1024[398]; 
        iBR1024[455]=_iP1024[910]; 
        iBR1024[456]=_iP1024[78]; 
        iBR1024[457]=_iP1024[590]; 
        iBR1024[458]=_iP1024[334]; 
        iBR1024[459]=_iP1024[846]; 
        iBR1024[460]=_iP1024[206]; 
        iBR1024[461]=_iP1024[718]; 
        iBR1024[462]=_iP1024[462]; 
        iBR1024[463]=_iP1024[974]; 
        iBR1024[464]=_iP1024[46]; 
        iBR1024[465]=_iP1024[558]; 
        iBR1024[466]=_iP1024[302]; 
        iBR1024[467]=_iP1024[814]; 
        iBR1024[468]=_iP1024[174]; 
        iBR1024[469]=_iP1024[686]; 
        iBR1024[470]=_iP1024[430]; 
        iBR1024[471]=_iP1024[942]; 
        iBR1024[472]=_iP1024[110]; 
        iBR1024[473]=_iP1024[622]; 
        iBR1024[474]=_iP1024[366]; 
        iBR1024[475]=_iP1024[878]; 
        iBR1024[476]=_iP1024[238]; 
        iBR1024[477]=_iP1024[750]; 
        iBR1024[478]=_iP1024[494]; 
        iBR1024[479]=_iP1024[1006]; 
        iBR1024[480]=_iP1024[30]; 
        iBR1024[481]=_iP1024[542]; 
        iBR1024[482]=_iP1024[286]; 
        iBR1024[483]=_iP1024[798]; 
        iBR1024[484]=_iP1024[158]; 
        iBR1024[485]=_iP1024[670]; 
        iBR1024[486]=_iP1024[414]; 
        iBR1024[487]=_iP1024[926]; 
        iBR1024[488]=_iP1024[94]; 
        iBR1024[489]=_iP1024[606]; 
        iBR1024[490]=_iP1024[350]; 
        iBR1024[491]=_iP1024[862]; 
        iBR1024[492]=_iP1024[222]; 
        iBR1024[493]=_iP1024[734]; 
        iBR1024[494]=_iP1024[478]; 
        iBR1024[495]=_iP1024[990]; 
        iBR1024[496]=_iP1024[62]; 
        iBR1024[497]=_iP1024[574]; 
        iBR1024[498]=_iP1024[318]; 
        iBR1024[499]=_iP1024[830]; 
        iBR1024[500]=_iP1024[190]; 
        iBR1024[501]=_iP1024[702]; 
        iBR1024[502]=_iP1024[446]; 
        iBR1024[503]=_iP1024[958]; 
        iBR1024[504]=_iP1024[126]; 
        iBR1024[505]=_iP1024[638]; 
        iBR1024[506]=_iP1024[382]; 
        iBR1024[507]=_iP1024[894]; 
        iBR1024[508]=_iP1024[254]; 
        iBR1024[509]=_iP1024[766]; 
        iBR1024[510]=_iP1024[510]; 
        iBR1024[511]=_iP1024[1022]; 
        iBR1024[512]=_iP1024[1]; 
        iBR1024[513]=_iP1024[513]; 
        iBR1024[514]=_iP1024[257]; 
        iBR1024[515]=_iP1024[769]; 
        iBR1024[516]=_iP1024[129]; 
        iBR1024[517]=_iP1024[641]; 
        iBR1024[518]=_iP1024[385]; 
        iBR1024[519]=_iP1024[897]; 
        iBR1024[520]=_iP1024[65]; 
        iBR1024[521]=_iP1024[577]; 
        iBR1024[522]=_iP1024[321]; 
        iBR1024[523]=_iP1024[833]; 
        iBR1024[524]=_iP1024[193]; 
        iBR1024[525]=_iP1024[705]; 
        iBR1024[526]=_iP1024[449]; 
        iBR1024[527]=_iP1024[961]; 
        iBR1024[528]=_iP1024[33]; 
        iBR1024[529]=_iP1024[545]; 
        iBR1024[530]=_iP1024[289]; 
        iBR1024[531]=_iP1024[801]; 
        iBR1024[532]=_iP1024[161]; 
        iBR1024[533]=_iP1024[673]; 
        iBR1024[534]=_iP1024[417]; 
        iBR1024[535]=_iP1024[929]; 
        iBR1024[536]=_iP1024[97]; 
        iBR1024[537]=_iP1024[609]; 
        iBR1024[538]=_iP1024[353]; 
        iBR1024[539]=_iP1024[865]; 
        iBR1024[540]=_iP1024[225]; 
        iBR1024[541]=_iP1024[737]; 
        iBR1024[542]=_iP1024[481]; 
        iBR1024[543]=_iP1024[993]; 
        iBR1024[544]=_iP1024[17]; 
        iBR1024[545]=_iP1024[529]; 
        iBR1024[546]=_iP1024[273]; 
        iBR1024[547]=_iP1024[785]; 
        iBR1024[548]=_iP1024[145]; 
        iBR1024[549]=_iP1024[657]; 
        iBR1024[550]=_iP1024[401]; 
        iBR1024[551]=_iP1024[913]; 
        iBR1024[552]=_iP1024[81]; 
        iBR1024[553]=_iP1024[593]; 
        iBR1024[554]=_iP1024[337]; 
        iBR1024[555]=_iP1024[849]; 
        iBR1024[556]=_iP1024[209]; 
        iBR1024[557]=_iP1024[721]; 
        iBR1024[558]=_iP1024[465]; 
        iBR1024[559]=_iP1024[977]; 
        iBR1024[560]=_iP1024[49]; 
        iBR1024[561]=_iP1024[561]; 
        iBR1024[562]=_iP1024[305]; 
        iBR1024[563]=_iP1024[817]; 
        iBR1024[564]=_iP1024[177]; 
        iBR1024[565]=_iP1024[689]; 
        iBR1024[566]=_iP1024[433]; 
        iBR1024[567]=_iP1024[945]; 
        iBR1024[568]=_iP1024[113]; 
        iBR1024[569]=_iP1024[625]; 
        iBR1024[570]=_iP1024[369]; 
        iBR1024[571]=_iP1024[881]; 
        iBR1024[572]=_iP1024[241]; 
        iBR1024[573]=_iP1024[753]; 
        iBR1024[574]=_iP1024[497]; 
        iBR1024[575]=_iP1024[1009]; 
        iBR1024[576]=_iP1024[9]; 
        iBR1024[577]=_iP1024[521]; 
        iBR1024[578]=_iP1024[265]; 
        iBR1024[579]=_iP1024[777]; 
        iBR1024[580]=_iP1024[137]; 
        iBR1024[581]=_iP1024[649]; 
        iBR1024[582]=_iP1024[393]; 
        iBR1024[583]=_iP1024[905]; 
        iBR1024[584]=_iP1024[73]; 
        iBR1024[585]=_iP1024[585]; 
        iBR1024[586]=_iP1024[329]; 
        iBR1024[587]=_iP1024[841]; 
        iBR1024[588]=_iP1024[201]; 
        iBR1024[589]=_iP1024[713]; 
        iBR1024[590]=_iP1024[457]; 
        iBR1024[591]=_iP1024[969]; 
        iBR1024[592]=_iP1024[41]; 
        iBR1024[593]=_iP1024[553]; 
        iBR1024[594]=_iP1024[297]; 
        iBR1024[595]=_iP1024[809]; 
        iBR1024[596]=_iP1024[169]; 
        iBR1024[597]=_iP1024[681]; 
        iBR1024[598]=_iP1024[425]; 
        iBR1024[599]=_iP1024[937]; 
        iBR1024[600]=_iP1024[105]; 
        iBR1024[601]=_iP1024[617]; 
        iBR1024[602]=_iP1024[361]; 
        iBR1024[603]=_iP1024[873]; 
        iBR1024[604]=_iP1024[233]; 
        iBR1024[605]=_iP1024[745]; 
        iBR1024[606]=_iP1024[489]; 
        iBR1024[607]=_iP1024[1001]; 
        iBR1024[608]=_iP1024[25]; 
        iBR1024[609]=_iP1024[537]; 
        iBR1024[610]=_iP1024[281]; 
        iBR1024[611]=_iP1024[793]; 
        iBR1024[612]=_iP1024[153]; 
        iBR1024[613]=_iP1024[665]; 
        iBR1024[614]=_iP1024[409]; 
        iBR1024[615]=_iP1024[921]; 
        iBR1024[616]=_iP1024[89]; 
        iBR1024[617]=_iP1024[601]; 
        iBR1024[618]=_iP1024[345]; 
        iBR1024[619]=_iP1024[857]; 
        iBR1024[620]=_iP1024[217]; 
        iBR1024[621]=_iP1024[729]; 
        iBR1024[622]=_iP1024[473]; 
        iBR1024[623]=_iP1024[985]; 
        iBR1024[624]=_iP1024[57]; 
        iBR1024[625]=_iP1024[569]; 
        iBR1024[626]=_iP1024[313]; 
        iBR1024[627]=_iP1024[825]; 
        iBR1024[628]=_iP1024[185]; 
        iBR1024[629]=_iP1024[697]; 
        iBR1024[630]=_iP1024[441]; 
        iBR1024[631]=_iP1024[953]; 
        iBR1024[632]=_iP1024[121]; 
        iBR1024[633]=_iP1024[633]; 
        iBR1024[634]=_iP1024[377]; 
        iBR1024[635]=_iP1024[889]; 
        iBR1024[636]=_iP1024[249]; 
        iBR1024[637]=_iP1024[761]; 
        iBR1024[638]=_iP1024[505]; 
        iBR1024[639]=_iP1024[1017]; 
        iBR1024[640]=_iP1024[5]; 
        iBR1024[641]=_iP1024[517]; 
        iBR1024[642]=_iP1024[261]; 
        iBR1024[643]=_iP1024[773]; 
        iBR1024[644]=_iP1024[133]; 
        iBR1024[645]=_iP1024[645]; 
        iBR1024[646]=_iP1024[389]; 
        iBR1024[647]=_iP1024[901]; 
        iBR1024[648]=_iP1024[69]; 
        iBR1024[649]=_iP1024[581]; 
        iBR1024[650]=_iP1024[325]; 
        iBR1024[651]=_iP1024[837]; 
        iBR1024[652]=_iP1024[197]; 
        iBR1024[653]=_iP1024[709]; 
        iBR1024[654]=_iP1024[453]; 
        iBR1024[655]=_iP1024[965]; 
        iBR1024[656]=_iP1024[37]; 
        iBR1024[657]=_iP1024[549]; 
        iBR1024[658]=_iP1024[293]; 
        iBR1024[659]=_iP1024[805]; 
        iBR1024[660]=_iP1024[165]; 
        iBR1024[661]=_iP1024[677]; 
        iBR1024[662]=_iP1024[421]; 
        iBR1024[663]=_iP1024[933]; 
        iBR1024[664]=_iP1024[101]; 
        iBR1024[665]=_iP1024[613]; 
        iBR1024[666]=_iP1024[357]; 
        iBR1024[667]=_iP1024[869]; 
        iBR1024[668]=_iP1024[229]; 
        iBR1024[669]=_iP1024[741]; 
        iBR1024[670]=_iP1024[485]; 
        iBR1024[671]=_iP1024[997]; 
        iBR1024[672]=_iP1024[21]; 
        iBR1024[673]=_iP1024[533]; 
        iBR1024[674]=_iP1024[277]; 
        iBR1024[675]=_iP1024[789]; 
        iBR1024[676]=_iP1024[149]; 
        iBR1024[677]=_iP1024[661]; 
        iBR1024[678]=_iP1024[405]; 
        iBR1024[679]=_iP1024[917]; 
        iBR1024[680]=_iP1024[85]; 
        iBR1024[681]=_iP1024[597]; 
        iBR1024[682]=_iP1024[341]; 
        iBR1024[683]=_iP1024[853]; 
        iBR1024[684]=_iP1024[213]; 
        iBR1024[685]=_iP1024[725]; 
        iBR1024[686]=_iP1024[469]; 
        iBR1024[687]=_iP1024[981]; 
        iBR1024[688]=_iP1024[53]; 
        iBR1024[689]=_iP1024[565]; 
        iBR1024[690]=_iP1024[309]; 
        iBR1024[691]=_iP1024[821]; 
        iBR1024[692]=_iP1024[181]; 
        iBR1024[693]=_iP1024[693]; 
        iBR1024[694]=_iP1024[437]; 
        iBR1024[695]=_iP1024[949]; 
        iBR1024[696]=_iP1024[117]; 
        iBR1024[697]=_iP1024[629]; 
        iBR1024[698]=_iP1024[373]; 
        iBR1024[699]=_iP1024[885]; 
        iBR1024[700]=_iP1024[245]; 
        iBR1024[701]=_iP1024[757]; 
        iBR1024[702]=_iP1024[501]; 
        iBR1024[703]=_iP1024[1013]; 
        iBR1024[704]=_iP1024[13]; 
        iBR1024[705]=_iP1024[525]; 
        iBR1024[706]=_iP1024[269]; 
        iBR1024[707]=_iP1024[781]; 
        iBR1024[708]=_iP1024[141]; 
        iBR1024[709]=_iP1024[653]; 
        iBR1024[710]=_iP1024[397]; 
        iBR1024[711]=_iP1024[909]; 
        iBR1024[712]=_iP1024[77]; 
        iBR1024[713]=_iP1024[589]; 
        iBR1024[714]=_iP1024[333]; 
        iBR1024[715]=_iP1024[845]; 
        iBR1024[716]=_iP1024[205]; 
        iBR1024[717]=_iP1024[717]; 
        iBR1024[718]=_iP1024[461]; 
        iBR1024[719]=_iP1024[973]; 
        iBR1024[720]=_iP1024[45]; 
        iBR1024[721]=_iP1024[557]; 
        iBR1024[722]=_iP1024[301]; 
        iBR1024[723]=_iP1024[813]; 
        iBR1024[724]=_iP1024[173]; 
        iBR1024[725]=_iP1024[685]; 
        iBR1024[726]=_iP1024[429]; 
        iBR1024[727]=_iP1024[941]; 
        iBR1024[728]=_iP1024[109]; 
        iBR1024[729]=_iP1024[621]; 
        iBR1024[730]=_iP1024[365]; 
        iBR1024[731]=_iP1024[877]; 
        iBR1024[732]=_iP1024[237]; 
        iBR1024[733]=_iP1024[749]; 
        iBR1024[734]=_iP1024[493]; 
        iBR1024[735]=_iP1024[1005]; 
        iBR1024[736]=_iP1024[29]; 
        iBR1024[737]=_iP1024[541]; 
        iBR1024[738]=_iP1024[285]; 
        iBR1024[739]=_iP1024[797]; 
        iBR1024[740]=_iP1024[157]; 
        iBR1024[741]=_iP1024[669]; 
        iBR1024[742]=_iP1024[413]; 
        iBR1024[743]=_iP1024[925]; 
        iBR1024[744]=_iP1024[93]; 
        iBR1024[745]=_iP1024[605]; 
        iBR1024[746]=_iP1024[349]; 
        iBR1024[747]=_iP1024[861]; 
        iBR1024[748]=_iP1024[221]; 
        iBR1024[749]=_iP1024[733]; 
        iBR1024[750]=_iP1024[477]; 
        iBR1024[751]=_iP1024[989]; 
        iBR1024[752]=_iP1024[61]; 
        iBR1024[753]=_iP1024[573]; 
        iBR1024[754]=_iP1024[317]; 
        iBR1024[755]=_iP1024[829]; 
        iBR1024[756]=_iP1024[189]; 
        iBR1024[757]=_iP1024[701]; 
        iBR1024[758]=_iP1024[445]; 
        iBR1024[759]=_iP1024[957]; 
        iBR1024[760]=_iP1024[125]; 
        iBR1024[761]=_iP1024[637]; 
        iBR1024[762]=_iP1024[381]; 
        iBR1024[763]=_iP1024[893]; 
        iBR1024[764]=_iP1024[253]; 
        iBR1024[765]=_iP1024[765]; 
        iBR1024[766]=_iP1024[509]; 
        iBR1024[767]=_iP1024[1021]; 
        iBR1024[768]=_iP1024[3]; 
        iBR1024[769]=_iP1024[515]; 
        iBR1024[770]=_iP1024[259]; 
        iBR1024[771]=_iP1024[771]; 
        iBR1024[772]=_iP1024[131]; 
        iBR1024[773]=_iP1024[643]; 
        iBR1024[774]=_iP1024[387]; 
        iBR1024[775]=_iP1024[899]; 
        iBR1024[776]=_iP1024[67]; 
        iBR1024[777]=_iP1024[579]; 
        iBR1024[778]=_iP1024[323]; 
        iBR1024[779]=_iP1024[835]; 
        iBR1024[780]=_iP1024[195]; 
        iBR1024[781]=_iP1024[707]; 
        iBR1024[782]=_iP1024[451]; 
        iBR1024[783]=_iP1024[963]; 
        iBR1024[784]=_iP1024[35]; 
        iBR1024[785]=_iP1024[547]; 
        iBR1024[786]=_iP1024[291]; 
        iBR1024[787]=_iP1024[803]; 
        iBR1024[788]=_iP1024[163]; 
        iBR1024[789]=_iP1024[675]; 
        iBR1024[790]=_iP1024[419]; 
        iBR1024[791]=_iP1024[931]; 
        iBR1024[792]=_iP1024[99]; 
        iBR1024[793]=_iP1024[611]; 
        iBR1024[794]=_iP1024[355]; 
        iBR1024[795]=_iP1024[867]; 
        iBR1024[796]=_iP1024[227]; 
        iBR1024[797]=_iP1024[739]; 
        iBR1024[798]=_iP1024[483]; 
        iBR1024[799]=_iP1024[995]; 
        iBR1024[800]=_iP1024[19]; 
        iBR1024[801]=_iP1024[531]; 
        iBR1024[802]=_iP1024[275]; 
        iBR1024[803]=_iP1024[787]; 
        iBR1024[804]=_iP1024[147]; 
        iBR1024[805]=_iP1024[659]; 
        iBR1024[806]=_iP1024[403]; 
        iBR1024[807]=_iP1024[915]; 
        iBR1024[808]=_iP1024[83]; 
        iBR1024[809]=_iP1024[595]; 
        iBR1024[810]=_iP1024[339]; 
        iBR1024[811]=_iP1024[851]; 
        iBR1024[812]=_iP1024[211]; 
        iBR1024[813]=_iP1024[723]; 
        iBR1024[814]=_iP1024[467]; 
        iBR1024[815]=_iP1024[979]; 
        iBR1024[816]=_iP1024[51]; 
        iBR1024[817]=_iP1024[563]; 
        iBR1024[818]=_iP1024[307]; 
        iBR1024[819]=_iP1024[819]; 
        iBR1024[820]=_iP1024[179]; 
        iBR1024[821]=_iP1024[691]; 
        iBR1024[822]=_iP1024[435]; 
        iBR1024[823]=_iP1024[947]; 
        iBR1024[824]=_iP1024[115]; 
        iBR1024[825]=_iP1024[627]; 
        iBR1024[826]=_iP1024[371]; 
        iBR1024[827]=_iP1024[883]; 
        iBR1024[828]=_iP1024[243]; 
        iBR1024[829]=_iP1024[755]; 
        iBR1024[830]=_iP1024[499]; 
        iBR1024[831]=_iP1024[1011]; 
        iBR1024[832]=_iP1024[11]; 
        iBR1024[833]=_iP1024[523]; 
        iBR1024[834]=_iP1024[267]; 
        iBR1024[835]=_iP1024[779]; 
        iBR1024[836]=_iP1024[139]; 
        iBR1024[837]=_iP1024[651]; 
        iBR1024[838]=_iP1024[395]; 
        iBR1024[839]=_iP1024[907]; 
        iBR1024[840]=_iP1024[75]; 
        iBR1024[841]=_iP1024[587]; 
        iBR1024[842]=_iP1024[331]; 
        iBR1024[843]=_iP1024[843]; 
        iBR1024[844]=_iP1024[203]; 
        iBR1024[845]=_iP1024[715]; 
        iBR1024[846]=_iP1024[459]; 
        iBR1024[847]=_iP1024[971]; 
        iBR1024[848]=_iP1024[43]; 
        iBR1024[849]=_iP1024[555]; 
        iBR1024[850]=_iP1024[299]; 
        iBR1024[851]=_iP1024[811]; 
        iBR1024[852]=_iP1024[171]; 
        iBR1024[853]=_iP1024[683]; 
        iBR1024[854]=_iP1024[427]; 
        iBR1024[855]=_iP1024[939]; 
        iBR1024[856]=_iP1024[107]; 
        iBR1024[857]=_iP1024[619]; 
        iBR1024[858]=_iP1024[363]; 
        iBR1024[859]=_iP1024[875]; 
        iBR1024[860]=_iP1024[235]; 
        iBR1024[861]=_iP1024[747]; 
        iBR1024[862]=_iP1024[491]; 
        iBR1024[863]=_iP1024[1003]; 
        iBR1024[864]=_iP1024[27]; 
        iBR1024[865]=_iP1024[539]; 
        iBR1024[866]=_iP1024[283]; 
        iBR1024[867]=_iP1024[795]; 
        iBR1024[868]=_iP1024[155]; 
        iBR1024[869]=_iP1024[667]; 
        iBR1024[870]=_iP1024[411]; 
        iBR1024[871]=_iP1024[923]; 
        iBR1024[872]=_iP1024[91]; 
        iBR1024[873]=_iP1024[603]; 
        iBR1024[874]=_iP1024[347]; 
        iBR1024[875]=_iP1024[859]; 
        iBR1024[876]=_iP1024[219]; 
        iBR1024[877]=_iP1024[731]; 
        iBR1024[878]=_iP1024[475]; 
        iBR1024[879]=_iP1024[987]; 
        iBR1024[880]=_iP1024[59]; 
        iBR1024[881]=_iP1024[571]; 
        iBR1024[882]=_iP1024[315]; 
        iBR1024[883]=_iP1024[827]; 
        iBR1024[884]=_iP1024[187]; 
        iBR1024[885]=_iP1024[699]; 
        iBR1024[886]=_iP1024[443]; 
        iBR1024[887]=_iP1024[955]; 
        iBR1024[888]=_iP1024[123]; 
        iBR1024[889]=_iP1024[635]; 
        iBR1024[890]=_iP1024[379]; 
        iBR1024[891]=_iP1024[891]; 
        iBR1024[892]=_iP1024[251]; 
        iBR1024[893]=_iP1024[763]; 
        iBR1024[894]=_iP1024[507]; 
        iBR1024[895]=_iP1024[1019]; 
        iBR1024[896]=_iP1024[7]; 
        iBR1024[897]=_iP1024[519]; 
        iBR1024[898]=_iP1024[263]; 
        iBR1024[899]=_iP1024[775]; 
        iBR1024[900]=_iP1024[135]; 
        iBR1024[901]=_iP1024[647]; 
        iBR1024[902]=_iP1024[391]; 
        iBR1024[903]=_iP1024[903]; 
        iBR1024[904]=_iP1024[71]; 
        iBR1024[905]=_iP1024[583]; 
        iBR1024[906]=_iP1024[327]; 
        iBR1024[907]=_iP1024[839]; 
        iBR1024[908]=_iP1024[199]; 
        iBR1024[909]=_iP1024[711]; 
        iBR1024[910]=_iP1024[455]; 
        iBR1024[911]=_iP1024[967]; 
        iBR1024[912]=_iP1024[39]; 
        iBR1024[913]=_iP1024[551]; 
        iBR1024[914]=_iP1024[295]; 
        iBR1024[915]=_iP1024[807]; 
        iBR1024[916]=_iP1024[167]; 
        iBR1024[917]=_iP1024[679]; 
        iBR1024[918]=_iP1024[423]; 
        iBR1024[919]=_iP1024[935]; 
        iBR1024[920]=_iP1024[103]; 
        iBR1024[921]=_iP1024[615]; 
        iBR1024[922]=_iP1024[359]; 
        iBR1024[923]=_iP1024[871]; 
        iBR1024[924]=_iP1024[231]; 
        iBR1024[925]=_iP1024[743]; 
        iBR1024[926]=_iP1024[487]; 
        iBR1024[927]=_iP1024[999]; 
        iBR1024[928]=_iP1024[23]; 
        iBR1024[929]=_iP1024[535]; 
        iBR1024[930]=_iP1024[279]; 
        iBR1024[931]=_iP1024[791]; 
        iBR1024[932]=_iP1024[151]; 
        iBR1024[933]=_iP1024[663]; 
        iBR1024[934]=_iP1024[407]; 
        iBR1024[935]=_iP1024[919]; 
        iBR1024[936]=_iP1024[87]; 
        iBR1024[937]=_iP1024[599]; 
        iBR1024[938]=_iP1024[343]; 
        iBR1024[939]=_iP1024[855]; 
        iBR1024[940]=_iP1024[215]; 
        iBR1024[941]=_iP1024[727]; 
        iBR1024[942]=_iP1024[471]; 
        iBR1024[943]=_iP1024[983]; 
        iBR1024[944]=_iP1024[55]; 
        iBR1024[945]=_iP1024[567]; 
        iBR1024[946]=_iP1024[311]; 
        iBR1024[947]=_iP1024[823]; 
        iBR1024[948]=_iP1024[183]; 
        iBR1024[949]=_iP1024[695]; 
        iBR1024[950]=_iP1024[439]; 
        iBR1024[951]=_iP1024[951]; 
        iBR1024[952]=_iP1024[119]; 
        iBR1024[953]=_iP1024[631]; 
        iBR1024[954]=_iP1024[375]; 
        iBR1024[955]=_iP1024[887]; 
        iBR1024[956]=_iP1024[247]; 
        iBR1024[957]=_iP1024[759]; 
        iBR1024[958]=_iP1024[503]; 
        iBR1024[959]=_iP1024[1015]; 
        iBR1024[960]=_iP1024[15]; 
        iBR1024[961]=_iP1024[527]; 
        iBR1024[962]=_iP1024[271]; 
        iBR1024[963]=_iP1024[783]; 
        iBR1024[964]=_iP1024[143]; 
        iBR1024[965]=_iP1024[655]; 
        iBR1024[966]=_iP1024[399]; 
        iBR1024[967]=_iP1024[911]; 
        iBR1024[968]=_iP1024[79]; 
        iBR1024[969]=_iP1024[591]; 
        iBR1024[970]=_iP1024[335]; 
        iBR1024[971]=_iP1024[847]; 
        iBR1024[972]=_iP1024[207]; 
        iBR1024[973]=_iP1024[719]; 
        iBR1024[974]=_iP1024[463]; 
        iBR1024[975]=_iP1024[975]; 
        iBR1024[976]=_iP1024[47]; 
        iBR1024[977]=_iP1024[559]; 
        iBR1024[978]=_iP1024[303]; 
        iBR1024[979]=_iP1024[815]; 
        iBR1024[980]=_iP1024[175]; 
        iBR1024[981]=_iP1024[687]; 
        iBR1024[982]=_iP1024[431]; 
        iBR1024[983]=_iP1024[943]; 
        iBR1024[984]=_iP1024[111]; 
        iBR1024[985]=_iP1024[623]; 
        iBR1024[986]=_iP1024[367]; 
        iBR1024[987]=_iP1024[879]; 
        iBR1024[988]=_iP1024[239]; 
        iBR1024[989]=_iP1024[751]; 
        iBR1024[990]=_iP1024[495]; 
        iBR1024[991]=_iP1024[1007]; 
        iBR1024[992]=_iP1024[31]; 
        iBR1024[993]=_iP1024[543]; 
        iBR1024[994]=_iP1024[287]; 
        iBR1024[995]=_iP1024[799]; 
        iBR1024[996]=_iP1024[159]; 
        iBR1024[997]=_iP1024[671]; 
        iBR1024[998]=_iP1024[415]; 
        iBR1024[999]=_iP1024[927]; 
        iBR1024[1000]=_iP1024[95]; 
        iBR1024[1001]=_iP1024[607]; 
        iBR1024[1002]=_iP1024[351]; 
        iBR1024[1003]=_iP1024[863]; 
        iBR1024[1004]=_iP1024[223]; 
        iBR1024[1005]=_iP1024[735]; 
        iBR1024[1006]=_iP1024[479]; 
        iBR1024[1007]=_iP1024[991]; 
        iBR1024[1008]=_iP1024[63]; 
        iBR1024[1009]=_iP1024[575]; 
        iBR1024[1010]=_iP1024[319]; 
        iBR1024[1011]=_iP1024[831]; 
        iBR1024[1012]=_iP1024[191]; 
        iBR1024[1013]=_iP1024[703]; 
        iBR1024[1014]=_iP1024[447]; 
        iBR1024[1015]=_iP1024[959]; 
        iBR1024[1016]=_iP1024[127]; 
        iBR1024[1017]=_iP1024[639]; 
        iBR1024[1018]=_iP1024[383]; 
        iBR1024[1019]=_iP1024[895]; 
        iBR1024[1020]=_iP1024[255]; 
        iBR1024[1021]=_iP1024[767]; 
        iBR1024[1022]=_iP1024[511]; 
        iBR1024[1023]=_iP1024[1023]; 
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 4 - FFT step for SIZE 2/4 
    ////////////////////////////////////////////////

    for (let idx = 0, out_idx = 0; idx < 1024; idx += 4, out_idx += 8) {
        let x0aRe = iBR1024[idx    ];
        let x1aRe = iBR1024[idx + 1];
        let x2aRe = iBR1024[idx + 2];
        let x3aRe = iBR1024[idx + 3];

        let sum1  =   x0aRe + x1aRe;
        let sum2  =   x2aRe + x3aRe;
        let diff1 =   x0aRe - x1aRe;
        let diff2 =   x3aRe - x2aRe;

        out1024[out_idx]     = sum1 + sum2;
        out1024[out_idx + 1] = 0.0;
        out1024[out_idx + 2] = diff1;
        out1024[out_idx + 3] = diff2;
        out1024[out_idx + 4] = sum1 - sum2;
        out1024[out_idx + 5] = 0.0;
        out1024[out_idx + 6] = diff1;
        out1024[out_idx + 7] = -diff2;
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 4 - FFT step for SIZE 8/16 
    ////////////////////////////////////////////////

    for (let idx = 0; idx < 2048; idx += 32) {
        let xA0re  = out128[0   + idx];
        let xA1re  = out128[2   + idx];
        let xA1im  = out128[3   + idx];
        let xA2re  = out128[4   + idx];

        let xA4re  = out128[8   + idx];
        out128[8  + idx]  =     xA0re - xA4re;
        let xA5re  = out128[10  + idx];
        let xA5im  = out128[11  + idx];
        let xA6re  = out128[12  + idx];

        let xA8re  = out128[16  + idx]; 
        let xA9re  = out128[18  + idx]; 
        let xA9im  = out128[19  + idx]; 
        let xA10re = out128[20  + idx]; 

        let xA12re = out128[24  + idx]; 
        out128[24  + idx] =     xA0re - xA4re;
        out128[25  + idx] =     xA8re - xA12re;
        out128[9  + idx]  =   - xA8re + xA12re;
        out128[0  + idx]  = xA0re + xA4re + (xA8re + xA12re);
        out128[1  + idx]  = 0;
        out128[16  + idx] = xA0re + xA4re - (xA8re + xA12re);
        out128[17  + idx] = 0;
        let xA13re = out128[26  + idx]; 
        let xA13im = out128[27  + idx]; 
        let xA14re = out128[28  + idx]; 


        let tRe = 0.7071067690849304;  //FFT_FAC_8[2];
        let x1re  =  xA1re + (xA5re  *  tRe + xA5im  *  tRe);    
        let x1im  =  xA1im + (xA5re  * -tRe + xA5im  *  tRe);
        let x9re  =  xA9re + (xA13re *  tRe - xA13im * -tRe); 
        let x9im  =  xA9im + (xA13re * -tRe + xA13im *  tRe);

        let t1re  = 0.9238795042037964; //FFT_FAC_16[2];
        let t3re  = 0.3826834261417389; //FFT_FAC_16[6];
        let res3  =  x1im + (x9re * -t3re  + x9im *  t1re);
        out128[31  + idx] = -res3;
        let res2  =  x1re + (x9re *  t1re  - x9im * -t3re);
        out128[30  + idx] =  res2;
        let res19 =  x1im - (x9re * -t3re  + x9im *  t1re);
        out128[19  + idx] =  res19;
        let res18 =  x1re - (x9re *  t1re  - x9im * -t3re);
        out128[18  + idx] =  res18;

        out128[15  + idx] = -res19;
        out128[14  + idx] =  res18;
        out128[3   + idx]  =  res3;
        out128[2   + idx]  =  res2;

         
        let res4  = xA2re + (xA10re *  tRe + xA14re * -tRe);
        out128[4   + idx]  =  res4;
        let res5  =-xA6re + (xA10re * -tRe - xA14re *  tRe);
        out128[5   + idx]  =  res5;
        let res20 = xA2re - (xA10re *  tRe + xA14re * -tRe);
        out128[12  + idx] =  res20;
        let res21 =-xA6re - (xA10re * -tRe - xA14re *  tRe);
        out128[13  + idx] = -res21;

        out128[20  + idx] =  res20;
        out128[21  + idx] =  res21;
        out128[28  + idx] =  res4;
        out128[29  + idx] = -res5;


        let x3re  =  xA1re - (xA5re  *  tRe + xA5im  *  tRe);    
        let x3im  = -xA1im + (xA5re  * -tRe + xA5im  *  tRe);
        let x11re =  xA9re + (xA13re * -tRe - xA13im *  tRe); 
        let x11im = -xA9im + (xA13re * -tRe + xA13im *  tRe);


        let res7  = x3im + (x11re * -t1re + x11im *  t3re);
        out128[27  + idx] = -res7;
        let res6  = x3re + (x11re *  t3re - x11im * -t1re);
        out128[26  + idx] =  res6;
        let res23 = x3im - (x11re * -t1re + x11im *  t3re);
        out128[23  + idx] =  res23;
        let res22 = x3re - (x11re *  t3re - x11im * -t1re);
        out128[22  + idx] =  res22;

        out128[11  + idx] = -res23;
        out128[10  + idx] =  res22;
        out128[6   + idx]  =  res6;
        out128[7   + idx]  =  res7;
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 32 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 16; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 32 + j;
         let oI = 32 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 64 + j;
         let oI = 64 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 96 + j;
         let oI = 96 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 160 + j;
         let oI = 160 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 192 + j;
         let oI = 192 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 224 + j;
         let oI = 224 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 288 + j;
         let oI = 288 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 320 + j;
         let oI = 320 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 352 + j;
         let oI = 352 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 384 + j;
         let oI = 384 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 416 + j;
         let oI = 416 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 448 + j;
         let oI = 448 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 480 + j;
         let oI = 480 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 512 + j;
         let oI = 512 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 544 + j;
         let oI = 544 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 576 + j;
         let oI = 576 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 608 + j;
         let oI = 608 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 640 + j;
         let oI = 640 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 672 + j;
         let oI = 672 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 704 + j;
         let oI = 704 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 736 + j;
         let oI = 736 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 768 + j;
         let oI = 768 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 800 + j;
         let oI = 800 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 832 + j;
         let oI = 832 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 864 + j;
         let oI = 864 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 896 + j;
         let oI = 896 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 928 + j;
         let oI = 928 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 960 + j;
         let oI = 960 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 992 + j;
         let oI = 992 + j + 16;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 64 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 32; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 64 + j;
         let oI = 64 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 192 + j;
         let oI = 192 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 320 + j;
         let oI = 320 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 384 + j;
         let oI = 384 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 448 + j;
         let oI = 448 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 512 + j;
         let oI = 512 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 576 + j;
         let oI = 576 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 640 + j;
         let oI = 640 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 704 + j;
         let oI = 704 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 768 + j;
         let oI = 768 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 832 + j;
         let oI = 832 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 896 + j;
         let oI = 896 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 960 + j;
         let oI = 960 + j + 32;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 128 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 64; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 64;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 64;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 64;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 384 + j;
         let oI = 384 + j + 64;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 512 + j;
         let oI = 512 + j + 64;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 640 + j;
         let oI = 640 + j + 64;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 768 + j;
         let oI = 768 + j + 64;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 896 + j;
         let oI = 896 + j + 64;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 256 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 128; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 128;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_256[j * 2 + 0];
         let tIm  = FFT_FAC_256[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 128; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 128;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_256[j * 2 + 0];
         let tIm  = FFT_FAC_256[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 128; j++) { 
         let eI = 512 + j;
         let oI = 512 + j + 128;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_256[j * 2 + 0];
         let tIm  = FFT_FAC_256[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 128; j++) { 
         let eI = 768 + j;
         let oI = 768 + j + 128;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_256[j * 2 + 0];
         let tIm  = FFT_FAC_256[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 512 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 256; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 256;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 256; j++) { 
         let eI = 512 + j;
         let oI = 512 + j + 256;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 1024 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 512; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 512;
         let eRe  = out1024[eI * 2    ];
         let eIm  = out1024[eI * 2 + 1];
         let oRe  = out1024[oI * 2    ];
         let oIm  = out1024[oI * 2 + 1];
         let tRe  = FFT_FAC_1024[j * 2 + 0];
         let tIm  = FFT_FAC_1024[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out1024[eI * 2    ] = eRe + t_oRe;
         out1024[eI * 2 + 1] = eIm + t_oIm;
         out1024[oI * 2    ] = eRe - t_oRe;
         out1024[oI * 2 + 1] = eIm - t_oIm;
     }
    } 

    return out1024;
} 

export {fftReal1024}; 
