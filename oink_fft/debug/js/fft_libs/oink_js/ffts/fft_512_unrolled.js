let FFT_FAC_512 = new Float32Array([
1.0000000000000000,0.0000000000000000,0.9999247193336487,0.0122715383768082,0.9996988177299500,0.0245412290096283,0.9993223547935486,0.0368072241544724,
0.9987954497337341,0.0490676760673523,0.9981181025505066,0.0613207370042801,0.9972904324531555,0.0735645666718483,0.9963126182556152,0.0857973098754883,
0.9951847195625305,0.0980171412229538,0.9939069747924805,0.1102222055196762,0.9924795627593994,0.1224106699228287,0.9909026622772217,0.1345807015895844,
0.9891765117645264,0.1467304676771164,0.9873014092445374,0.1588581502437592,0.9852776527404785,0.1709618866443634,0.9831054806709290,0.1830398887395859,
0.9807852506637573,0.1950903236865997,0.9783173799514771,0.2071113735437393,0.9757021069526672,0.2191012352705002,0.9729399681091309,0.2310581207275391,
0.9700312614440918,0.2429801821708679,0.9669764637947083,0.2548656463623047,0.9637760519981384,0.2667127549648285,0.9604305028915405,0.2785196900367737,
0.9569403529167175,0.2902846634387970,0.9533060193061829,0.3020059466362000,0.9495281577110291,0.3136817514896393,0.9456073045730591,0.3253102898597717,
0.9415440559387207,0.3368898332118988,0.9373390078544617,0.3484186828136444,0.9329928159713745,0.3598950505256653,0.9285060763359070,0.3713172078132629,
0.9238795042037964,0.3826834559440613,0.9191138744354248,0.3939920365810394,0.9142097830772400,0.4052413105964661,0.9091680049896240,0.4164295494556427,
0.9039893150329590,0.4275550842285156,0.8986744880676270,0.4386162459850311,0.8932242989540100,0.4496113359928131,0.8876396417617798,0.4605386853218079,
0.8819212913513184,0.4713967144489288,0.8760700821876526,0.4821837544441223,0.8700870275497437,0.4928981661796570,0.8639728426933289,0.5035383701324463,
0.8577286005020142,0.5141027569770813,0.8513551950454712,0.5245897173881531,0.8448535799980164,0.5349976420402527,0.8382247090339661,0.5453249812126160,
0.8314695954322815,0.5555702447891235,0.8245893120765686,0.5657317638397217,0.8175848126411438,0.5758082270622253,0.8104572296142578,0.5857978463172913,
0.8032075166702271,0.5956993103027344,0.7958369255065918,0.6055110096931458,0.7883464694023132,0.6152315735816956,0.7807372212409973,0.6248595118522644,
0.7730104923248291,0.6343932747840881,0.7651672363281250,0.6438315510749817,0.7572088241577148,0.6531728506088257,0.7491363883018494,0.6624158024787903,
0.7409511208534241,0.6715589761734009,0.7326542735099792,0.6806010007858276,0.7242470979690552,0.6895405650138855,0.7157308459281921,0.6983762383460999,
0.7071067690849304,0.7071067690849304,0.6983762383460999,0.7157308459281921,0.6895405650138855,0.7242470383644104,0.6806010007858276,0.7326542735099792,
0.6715589761734009,0.7409511208534241,0.6624157428741455,0.7491363883018494,0.6531728506088257,0.7572088241577148,0.6438315510749817,0.7651672959327698,
0.6343932747840881,0.7730104327201843,0.6248595118522644,0.7807372212409973,0.6152315735816956,0.7883464097976685,0.6055110692977905,0.7958369255065918,
0.5956993103027344,0.8032075166702271,0.5857978463172913,0.8104571700096130,0.5758082270622253,0.8175848126411438,0.5657318234443665,0.8245893120765686,
0.5555702447891235,0.8314695954322815,0.5453249812126160,0.8382247090339661,0.5349976420402527,0.8448535799980164,0.5245896577835083,0.8513551950454712,
0.5141028165817261,0.8577286005020142,0.5035384297370911,0.8639728426933289,0.4928981959819794,0.8700869679450989,0.4821837246417999,0.8760701417922974,
0.4713967740535736,0.8819212317466736,0.4605387151241302,0.8876396417617798,0.4496113061904907,0.8932242989540100,0.4386162757873535,0.8986744284629822,
0.4275551140308380,0.9039893150329590,0.4164295494556427,0.9091680049896240,0.4052412807941437,0.9142097830772400,0.3939920663833618,0.9191138148307800,
0.3826834261417389,0.9238795042037964,0.3713171482086182,0.9285060763359070,0.3598950803279877,0.9329927563667297,0.3484186828136444,0.9373390078544617,
0.3368898332118988,0.9415440559387207,0.3253102302551270,0.9456073641777039,0.3136817514896393,0.9495281577110291,0.3020059466362000,0.9533060193061829,
0.2902846336364746,0.9569403529167175,0.2785197198390961,0.9604305028915405,0.2667127549648285,0.9637760519981384,0.2548656463623047,0.9669764637947083,
0.2429802417755127,0.9700312614440918,0.2310581356287003,0.9729399681091309,0.2191012203693390,0.9757021069526672,0.2071113288402557,0.9783173799514771,
0.1950903534889221,0.9807852506637573,0.1830398887395859,0.9831054806709290,0.1709618568420410,0.9852776527404785,0.1588581949472427,0.9873014092445374,
0.1467304974794388,0.9891765117645264,0.1345806866884232,0.9909026622772217,0.1224106252193451,0.9924795627593994,0.1102222353219986,0.9939069747924805,
0.0980171337723732,0.9951847195625305,0.0857972726225853,0.9963126182556152,0.0735646113753319,0.9972904324531555,0.0613207481801510,0.9981181025505066,
0.0490676499903202,0.9987954497337341,0.0368071645498276,0.9993224143981934,0.0245412550866604,0.9996988177299500,0.0122715290635824,0.9999247193336487,
-0.0000000437113883,1.0000000000000000,-0.0122714973986149,0.9999247193336487,-0.0245412234216928,0.9996988177299500,-0.0368072502315044,0.9993223547935486,
-0.0490676201879978,0.9987954497337341,-0.0613207146525383,0.9981181025505066,-0.0735645741224289,0.9972904324531555,-0.0857973620295525,0.9963126182556152,
-0.0980171039700508,0.9951847195625305,-0.1102222055196762,0.9939069747924805,-0.1224107071757317,0.9924795031547546,-0.1345806568861008,0.9909026622772217,
-0.1467304527759552,0.9891765117645264,-0.1588581651449203,0.9873014092445374,-0.1709619462490082,0.9852776527404785,-0.1830398589372635,0.9831054806709290,
-0.1950903236865997,0.9807852506637573,-0.2071114182472229,0.9783173799514771,-0.2191011905670166,0.9757021665573120,-0.2310580909252167,0.9729399681091309,
-0.2429801970720291,0.9700312614440918,-0.2548657059669495,0.9669764637947083,-0.2667127251625061,0.9637760519981384,-0.2785196900367737,0.9604305028915405,
-0.2902847230434418,0.9569402933120728,-0.3020059168338776,0.9533060789108276,-0.3136817216873169,0.9495281577110291,-0.3253103196620941,0.9456073045730591,
-0.3368898034095764,0.9415440559387207,-0.3484186530113220,0.9373390078544617,-0.3598950505256653,0.9329928159713745,-0.3713172376155853,0.9285060763359070,
-0.3826833963394165,0.9238795638084412,-0.3939920365810394,0.9191138744354248,-0.4052413403987885,0.9142097234725952,-0.4164295196533203,0.9091680049896240,
-0.4275550842285156,0.9039893150329590,-0.4386162459850311,0.8986744284629822,-0.4496113657951355,0.8932242989540100,-0.4605388045310974,0.8876395821571350,
-0.4713966250419617,0.8819212913513184,-0.4821836948394775,0.8760701417922974,-0.4928981661796570,0.8700870275497437,-0.5035383701324463,0.8639728426933289,
-0.5141027569770813,0.8577286005020142,-0.5245897173881531,0.8513551354408264,-0.5349977016448975,0.8448535203933716,-0.5453249216079712,0.8382247686386108,
-0.5555701851844788,0.8314696550369263,-0.5657317638397217,0.8245893120765686,-0.5758081674575806,0.8175848126411438,-0.5857979059219360,0.8104571700096130,
-0.5956993699073792,0.8032075166702271,-0.6055111289024353,0.7958368659019470,-0.6152315139770508,0.7883464694023132,-0.6248594522476196,0.7807372808456421,
-0.6343932747840881,0.7730104923248291,-0.6438315510749817,0.7651672363281250,-0.6531728506088257,0.7572088241577148,-0.6624158024787903,0.7491363286972046,
-0.6715590357780457,0.7409510612487793,-0.6806009411811829,0.7326543331146240,-0.6895405054092407,0.7242470979690552,-0.6983762383460999,0.7157308459281921,
-0.7071067690849304,0.7071067690849304,-0.7157308459281921,0.6983762383460999,-0.7242471575737000,0.6895405054092407,-0.7326543331146240,0.6806009411811829,
-0.7409510612487793,0.6715590357780457,-0.7491363286972046,0.6624158024787903,-0.7572088241577148,0.6531728506088257,-0.7651672959327698,0.6438315510749817,
-0.7730104923248291,0.6343932747840881,-0.7807372808456421,0.6248594522476196,-0.7883464694023132,0.6152315139770508,-0.7958368659019470,0.6055111289024353,
-0.8032075166702271,0.5956993699073792,-0.8104571700096130,0.5857978463172913,-0.8175848126411438,0.5758081674575806,-0.8245893120765686,0.5657317638397217,
-0.8314696550369263,0.5555701851844788,-0.8382246494293213,0.5453251004219055,-0.8448535203933716,0.5349977016448975,-0.8513551950454712,0.5245897173881531,
-0.8577286005020142,0.5141027569770813,-0.8639728426933289,0.5035383701324463,-0.8700870275497437,0.4928981363773346,-0.8760701417922974,0.4821836948394775,
-0.8819212317466736,0.4713968336582184,-0.8876395821571350,0.4605387747287750,-0.8932242989540100,0.4496113657951355,-0.8986744880676270,0.4386162459850311,
-0.9039893150329590,0.4275550544261932,-0.9091680049896240,0.4164294898509979,-0.9142097830772400,0.4052412211894989,-0.9191138148307800,0.3939921259880066,
-0.9238795042037964,0.3826834857463837,-0.9285060763359070,0.3713172376155853,-0.9329928159713745,0.3598950505256653,-0.9373390078544617,0.3484186530113220,
-0.9415441155433655,0.3368898034095764,-0.9456073641777039,0.3253102004528046,-0.9495281577110291,0.3136818408966064,-0.9533060193061829,0.3020060062408447,
-0.9569403529167175,0.2902847230434418,-0.9604305028915405,0.2785196900367737,-0.9637760519981384,0.2667127251625061,-0.9669764637947083,0.2548655867576599,
-0.9700312614440918,0.2429800778627396,-0.9729399085044861,0.2310581952333450,-0.9757021069526672,0.2191012948751450,-0.9783173799514771,0.2071114033460617,
-0.9807853102684021,0.1950903087854385,-0.9831054806709290,0.1830398440361023,-0.9852776527404785,0.1709618121385574,-0.9873014092445374,0.1588580310344696,
-0.9891765117645264,0.1467305719852448,-0.9909026026725769,0.1345807611942291,-0.9924795031547546,0.1224106997251511,-0.9939069747924805,0.1102221980690956,
-0.9951847195625305,0.0980170965194702,-0.9963126182556152,0.0857972279191017,-0.9972904920578003,0.0735644474625587,-0.9981181025505066,0.0613208226859570,
-0.9987954497337341,0.0490677244961262,-0.9993223547935486,0.0368072390556335,-0.9996988177299500,0.0245412103831768,-0.9999247193336487,0.0122714852914214
]);


let iBR512 = new Float32Array(512);
let iP512  = new Float32Array(512);
let _iP512 = new Float32Array(512);
let out512 = new Float32Array(1024);

function fftReal512(realInput) { 
    let size = realInput.length;
    if (size != 512) {
        for (let i = 0; i < 512; i++) {
            iP512[i] = (i < size) ? realInput[i] : 0.0;
        }
        _iP512 = iP512;
    } else {
        _iP512 = realInput;
    }


    //Bit Reversal
    {
        iBR512[0]=_iP512[0]; 
        iBR512[1]=_iP512[256]; 
        iBR512[2]=_iP512[128]; 
        iBR512[3]=_iP512[384]; 
        iBR512[4]=_iP512[64]; 
        iBR512[5]=_iP512[320]; 
        iBR512[6]=_iP512[192]; 
        iBR512[7]=_iP512[448]; 
        iBR512[8]=_iP512[32]; 
        iBR512[9]=_iP512[288]; 
        iBR512[10]=_iP512[160]; 
        iBR512[11]=_iP512[416]; 
        iBR512[12]=_iP512[96]; 
        iBR512[13]=_iP512[352]; 
        iBR512[14]=_iP512[224]; 
        iBR512[15]=_iP512[480]; 
        iBR512[16]=_iP512[16]; 
        iBR512[17]=_iP512[272]; 
        iBR512[18]=_iP512[144]; 
        iBR512[19]=_iP512[400]; 
        iBR512[20]=_iP512[80]; 
        iBR512[21]=_iP512[336]; 
        iBR512[22]=_iP512[208]; 
        iBR512[23]=_iP512[464]; 
        iBR512[24]=_iP512[48]; 
        iBR512[25]=_iP512[304]; 
        iBR512[26]=_iP512[176]; 
        iBR512[27]=_iP512[432]; 
        iBR512[28]=_iP512[112]; 
        iBR512[29]=_iP512[368]; 
        iBR512[30]=_iP512[240]; 
        iBR512[31]=_iP512[496]; 
        iBR512[32]=_iP512[8]; 
        iBR512[33]=_iP512[264]; 
        iBR512[34]=_iP512[136]; 
        iBR512[35]=_iP512[392]; 
        iBR512[36]=_iP512[72]; 
        iBR512[37]=_iP512[328]; 
        iBR512[38]=_iP512[200]; 
        iBR512[39]=_iP512[456]; 
        iBR512[40]=_iP512[40]; 
        iBR512[41]=_iP512[296]; 
        iBR512[42]=_iP512[168]; 
        iBR512[43]=_iP512[424]; 
        iBR512[44]=_iP512[104]; 
        iBR512[45]=_iP512[360]; 
        iBR512[46]=_iP512[232]; 
        iBR512[47]=_iP512[488]; 
        iBR512[48]=_iP512[24]; 
        iBR512[49]=_iP512[280]; 
        iBR512[50]=_iP512[152]; 
        iBR512[51]=_iP512[408]; 
        iBR512[52]=_iP512[88]; 
        iBR512[53]=_iP512[344]; 
        iBR512[54]=_iP512[216]; 
        iBR512[55]=_iP512[472]; 
        iBR512[56]=_iP512[56]; 
        iBR512[57]=_iP512[312]; 
        iBR512[58]=_iP512[184]; 
        iBR512[59]=_iP512[440]; 
        iBR512[60]=_iP512[120]; 
        iBR512[61]=_iP512[376]; 
        iBR512[62]=_iP512[248]; 
        iBR512[63]=_iP512[504]; 
        iBR512[64]=_iP512[4]; 
        iBR512[65]=_iP512[260]; 
        iBR512[66]=_iP512[132]; 
        iBR512[67]=_iP512[388]; 
        iBR512[68]=_iP512[68]; 
        iBR512[69]=_iP512[324]; 
        iBR512[70]=_iP512[196]; 
        iBR512[71]=_iP512[452]; 
        iBR512[72]=_iP512[36]; 
        iBR512[73]=_iP512[292]; 
        iBR512[74]=_iP512[164]; 
        iBR512[75]=_iP512[420]; 
        iBR512[76]=_iP512[100]; 
        iBR512[77]=_iP512[356]; 
        iBR512[78]=_iP512[228]; 
        iBR512[79]=_iP512[484]; 
        iBR512[80]=_iP512[20]; 
        iBR512[81]=_iP512[276]; 
        iBR512[82]=_iP512[148]; 
        iBR512[83]=_iP512[404]; 
        iBR512[84]=_iP512[84]; 
        iBR512[85]=_iP512[340]; 
        iBR512[86]=_iP512[212]; 
        iBR512[87]=_iP512[468]; 
        iBR512[88]=_iP512[52]; 
        iBR512[89]=_iP512[308]; 
        iBR512[90]=_iP512[180]; 
        iBR512[91]=_iP512[436]; 
        iBR512[92]=_iP512[116]; 
        iBR512[93]=_iP512[372]; 
        iBR512[94]=_iP512[244]; 
        iBR512[95]=_iP512[500]; 
        iBR512[96]=_iP512[12]; 
        iBR512[97]=_iP512[268]; 
        iBR512[98]=_iP512[140]; 
        iBR512[99]=_iP512[396]; 
        iBR512[100]=_iP512[76]; 
        iBR512[101]=_iP512[332]; 
        iBR512[102]=_iP512[204]; 
        iBR512[103]=_iP512[460]; 
        iBR512[104]=_iP512[44]; 
        iBR512[105]=_iP512[300]; 
        iBR512[106]=_iP512[172]; 
        iBR512[107]=_iP512[428]; 
        iBR512[108]=_iP512[108]; 
        iBR512[109]=_iP512[364]; 
        iBR512[110]=_iP512[236]; 
        iBR512[111]=_iP512[492]; 
        iBR512[112]=_iP512[28]; 
        iBR512[113]=_iP512[284]; 
        iBR512[114]=_iP512[156]; 
        iBR512[115]=_iP512[412]; 
        iBR512[116]=_iP512[92]; 
        iBR512[117]=_iP512[348]; 
        iBR512[118]=_iP512[220]; 
        iBR512[119]=_iP512[476]; 
        iBR512[120]=_iP512[60]; 
        iBR512[121]=_iP512[316]; 
        iBR512[122]=_iP512[188]; 
        iBR512[123]=_iP512[444]; 
        iBR512[124]=_iP512[124]; 
        iBR512[125]=_iP512[380]; 
        iBR512[126]=_iP512[252]; 
        iBR512[127]=_iP512[508]; 
        iBR512[128]=_iP512[2]; 
        iBR512[129]=_iP512[258]; 
        iBR512[130]=_iP512[130]; 
        iBR512[131]=_iP512[386]; 
        iBR512[132]=_iP512[66]; 
        iBR512[133]=_iP512[322]; 
        iBR512[134]=_iP512[194]; 
        iBR512[135]=_iP512[450]; 
        iBR512[136]=_iP512[34]; 
        iBR512[137]=_iP512[290]; 
        iBR512[138]=_iP512[162]; 
        iBR512[139]=_iP512[418]; 
        iBR512[140]=_iP512[98]; 
        iBR512[141]=_iP512[354]; 
        iBR512[142]=_iP512[226]; 
        iBR512[143]=_iP512[482]; 
        iBR512[144]=_iP512[18]; 
        iBR512[145]=_iP512[274]; 
        iBR512[146]=_iP512[146]; 
        iBR512[147]=_iP512[402]; 
        iBR512[148]=_iP512[82]; 
        iBR512[149]=_iP512[338]; 
        iBR512[150]=_iP512[210]; 
        iBR512[151]=_iP512[466]; 
        iBR512[152]=_iP512[50]; 
        iBR512[153]=_iP512[306]; 
        iBR512[154]=_iP512[178]; 
        iBR512[155]=_iP512[434]; 
        iBR512[156]=_iP512[114]; 
        iBR512[157]=_iP512[370]; 
        iBR512[158]=_iP512[242]; 
        iBR512[159]=_iP512[498]; 
        iBR512[160]=_iP512[10]; 
        iBR512[161]=_iP512[266]; 
        iBR512[162]=_iP512[138]; 
        iBR512[163]=_iP512[394]; 
        iBR512[164]=_iP512[74]; 
        iBR512[165]=_iP512[330]; 
        iBR512[166]=_iP512[202]; 
        iBR512[167]=_iP512[458]; 
        iBR512[168]=_iP512[42]; 
        iBR512[169]=_iP512[298]; 
        iBR512[170]=_iP512[170]; 
        iBR512[171]=_iP512[426]; 
        iBR512[172]=_iP512[106]; 
        iBR512[173]=_iP512[362]; 
        iBR512[174]=_iP512[234]; 
        iBR512[175]=_iP512[490]; 
        iBR512[176]=_iP512[26]; 
        iBR512[177]=_iP512[282]; 
        iBR512[178]=_iP512[154]; 
        iBR512[179]=_iP512[410]; 
        iBR512[180]=_iP512[90]; 
        iBR512[181]=_iP512[346]; 
        iBR512[182]=_iP512[218]; 
        iBR512[183]=_iP512[474]; 
        iBR512[184]=_iP512[58]; 
        iBR512[185]=_iP512[314]; 
        iBR512[186]=_iP512[186]; 
        iBR512[187]=_iP512[442]; 
        iBR512[188]=_iP512[122]; 
        iBR512[189]=_iP512[378]; 
        iBR512[190]=_iP512[250]; 
        iBR512[191]=_iP512[506]; 
        iBR512[192]=_iP512[6]; 
        iBR512[193]=_iP512[262]; 
        iBR512[194]=_iP512[134]; 
        iBR512[195]=_iP512[390]; 
        iBR512[196]=_iP512[70]; 
        iBR512[197]=_iP512[326]; 
        iBR512[198]=_iP512[198]; 
        iBR512[199]=_iP512[454]; 
        iBR512[200]=_iP512[38]; 
        iBR512[201]=_iP512[294]; 
        iBR512[202]=_iP512[166]; 
        iBR512[203]=_iP512[422]; 
        iBR512[204]=_iP512[102]; 
        iBR512[205]=_iP512[358]; 
        iBR512[206]=_iP512[230]; 
        iBR512[207]=_iP512[486]; 
        iBR512[208]=_iP512[22]; 
        iBR512[209]=_iP512[278]; 
        iBR512[210]=_iP512[150]; 
        iBR512[211]=_iP512[406]; 
        iBR512[212]=_iP512[86]; 
        iBR512[213]=_iP512[342]; 
        iBR512[214]=_iP512[214]; 
        iBR512[215]=_iP512[470]; 
        iBR512[216]=_iP512[54]; 
        iBR512[217]=_iP512[310]; 
        iBR512[218]=_iP512[182]; 
        iBR512[219]=_iP512[438]; 
        iBR512[220]=_iP512[118]; 
        iBR512[221]=_iP512[374]; 
        iBR512[222]=_iP512[246]; 
        iBR512[223]=_iP512[502]; 
        iBR512[224]=_iP512[14]; 
        iBR512[225]=_iP512[270]; 
        iBR512[226]=_iP512[142]; 
        iBR512[227]=_iP512[398]; 
        iBR512[228]=_iP512[78]; 
        iBR512[229]=_iP512[334]; 
        iBR512[230]=_iP512[206]; 
        iBR512[231]=_iP512[462]; 
        iBR512[232]=_iP512[46]; 
        iBR512[233]=_iP512[302]; 
        iBR512[234]=_iP512[174]; 
        iBR512[235]=_iP512[430]; 
        iBR512[236]=_iP512[110]; 
        iBR512[237]=_iP512[366]; 
        iBR512[238]=_iP512[238]; 
        iBR512[239]=_iP512[494]; 
        iBR512[240]=_iP512[30]; 
        iBR512[241]=_iP512[286]; 
        iBR512[242]=_iP512[158]; 
        iBR512[243]=_iP512[414]; 
        iBR512[244]=_iP512[94]; 
        iBR512[245]=_iP512[350]; 
        iBR512[246]=_iP512[222]; 
        iBR512[247]=_iP512[478]; 
        iBR512[248]=_iP512[62]; 
        iBR512[249]=_iP512[318]; 
        iBR512[250]=_iP512[190]; 
        iBR512[251]=_iP512[446]; 
        iBR512[252]=_iP512[126]; 
        iBR512[253]=_iP512[382]; 
        iBR512[254]=_iP512[254]; 
        iBR512[255]=_iP512[510]; 
        iBR512[256]=_iP512[1]; 
        iBR512[257]=_iP512[257]; 
        iBR512[258]=_iP512[129]; 
        iBR512[259]=_iP512[385]; 
        iBR512[260]=_iP512[65]; 
        iBR512[261]=_iP512[321]; 
        iBR512[262]=_iP512[193]; 
        iBR512[263]=_iP512[449]; 
        iBR512[264]=_iP512[33]; 
        iBR512[265]=_iP512[289]; 
        iBR512[266]=_iP512[161]; 
        iBR512[267]=_iP512[417]; 
        iBR512[268]=_iP512[97]; 
        iBR512[269]=_iP512[353]; 
        iBR512[270]=_iP512[225]; 
        iBR512[271]=_iP512[481]; 
        iBR512[272]=_iP512[17]; 
        iBR512[273]=_iP512[273]; 
        iBR512[274]=_iP512[145]; 
        iBR512[275]=_iP512[401]; 
        iBR512[276]=_iP512[81]; 
        iBR512[277]=_iP512[337]; 
        iBR512[278]=_iP512[209]; 
        iBR512[279]=_iP512[465]; 
        iBR512[280]=_iP512[49]; 
        iBR512[281]=_iP512[305]; 
        iBR512[282]=_iP512[177]; 
        iBR512[283]=_iP512[433]; 
        iBR512[284]=_iP512[113]; 
        iBR512[285]=_iP512[369]; 
        iBR512[286]=_iP512[241]; 
        iBR512[287]=_iP512[497]; 
        iBR512[288]=_iP512[9]; 
        iBR512[289]=_iP512[265]; 
        iBR512[290]=_iP512[137]; 
        iBR512[291]=_iP512[393]; 
        iBR512[292]=_iP512[73]; 
        iBR512[293]=_iP512[329]; 
        iBR512[294]=_iP512[201]; 
        iBR512[295]=_iP512[457]; 
        iBR512[296]=_iP512[41]; 
        iBR512[297]=_iP512[297]; 
        iBR512[298]=_iP512[169]; 
        iBR512[299]=_iP512[425]; 
        iBR512[300]=_iP512[105]; 
        iBR512[301]=_iP512[361]; 
        iBR512[302]=_iP512[233]; 
        iBR512[303]=_iP512[489]; 
        iBR512[304]=_iP512[25]; 
        iBR512[305]=_iP512[281]; 
        iBR512[306]=_iP512[153]; 
        iBR512[307]=_iP512[409]; 
        iBR512[308]=_iP512[89]; 
        iBR512[309]=_iP512[345]; 
        iBR512[310]=_iP512[217]; 
        iBR512[311]=_iP512[473]; 
        iBR512[312]=_iP512[57]; 
        iBR512[313]=_iP512[313]; 
        iBR512[314]=_iP512[185]; 
        iBR512[315]=_iP512[441]; 
        iBR512[316]=_iP512[121]; 
        iBR512[317]=_iP512[377]; 
        iBR512[318]=_iP512[249]; 
        iBR512[319]=_iP512[505]; 
        iBR512[320]=_iP512[5]; 
        iBR512[321]=_iP512[261]; 
        iBR512[322]=_iP512[133]; 
        iBR512[323]=_iP512[389]; 
        iBR512[324]=_iP512[69]; 
        iBR512[325]=_iP512[325]; 
        iBR512[326]=_iP512[197]; 
        iBR512[327]=_iP512[453]; 
        iBR512[328]=_iP512[37]; 
        iBR512[329]=_iP512[293]; 
        iBR512[330]=_iP512[165]; 
        iBR512[331]=_iP512[421]; 
        iBR512[332]=_iP512[101]; 
        iBR512[333]=_iP512[357]; 
        iBR512[334]=_iP512[229]; 
        iBR512[335]=_iP512[485]; 
        iBR512[336]=_iP512[21]; 
        iBR512[337]=_iP512[277]; 
        iBR512[338]=_iP512[149]; 
        iBR512[339]=_iP512[405]; 
        iBR512[340]=_iP512[85]; 
        iBR512[341]=_iP512[341]; 
        iBR512[342]=_iP512[213]; 
        iBR512[343]=_iP512[469]; 
        iBR512[344]=_iP512[53]; 
        iBR512[345]=_iP512[309]; 
        iBR512[346]=_iP512[181]; 
        iBR512[347]=_iP512[437]; 
        iBR512[348]=_iP512[117]; 
        iBR512[349]=_iP512[373]; 
        iBR512[350]=_iP512[245]; 
        iBR512[351]=_iP512[501]; 
        iBR512[352]=_iP512[13]; 
        iBR512[353]=_iP512[269]; 
        iBR512[354]=_iP512[141]; 
        iBR512[355]=_iP512[397]; 
        iBR512[356]=_iP512[77]; 
        iBR512[357]=_iP512[333]; 
        iBR512[358]=_iP512[205]; 
        iBR512[359]=_iP512[461]; 
        iBR512[360]=_iP512[45]; 
        iBR512[361]=_iP512[301]; 
        iBR512[362]=_iP512[173]; 
        iBR512[363]=_iP512[429]; 
        iBR512[364]=_iP512[109]; 
        iBR512[365]=_iP512[365]; 
        iBR512[366]=_iP512[237]; 
        iBR512[367]=_iP512[493]; 
        iBR512[368]=_iP512[29]; 
        iBR512[369]=_iP512[285]; 
        iBR512[370]=_iP512[157]; 
        iBR512[371]=_iP512[413]; 
        iBR512[372]=_iP512[93]; 
        iBR512[373]=_iP512[349]; 
        iBR512[374]=_iP512[221]; 
        iBR512[375]=_iP512[477]; 
        iBR512[376]=_iP512[61]; 
        iBR512[377]=_iP512[317]; 
        iBR512[378]=_iP512[189]; 
        iBR512[379]=_iP512[445]; 
        iBR512[380]=_iP512[125]; 
        iBR512[381]=_iP512[381]; 
        iBR512[382]=_iP512[253]; 
        iBR512[383]=_iP512[509]; 
        iBR512[384]=_iP512[3]; 
        iBR512[385]=_iP512[259]; 
        iBR512[386]=_iP512[131]; 
        iBR512[387]=_iP512[387]; 
        iBR512[388]=_iP512[67]; 
        iBR512[389]=_iP512[323]; 
        iBR512[390]=_iP512[195]; 
        iBR512[391]=_iP512[451]; 
        iBR512[392]=_iP512[35]; 
        iBR512[393]=_iP512[291]; 
        iBR512[394]=_iP512[163]; 
        iBR512[395]=_iP512[419]; 
        iBR512[396]=_iP512[99]; 
        iBR512[397]=_iP512[355]; 
        iBR512[398]=_iP512[227]; 
        iBR512[399]=_iP512[483]; 
        iBR512[400]=_iP512[19]; 
        iBR512[401]=_iP512[275]; 
        iBR512[402]=_iP512[147]; 
        iBR512[403]=_iP512[403]; 
        iBR512[404]=_iP512[83]; 
        iBR512[405]=_iP512[339]; 
        iBR512[406]=_iP512[211]; 
        iBR512[407]=_iP512[467]; 
        iBR512[408]=_iP512[51]; 
        iBR512[409]=_iP512[307]; 
        iBR512[410]=_iP512[179]; 
        iBR512[411]=_iP512[435]; 
        iBR512[412]=_iP512[115]; 
        iBR512[413]=_iP512[371]; 
        iBR512[414]=_iP512[243]; 
        iBR512[415]=_iP512[499]; 
        iBR512[416]=_iP512[11]; 
        iBR512[417]=_iP512[267]; 
        iBR512[418]=_iP512[139]; 
        iBR512[419]=_iP512[395]; 
        iBR512[420]=_iP512[75]; 
        iBR512[421]=_iP512[331]; 
        iBR512[422]=_iP512[203]; 
        iBR512[423]=_iP512[459]; 
        iBR512[424]=_iP512[43]; 
        iBR512[425]=_iP512[299]; 
        iBR512[426]=_iP512[171]; 
        iBR512[427]=_iP512[427]; 
        iBR512[428]=_iP512[107]; 
        iBR512[429]=_iP512[363]; 
        iBR512[430]=_iP512[235]; 
        iBR512[431]=_iP512[491]; 
        iBR512[432]=_iP512[27]; 
        iBR512[433]=_iP512[283]; 
        iBR512[434]=_iP512[155]; 
        iBR512[435]=_iP512[411]; 
        iBR512[436]=_iP512[91]; 
        iBR512[437]=_iP512[347]; 
        iBR512[438]=_iP512[219]; 
        iBR512[439]=_iP512[475]; 
        iBR512[440]=_iP512[59]; 
        iBR512[441]=_iP512[315]; 
        iBR512[442]=_iP512[187]; 
        iBR512[443]=_iP512[443]; 
        iBR512[444]=_iP512[123]; 
        iBR512[445]=_iP512[379]; 
        iBR512[446]=_iP512[251]; 
        iBR512[447]=_iP512[507]; 
        iBR512[448]=_iP512[7]; 
        iBR512[449]=_iP512[263]; 
        iBR512[450]=_iP512[135]; 
        iBR512[451]=_iP512[391]; 
        iBR512[452]=_iP512[71]; 
        iBR512[453]=_iP512[327]; 
        iBR512[454]=_iP512[199]; 
        iBR512[455]=_iP512[455]; 
        iBR512[456]=_iP512[39]; 
        iBR512[457]=_iP512[295]; 
        iBR512[458]=_iP512[167]; 
        iBR512[459]=_iP512[423]; 
        iBR512[460]=_iP512[103]; 
        iBR512[461]=_iP512[359]; 
        iBR512[462]=_iP512[231]; 
        iBR512[463]=_iP512[487]; 
        iBR512[464]=_iP512[23]; 
        iBR512[465]=_iP512[279]; 
        iBR512[466]=_iP512[151]; 
        iBR512[467]=_iP512[407]; 
        iBR512[468]=_iP512[87]; 
        iBR512[469]=_iP512[343]; 
        iBR512[470]=_iP512[215]; 
        iBR512[471]=_iP512[471]; 
        iBR512[472]=_iP512[55]; 
        iBR512[473]=_iP512[311]; 
        iBR512[474]=_iP512[183]; 
        iBR512[475]=_iP512[439]; 
        iBR512[476]=_iP512[119]; 
        iBR512[477]=_iP512[375]; 
        iBR512[478]=_iP512[247]; 
        iBR512[479]=_iP512[503]; 
        iBR512[480]=_iP512[15]; 
        iBR512[481]=_iP512[271]; 
        iBR512[482]=_iP512[143]; 
        iBR512[483]=_iP512[399]; 
        iBR512[484]=_iP512[79]; 
        iBR512[485]=_iP512[335]; 
        iBR512[486]=_iP512[207]; 
        iBR512[487]=_iP512[463]; 
        iBR512[488]=_iP512[47]; 
        iBR512[489]=_iP512[303]; 
        iBR512[490]=_iP512[175]; 
        iBR512[491]=_iP512[431]; 
        iBR512[492]=_iP512[111]; 
        iBR512[493]=_iP512[367]; 
        iBR512[494]=_iP512[239]; 
        iBR512[495]=_iP512[495]; 
        iBR512[496]=_iP512[31]; 
        iBR512[497]=_iP512[287]; 
        iBR512[498]=_iP512[159]; 
        iBR512[499]=_iP512[415]; 
        iBR512[500]=_iP512[95]; 
        iBR512[501]=_iP512[351]; 
        iBR512[502]=_iP512[223]; 
        iBR512[503]=_iP512[479]; 
        iBR512[504]=_iP512[63]; 
        iBR512[505]=_iP512[319]; 
        iBR512[506]=_iP512[191]; 
        iBR512[507]=_iP512[447]; 
        iBR512[508]=_iP512[127]; 
        iBR512[509]=_iP512[383]; 
        iBR512[510]=_iP512[255]; 
        iBR512[511]=_iP512[511]; 
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 4 - FFT step for SIZE 4/8 
    ////////////////////////////////////////////////

    for (let idx = 0, out_idx = 0; idx < 512; idx += 4, out_idx += 8) {
        let x0aRe = iBR512[idx    ];
        let x1aRe = iBR512[idx + 1];
        let x2aRe = iBR512[idx + 2];
        let x3aRe = iBR512[idx + 3];

        let sum1  = x0aRe + x1aRe;
        let sum2  = x2aRe + x3aRe;
        let diff1 = x0aRe - x1aRe;
        let diff2 = x2aRe - x3aRe;

        out512[out_idx]     = sum1 + sum2;
        out512[out_idx + 1] = 0.0;
        out512[out_idx + 2] = diff1;
        out512[out_idx + 3] = diff2;
        out512[out_idx + 4] = sum1 - sum2;
        out512[out_idx + 5] = 0.0;
        out512[out_idx + 6] = diff1;
        out512[out_idx + 7] = -diff2;
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 4 - FFT step for SIZE 16/32 
    ////////////////////////////////////////////////

    for (let idx = 0; idx < 1024; idx += 32) {
        let x0aRe = out512[idx     ];
        let x0bRe = out512[idx +  2];
        let x0bIm = out512[idx +  3];
        let x0cRe = out512[idx +  4];

        let x1aRe = out512[idx +  8];
        out512[idx +   8] = x0aRe - x1aRe;
        let x1bRe = out512[idx + 10];
        let x1bIm = out512[idx + 11];
        let x1cRe = out512[idx + 12];

        let x2aRe = out512[idx + 16];
        let x2bRe = out512[idx + 18];
        let x2bIm = out512[idx + 19];
        let x2cRe = out512[idx + 20];

        let x3aRe = out512[idx + 24];
        out512[idx +  24] = x0aRe - x1aRe;
        out512[idx +  25] = x3aRe - x2aRe;
        let x3bRe = out512[idx + 26];
        let x3bIm = out512[idx + 27];
        let x3cRe = out512[idx + 28];
        out512[idx      ] = x0aRe + x1aRe + x2aRe + x3aRe;
        out512[idx +   9] = x2aRe - x3aRe;
        out512[idx +  16] = x0aRe + x1aRe - x2aRe - x3aRe;

        let t1Re_2c = 0.7071067690849304;

        let x2cRe_tRe_2c = x2cRe * t1Re_2c;
        let x3cRe_tRe_2c = x3cRe * t1Re_2c;

        let resReC1 = x0cRe + x2cRe_tRe_2c - x3cRe_tRe_2c;
        out512[idx +  28] =   resReC1;
        out512[idx +   4] =   resReC1;
        let resImC1 = x1cRe + x2cRe_tRe_2c + x3cRe_tRe_2c;
        out512[idx +   5] =   resImC1;
        out512[idx +  29] = - resImC1;
        let resReC2 = x0cRe - x2cRe_tRe_2c + x3cRe_tRe_2c;
        out512[idx +  20] =   resReC2;
        out512[idx +  12] =   resReC2;
        let resImC2 = x1cRe - x2cRe_tRe_2c - x3cRe_tRe_2c;
        out512[idx +  13] = - resImC2;
        out512[idx +  21] =   resImC2;

        let x1dif = (x1bRe-x1bIm);
        let x1sum = (x1bRe+x1bIm);
        let x3dif = (x3bRe-x3bIm);
        let x3sum = (x3bRe+x3bIm);

        let t1Re_1b = 0.7071067690849304;

        let x1dif_tRe_1b = x1dif * t1Re_1b;
        let x1sum_tRe_1b = x1sum * t1Re_1b;

        let t1Re_1b2b = 0.6532814502716064;
        let t1Re_1b2d = 0.2705980539321899;

        let x3dif_tRe_1b2b = x3dif * t1Re_1b2b;
        let x3dif_tRe_1b2d = x3dif * t1Re_1b2d;
        let x3sum_tRe_1b2b = x3sum * t1Re_1b2b;
        let x3sum_tRe_1b2d = x3sum * t1Re_1b2d;

        let t1Re_2b = 0.9238795042037964;
        let t1Re_2d = 0.3826834261417389;

        let tempReB = (x3dif_tRe_1b2b - x3sum_tRe_1b2d + x2bRe*t1Re_2b - x2bIm*t1Re_2d);
        let tempImB = (x3dif_tRe_1b2d + x3sum_tRe_1b2b + x2bRe*t1Re_2d + x2bIm*t1Re_2b);
        let tempReD = (x3dif_tRe_1b2d + x3sum_tRe_1b2b - x2bRe*t1Re_2d - x2bIm*t1Re_2b);
        let tempImD = (x3dif_tRe_1b2b - x3sum_tRe_1b2d - x2bRe*t1Re_2b + x2bIm*t1Re_2d);

        let resReB1 = x0bRe  + x1dif_tRe_1b + tempReB;
        out512[idx +   2] =   resReB1;
        out512[idx +  30] =   resReB1;
        let resReB2 = x0bRe  + x1dif_tRe_1b - tempReB;
        out512[idx +  18] =   resReB2;
        out512[idx +  14] =   resReB2;
        let resReD1 = x0bRe  - x1dif_tRe_1b - tempReD;
        out512[idx +   6] =   resReD1;
        out512[idx +  26] =   resReD1;
        let resReD2 = x0bRe  - x1dif_tRe_1b + tempReD;
        out512[idx +  22] =   resReD2;
        out512[idx +  10] =   resReD2;

        let resImB1 = x0bIm  + x1sum_tRe_1b + tempImB;
        out512[idx +   3] =   resImB1;
        out512[idx +  31] = - resImB1;
        let resImB2 = x0bIm  + x1sum_tRe_1b - tempImB;
        out512[idx +  19] =   resImB2;
        out512[idx +  15] = - resImB2;
        let resImD1 =-x0bIm  + x1sum_tRe_1b - tempImD;
        out512[idx +   7] =   resImD1;
        out512[idx +  27] = - resImD1;
        let resImD2 =-x0bIm  + x1sum_tRe_1b + tempImD;
        out512[idx +  23] =   resImD2;
        out512[idx +  11] = - resImD2;
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (unrolled) - FFT step for SIZE 64 
    ////////////////////////////////////////////////
    { 
        let oRe0 = out512[64];
        let oIm0 = out512[65];
        let eRe0 = out512[0];
        let eIm0 = out512[1];
        let resRe0_s = eRe0 + oRe0;
        out512[0] = resRe0_s;
        let resIm0_s = eIm0 + oIm0;
        out512[1] = resIm0_s;
        let resRe0_d = eRe0 - oRe0;
        out512[64] = resRe0_d;
        let resIm0_d = eIm0 - oIm0;
        out512[65] = resIm0_d;
        
        let oRe1 = out512[66];
        let oIm1 = out512[67];
        let eRe1 = out512[2];
        let eIm1 = out512[3];
        let tRe1 = 0.9951847195625305;
        let tRe15 = 0.0980171337723732;
        let resIm1_s = eIm1 + (oRe1 * tRe15 + oIm1 * tRe1);
        out512[3] = resIm1_s;
        out512[127] = -resIm1_s;
        let resRe1_s = eRe1 + (oRe1 * tRe1 - oIm1 * tRe15);
        out512[126] = resRe1_s;
        out512[2] = resRe1_s;
        let resRe31_s = eRe1 - (oRe1 * tRe1 - oIm1 * tRe15);
        out512[66] = resRe31_s;
        out512[62] = resRe31_s;
        let resIm31_s = -eIm1 + (oRe1 * tRe15 + oIm1 * tRe1);
        out512[63] = resIm31_s;
        out512[67] = -resIm31_s;
        
        let oRe2 = out512[68];
        let oIm2 = out512[69];
        let eRe2 = out512[4];
        let eIm2 = out512[5];
        let tRe2 = 0.9807852506637573;
        let tRe14 = 0.1950903534889221;
        let resIm2_s = eIm2 + (oRe2 * tRe14 + oIm2 * tRe2);
        out512[5] = resIm2_s;
        out512[125] = -resIm2_s;
        let resRe2_s = eRe2 + (oRe2 * tRe2 - oIm2 * tRe14);
        out512[124] = resRe2_s;
        out512[4] = resRe2_s;
        let resRe30_s = eRe2 - (oRe2 * tRe2 - oIm2 * tRe14);
        out512[68] = resRe30_s;
        out512[60] = resRe30_s;
        let resIm30_s = -eIm2 + (oRe2 * tRe14 + oIm2 * tRe2);
        out512[61] = resIm30_s;
        out512[69] = -resIm30_s;
        
        let oRe3 = out512[70];
        let oIm3 = out512[71];
        let eRe3 = out512[6];
        let eIm3 = out512[7];
        let tRe3 = 0.9569403529167175;
        let tRe13 = 0.2902846336364746;
        let resIm3_s = eIm3 + (oRe3 * tRe13 + oIm3 * tRe3);
        out512[7] = resIm3_s;
        out512[123] = -resIm3_s;
        let resRe3_s = eRe3 + (oRe3 * tRe3 - oIm3 * tRe13);
        out512[122] = resRe3_s;
        out512[6] = resRe3_s;
        let resRe29_s = eRe3 - (oRe3 * tRe3 - oIm3 * tRe13);
        out512[70] = resRe29_s;
        out512[58] = resRe29_s;
        let resIm29_s = -eIm3 + (oRe3 * tRe13 + oIm3 * tRe3);
        out512[59] = resIm29_s;
        out512[71] = -resIm29_s;
        
        let oRe4 = out512[72];
        let oIm4 = out512[73];
        let eRe4 = out512[8];
        let eIm4 = out512[9];
        let tRe4 = 0.9238795042037964;
        let tRe12 = 0.3826834261417389;
        let resIm4_s = eIm4 + (oRe4 * tRe12 + oIm4 * tRe4);
        out512[9] = resIm4_s;
        out512[121] = -resIm4_s;
        let resRe4_s = eRe4 + (oRe4 * tRe4 - oIm4 * tRe12);
        out512[120] = resRe4_s;
        out512[8] = resRe4_s;
        let resRe28_s = eRe4 - (oRe4 * tRe4 - oIm4 * tRe12);
        out512[72] = resRe28_s;
        out512[56] = resRe28_s;
        let resIm28_s = -eIm4 + (oRe4 * tRe12 + oIm4 * tRe4);
        out512[57] = resIm28_s;
        out512[73] = -resIm28_s;
        
        let oRe5 = out512[74];
        let oIm5 = out512[75];
        let eRe5 = out512[10];
        let eIm5 = out512[11];
        let tRe5 = 0.8819212913513184;
        let tRe11 = 0.4713967740535736;
        let resIm5_s = eIm5 + (oRe5 * tRe11 + oIm5 * tRe5);
        out512[11] = resIm5_s;
        out512[119] = -resIm5_s;
        let resRe5_s = eRe5 + (oRe5 * tRe5 - oIm5 * tRe11);
        out512[118] = resRe5_s;
        out512[10] = resRe5_s;
        let resRe27_s = eRe5 - (oRe5 * tRe5 - oIm5 * tRe11);
        out512[74] = resRe27_s;
        out512[54] = resRe27_s;
        let resIm27_s = -eIm5 + (oRe5 * tRe11 + oIm5 * tRe5);
        out512[55] = resIm27_s;
        out512[75] = -resIm27_s;
        
        let oRe6 = out512[76];
        let oIm6 = out512[77];
        let eRe6 = out512[12];
        let eIm6 = out512[13];
        let tRe6 = 0.8314695954322815;
        let tRe10 = 0.5555702447891235;
        let resIm6_s = eIm6 + (oRe6 * tRe10 + oIm6 * tRe6);
        out512[13] = resIm6_s;
        out512[117] = -resIm6_s;
        let resRe6_s = eRe6 + (oRe6 * tRe6 - oIm6 * tRe10);
        out512[116] = resRe6_s;
        out512[12] = resRe6_s;
        let resRe26_s = eRe6 - (oRe6 * tRe6 - oIm6 * tRe10);
        out512[76] = resRe26_s;
        out512[52] = resRe26_s;
        let resIm26_s = -eIm6 + (oRe6 * tRe10 + oIm6 * tRe6);
        out512[53] = resIm26_s;
        out512[77] = -resIm26_s;
        
        let oRe7 = out512[78];
        let oIm7 = out512[79];
        let eRe7 = out512[14];
        let eIm7 = out512[15];
        let tRe7 = 0.7730104923248291;
        let tRe9 = 0.6343932747840881;
        let resIm7_s = eIm7 + (oRe7 * tRe9 + oIm7 * tRe7);
        out512[15] = resIm7_s;
        out512[115] = -resIm7_s;
        let resRe7_s = eRe7 + (oRe7 * tRe7 - oIm7 * tRe9);
        out512[114] = resRe7_s;
        out512[14] = resRe7_s;
        let resRe25_s = eRe7 - (oRe7 * tRe7 - oIm7 * tRe9);
        out512[78] = resRe25_s;
        out512[50] = resRe25_s;
        let resIm25_s = -eIm7 + (oRe7 * tRe9 + oIm7 * tRe7);
        out512[51] = resIm25_s;
        out512[79] = -resIm25_s;
        
        let oRe8 = out512[80];
        let oIm8 = out512[81];
        let eRe8 = out512[16];
        let eIm8 = out512[17];
        let tRe8 = 0.7071067690849304;
        let resIm8_s = eIm8 + (oRe8 * tRe8 + oIm8 * tRe8);
        out512[17] = resIm8_s;
        out512[113] = -resIm8_s;
        let resRe8_s = eRe8 + (oRe8 * tRe8 - oIm8 * tRe8);
        out512[112] = resRe8_s;
        out512[16] = resRe8_s;
        let resRe24_s = eRe8 - (oRe8 * tRe8 - oIm8 * tRe8);
        out512[80] = resRe24_s;
        out512[48] = resRe24_s;
        let resIm24_s = -eIm8 + (oRe8 * tRe8 + oIm8 * tRe8);
        out512[49] = resIm24_s;
        out512[81] = -resIm24_s;
        
        let oRe9 = out512[82];
        let oIm9 = out512[83];
        let eRe9 = out512[18];
        let eIm9 = out512[19];
        let resIm9_s = eIm9 + (oRe9 * tRe7 + oIm9 * tRe9);
        out512[19] = resIm9_s;
        out512[111] = -resIm9_s;
        let resRe9_s = eRe9 + (oRe9 * tRe9 - oIm9 * tRe7);
        out512[110] = resRe9_s;
        out512[18] = resRe9_s;
        let resRe23_s = eRe9 - (oRe9 * tRe9 - oIm9 * tRe7);
        out512[82] = resRe23_s;
        out512[46] = resRe23_s;
        let resIm23_s = -eIm9 + (oRe9 * tRe7 + oIm9 * tRe9);
        out512[47] = resIm23_s;
        out512[83] = -resIm23_s;
        
        let oRe10 = out512[84];
        let oIm10 = out512[85];
        let eRe10 = out512[20];
        let eIm10 = out512[21];
        let resIm10_s = eIm10 + (oRe10 * tRe6 + oIm10 * tRe10);
        out512[21] = resIm10_s;
        out512[109] = -resIm10_s;
        let resRe10_s = eRe10 + (oRe10 * tRe10 - oIm10 * tRe6);
        out512[108] = resRe10_s;
        out512[20] = resRe10_s;
        let resRe22_s = eRe10 - (oRe10 * tRe10 - oIm10 * tRe6);
        out512[84] = resRe22_s;
        out512[44] = resRe22_s;
        let resIm22_s = -eIm10 + (oRe10 * tRe6 + oIm10 * tRe10);
        out512[45] = resIm22_s;
        out512[85] = -resIm22_s;
        
        let oRe11 = out512[86];
        let oIm11 = out512[87];
        let eRe11 = out512[22];
        let eIm11 = out512[23];
        let resIm11_s = eIm11 + (oRe11 * tRe5 + oIm11 * tRe11);
        out512[23] = resIm11_s;
        out512[107] = -resIm11_s;
        let resRe11_s = eRe11 + (oRe11 * tRe11 - oIm11 * tRe5);
        out512[106] = resRe11_s;
        out512[22] = resRe11_s;
        let resRe21_s = eRe11 - (oRe11 * tRe11 - oIm11 * tRe5);
        out512[86] = resRe21_s;
        out512[42] = resRe21_s;
        let resIm21_s = -eIm11 + (oRe11 * tRe5 + oIm11 * tRe11);
        out512[43] = resIm21_s;
        out512[87] = -resIm21_s;
        
        let oRe12 = out512[88];
        let oIm12 = out512[89];
        let eRe12 = out512[24];
        let eIm12 = out512[25];
        let resIm12_s = eIm12 + (oRe12 * tRe4 + oIm12 * tRe12);
        out512[25] = resIm12_s;
        out512[105] = -resIm12_s;
        let resRe12_s = eRe12 + (oRe12 * tRe12 - oIm12 * tRe4);
        out512[104] = resRe12_s;
        out512[24] = resRe12_s;
        let resRe20_s = eRe12 - (oRe12 * tRe12 - oIm12 * tRe4);
        out512[88] = resRe20_s;
        out512[40] = resRe20_s;
        let resIm20_s = -eIm12 + (oRe12 * tRe4 + oIm12 * tRe12);
        out512[41] = resIm20_s;
        out512[89] = -resIm20_s;
        
        let oRe13 = out512[90];
        let oIm13 = out512[91];
        let eRe13 = out512[26];
        let eIm13 = out512[27];
        let resIm13_s = eIm13 + (oRe13 * tRe3 + oIm13 * tRe13);
        out512[27] = resIm13_s;
        out512[103] = -resIm13_s;
        let resRe13_s = eRe13 + (oRe13 * tRe13 - oIm13 * tRe3);
        out512[102] = resRe13_s;
        out512[26] = resRe13_s;
        let resRe19_s = eRe13 - (oRe13 * tRe13 - oIm13 * tRe3);
        out512[90] = resRe19_s;
        out512[38] = resRe19_s;
        let resIm19_s = -eIm13 + (oRe13 * tRe3 + oIm13 * tRe13);
        out512[39] = resIm19_s;
        out512[91] = -resIm19_s;
        
        let oRe14 = out512[92];
        let oIm14 = out512[93];
        let eRe14 = out512[28];
        let eIm14 = out512[29];
        let resIm14_s = eIm14 + (oRe14 * tRe2 + oIm14 * tRe14);
        out512[29] = resIm14_s;
        out512[101] = -resIm14_s;
        let resRe14_s = eRe14 + (oRe14 * tRe14 - oIm14 * tRe2);
        out512[100] = resRe14_s;
        out512[28] = resRe14_s;
        let resRe18_s = eRe14 - (oRe14 * tRe14 - oIm14 * tRe2);
        out512[92] = resRe18_s;
        out512[36] = resRe18_s;
        let resIm18_s = -eIm14 + (oRe14 * tRe2 + oIm14 * tRe14);
        out512[37] = resIm18_s;
        out512[93] = -resIm18_s;
        
        let oRe15 = out512[94];
        let oIm15 = out512[95];
        let eRe15 = out512[30];
        let eIm15 = out512[31];
        let resIm15_s = eIm15 + (oRe15 * tRe1 + oIm15 * tRe15);
        out512[31] = resIm15_s;
        out512[99] = -resIm15_s;
        let resRe15_s = eRe15 + (oRe15 * tRe15 - oIm15 * tRe1);
        out512[98] = resRe15_s;
        out512[30] = resRe15_s;
        let resRe17_s = eRe15 - (oRe15 * tRe15 - oIm15 * tRe1);
        out512[94] = resRe17_s;
        out512[34] = resRe17_s;
        let resIm17_s = -eIm15 + (oRe15 * tRe1 + oIm15 * tRe15);
        out512[35] = resIm17_s;
        out512[95] = -resIm17_s;
        
        let oRe16 = out512[96];
        let oIm16 = out512[97];
        let eRe16 = out512[32];
        let eIm16 = out512[33];
        let resIm16_s = eIm16 + oRe16;
        out512[33] = resIm16_s;
        out512[97] = -resIm16_s;
        let resRe16_s = eRe16 - oIm16;
        out512[96] = resRe16_s;
        out512[32] = resRe16_s;
        
        let oRe128 = out512[192];
        let oIm128 = out512[193];
        let eRe128 = out512[128];
        let eIm128 = out512[129];
        let resRe128_s = eRe128 + oRe128;
        out512[128] = resRe128_s;
        let resIm128_s = eIm128 + oIm128;
        out512[129] = resIm128_s;
        let resRe128_d = eRe128 - oRe128;
        out512[192] = resRe128_d;
        let resIm128_d = eIm128 - oIm128;
        out512[193] = resIm128_d;
        
        let oRe129 = out512[194];
        let oIm129 = out512[195];
        let eRe129 = out512[130];
        let eIm129 = out512[131];
        let tRe129 = 0.9951847195625305;
        let tRe143 = 0.0980171337723732;
        let resIm129_s = eIm129 + (oRe129 * tRe143 + oIm129 * tRe129);
        out512[131] = resIm129_s;
        out512[255] = -resIm129_s;
        let resRe129_s = eRe129 + (oRe129 * tRe129 - oIm129 * tRe143);
        out512[254] = resRe129_s;
        out512[130] = resRe129_s;
        let resRe159_s = eRe129 - (oRe129 * tRe129 - oIm129 * tRe143);
        out512[194] = resRe159_s;
        out512[190] = resRe159_s;
        let resIm159_s = -eIm129 + (oRe129 * tRe143 + oIm129 * tRe129);
        out512[191] = resIm159_s;
        out512[195] = -resIm159_s;
        
        let oRe130 = out512[196];
        let oIm130 = out512[197];
        let eRe130 = out512[132];
        let eIm130 = out512[133];
        let tRe130 = 0.9807852506637573;
        let tRe142 = 0.1950903534889221;
        let resIm130_s = eIm130 + (oRe130 * tRe142 + oIm130 * tRe130);
        out512[133] = resIm130_s;
        out512[253] = -resIm130_s;
        let resRe130_s = eRe130 + (oRe130 * tRe130 - oIm130 * tRe142);
        out512[252] = resRe130_s;
        out512[132] = resRe130_s;
        let resRe158_s = eRe130 - (oRe130 * tRe130 - oIm130 * tRe142);
        out512[196] = resRe158_s;
        out512[188] = resRe158_s;
        let resIm158_s = -eIm130 + (oRe130 * tRe142 + oIm130 * tRe130);
        out512[189] = resIm158_s;
        out512[197] = -resIm158_s;
        
        let oRe131 = out512[198];
        let oIm131 = out512[199];
        let eRe131 = out512[134];
        let eIm131 = out512[135];
        let tRe131 = 0.9569403529167175;
        let tRe141 = 0.2902846336364746;
        let resIm131_s = eIm131 + (oRe131 * tRe141 + oIm131 * tRe131);
        out512[135] = resIm131_s;
        out512[251] = -resIm131_s;
        let resRe131_s = eRe131 + (oRe131 * tRe131 - oIm131 * tRe141);
        out512[250] = resRe131_s;
        out512[134] = resRe131_s;
        let resRe157_s = eRe131 - (oRe131 * tRe131 - oIm131 * tRe141);
        out512[198] = resRe157_s;
        out512[186] = resRe157_s;
        let resIm157_s = -eIm131 + (oRe131 * tRe141 + oIm131 * tRe131);
        out512[187] = resIm157_s;
        out512[199] = -resIm157_s;
        
        let oRe132 = out512[200];
        let oIm132 = out512[201];
        let eRe132 = out512[136];
        let eIm132 = out512[137];
        let tRe132 = 0.9238795042037964;
        let tRe140 = 0.3826834261417389;
        let resIm132_s = eIm132 + (oRe132 * tRe140 + oIm132 * tRe132);
        out512[137] = resIm132_s;
        out512[249] = -resIm132_s;
        let resRe132_s = eRe132 + (oRe132 * tRe132 - oIm132 * tRe140);
        out512[248] = resRe132_s;
        out512[136] = resRe132_s;
        let resRe156_s = eRe132 - (oRe132 * tRe132 - oIm132 * tRe140);
        out512[200] = resRe156_s;
        out512[184] = resRe156_s;
        let resIm156_s = -eIm132 + (oRe132 * tRe140 + oIm132 * tRe132);
        out512[185] = resIm156_s;
        out512[201] = -resIm156_s;
        
        let oRe133 = out512[202];
        let oIm133 = out512[203];
        let eRe133 = out512[138];
        let eIm133 = out512[139];
        let tRe133 = 0.8819212913513184;
        let tRe139 = 0.4713967740535736;
        let resIm133_s = eIm133 + (oRe133 * tRe139 + oIm133 * tRe133);
        out512[139] = resIm133_s;
        out512[247] = -resIm133_s;
        let resRe133_s = eRe133 + (oRe133 * tRe133 - oIm133 * tRe139);
        out512[246] = resRe133_s;
        out512[138] = resRe133_s;
        let resRe155_s = eRe133 - (oRe133 * tRe133 - oIm133 * tRe139);
        out512[202] = resRe155_s;
        out512[182] = resRe155_s;
        let resIm155_s = -eIm133 + (oRe133 * tRe139 + oIm133 * tRe133);
        out512[183] = resIm155_s;
        out512[203] = -resIm155_s;
        
        let oRe134 = out512[204];
        let oIm134 = out512[205];
        let eRe134 = out512[140];
        let eIm134 = out512[141];
        let tRe134 = 0.8314695954322815;
        let tRe138 = 0.5555702447891235;
        let resIm134_s = eIm134 + (oRe134 * tRe138 + oIm134 * tRe134);
        out512[141] = resIm134_s;
        out512[245] = -resIm134_s;
        let resRe134_s = eRe134 + (oRe134 * tRe134 - oIm134 * tRe138);
        out512[244] = resRe134_s;
        out512[140] = resRe134_s;
        let resRe154_s = eRe134 - (oRe134 * tRe134 - oIm134 * tRe138);
        out512[204] = resRe154_s;
        out512[180] = resRe154_s;
        let resIm154_s = -eIm134 + (oRe134 * tRe138 + oIm134 * tRe134);
        out512[181] = resIm154_s;
        out512[205] = -resIm154_s;
        
        let oRe135 = out512[206];
        let oIm135 = out512[207];
        let eRe135 = out512[142];
        let eIm135 = out512[143];
        let tRe135 = 0.7730104923248291;
        let tRe137 = 0.6343932747840881;
        let resIm135_s = eIm135 + (oRe135 * tRe137 + oIm135 * tRe135);
        out512[143] = resIm135_s;
        out512[243] = -resIm135_s;
        let resRe135_s = eRe135 + (oRe135 * tRe135 - oIm135 * tRe137);
        out512[242] = resRe135_s;
        out512[142] = resRe135_s;
        let resRe153_s = eRe135 - (oRe135 * tRe135 - oIm135 * tRe137);
        out512[206] = resRe153_s;
        out512[178] = resRe153_s;
        let resIm153_s = -eIm135 + (oRe135 * tRe137 + oIm135 * tRe135);
        out512[179] = resIm153_s;
        out512[207] = -resIm153_s;
        
        let oRe136 = out512[208];
        let oIm136 = out512[209];
        let eRe136 = out512[144];
        let eIm136 = out512[145];
        let tRe136 = 0.7071067690849304;
        let resIm136_s = eIm136 + (oRe136 * tRe136 + oIm136 * tRe136);
        out512[145] = resIm136_s;
        out512[241] = -resIm136_s;
        let resRe136_s = eRe136 + (oRe136 * tRe136 - oIm136 * tRe136);
        out512[240] = resRe136_s;
        out512[144] = resRe136_s;
        let resRe152_s = eRe136 - (oRe136 * tRe136 - oIm136 * tRe136);
        out512[208] = resRe152_s;
        out512[176] = resRe152_s;
        let resIm152_s = -eIm136 + (oRe136 * tRe136 + oIm136 * tRe136);
        out512[177] = resIm152_s;
        out512[209] = -resIm152_s;
        
        let oRe137 = out512[210];
        let oIm137 = out512[211];
        let eRe137 = out512[146];
        let eIm137 = out512[147];
        let resIm137_s = eIm137 + (oRe137 * tRe135 + oIm137 * tRe137);
        out512[147] = resIm137_s;
        out512[239] = -resIm137_s;
        let resRe137_s = eRe137 + (oRe137 * tRe137 - oIm137 * tRe135);
        out512[238] = resRe137_s;
        out512[146] = resRe137_s;
        let resRe151_s = eRe137 - (oRe137 * tRe137 - oIm137 * tRe135);
        out512[210] = resRe151_s;
        out512[174] = resRe151_s;
        let resIm151_s = -eIm137 + (oRe137 * tRe135 + oIm137 * tRe137);
        out512[175] = resIm151_s;
        out512[211] = -resIm151_s;
        
        let oRe138 = out512[212];
        let oIm138 = out512[213];
        let eRe138 = out512[148];
        let eIm138 = out512[149];
        let resIm138_s = eIm138 + (oRe138 * tRe134 + oIm138 * tRe138);
        out512[149] = resIm138_s;
        out512[237] = -resIm138_s;
        let resRe138_s = eRe138 + (oRe138 * tRe138 - oIm138 * tRe134);
        out512[236] = resRe138_s;
        out512[148] = resRe138_s;
        let resRe150_s = eRe138 - (oRe138 * tRe138 - oIm138 * tRe134);
        out512[212] = resRe150_s;
        out512[172] = resRe150_s;
        let resIm150_s = -eIm138 + (oRe138 * tRe134 + oIm138 * tRe138);
        out512[173] = resIm150_s;
        out512[213] = -resIm150_s;
        
        let oRe139 = out512[214];
        let oIm139 = out512[215];
        let eRe139 = out512[150];
        let eIm139 = out512[151];
        let resIm139_s = eIm139 + (oRe139 * tRe133 + oIm139 * tRe139);
        out512[151] = resIm139_s;
        out512[235] = -resIm139_s;
        let resRe139_s = eRe139 + (oRe139 * tRe139 - oIm139 * tRe133);
        out512[234] = resRe139_s;
        out512[150] = resRe139_s;
        let resRe149_s = eRe139 - (oRe139 * tRe139 - oIm139 * tRe133);
        out512[214] = resRe149_s;
        out512[170] = resRe149_s;
        let resIm149_s = -eIm139 + (oRe139 * tRe133 + oIm139 * tRe139);
        out512[171] = resIm149_s;
        out512[215] = -resIm149_s;
        
        let oRe140 = out512[216];
        let oIm140 = out512[217];
        let eRe140 = out512[152];
        let eIm140 = out512[153];
        let resIm140_s = eIm140 + (oRe140 * tRe132 + oIm140 * tRe140);
        out512[153] = resIm140_s;
        out512[233] = -resIm140_s;
        let resRe140_s = eRe140 + (oRe140 * tRe140 - oIm140 * tRe132);
        out512[232] = resRe140_s;
        out512[152] = resRe140_s;
        let resRe148_s = eRe140 - (oRe140 * tRe140 - oIm140 * tRe132);
        out512[216] = resRe148_s;
        out512[168] = resRe148_s;
        let resIm148_s = -eIm140 + (oRe140 * tRe132 + oIm140 * tRe140);
        out512[169] = resIm148_s;
        out512[217] = -resIm148_s;
        
        let oRe141 = out512[218];
        let oIm141 = out512[219];
        let eRe141 = out512[154];
        let eIm141 = out512[155];
        let resIm141_s = eIm141 + (oRe141 * tRe131 + oIm141 * tRe141);
        out512[155] = resIm141_s;
        out512[231] = -resIm141_s;
        let resRe141_s = eRe141 + (oRe141 * tRe141 - oIm141 * tRe131);
        out512[230] = resRe141_s;
        out512[154] = resRe141_s;
        let resRe147_s = eRe141 - (oRe141 * tRe141 - oIm141 * tRe131);
        out512[218] = resRe147_s;
        out512[166] = resRe147_s;
        let resIm147_s = -eIm141 + (oRe141 * tRe131 + oIm141 * tRe141);
        out512[167] = resIm147_s;
        out512[219] = -resIm147_s;
        
        let oRe142 = out512[220];
        let oIm142 = out512[221];
        let eRe142 = out512[156];
        let eIm142 = out512[157];
        let resIm142_s = eIm142 + (oRe142 * tRe130 + oIm142 * tRe142);
        out512[157] = resIm142_s;
        out512[229] = -resIm142_s;
        let resRe142_s = eRe142 + (oRe142 * tRe142 - oIm142 * tRe130);
        out512[228] = resRe142_s;
        out512[156] = resRe142_s;
        let resRe146_s = eRe142 - (oRe142 * tRe142 - oIm142 * tRe130);
        out512[220] = resRe146_s;
        out512[164] = resRe146_s;
        let resIm146_s = -eIm142 + (oRe142 * tRe130 + oIm142 * tRe142);
        out512[165] = resIm146_s;
        out512[221] = -resIm146_s;
        
        let oRe143 = out512[222];
        let oIm143 = out512[223];
        let eRe143 = out512[158];
        let eIm143 = out512[159];
        let resIm143_s = eIm143 + (oRe143 * tRe129 + oIm143 * tRe143);
        out512[159] = resIm143_s;
        out512[227] = -resIm143_s;
        let resRe143_s = eRe143 + (oRe143 * tRe143 - oIm143 * tRe129);
        out512[226] = resRe143_s;
        out512[158] = resRe143_s;
        let resRe145_s = eRe143 - (oRe143 * tRe143 - oIm143 * tRe129);
        out512[222] = resRe145_s;
        out512[162] = resRe145_s;
        let resIm145_s = -eIm143 + (oRe143 * tRe129 + oIm143 * tRe143);
        out512[163] = resIm145_s;
        out512[223] = -resIm145_s;
        
        let oRe144 = out512[224];
        let oIm144 = out512[225];
        let eRe144 = out512[160];
        let eIm144 = out512[161];
        let resIm144_s = eIm144 + oRe144;
        out512[161] = resIm144_s;
        out512[225] = -resIm144_s;
        let resRe144_s = eRe144 - oIm144;
        out512[224] = resRe144_s;
        out512[160] = resRe144_s;
        
        let oRe256 = out512[320];
        let oIm256 = out512[321];
        let eRe256 = out512[256];
        let eIm256 = out512[257];
        let resRe256_s = eRe256 + oRe256;
        out512[256] = resRe256_s;
        let resIm256_s = eIm256 + oIm256;
        out512[257] = resIm256_s;
        let resRe256_d = eRe256 - oRe256;
        out512[320] = resRe256_d;
        let resIm256_d = eIm256 - oIm256;
        out512[321] = resIm256_d;
        
        let oRe257 = out512[322];
        let oIm257 = out512[323];
        let eRe257 = out512[258];
        let eIm257 = out512[259];
        let tRe257 = 0.9951847195625305;
        let tRe271 = 0.0980171337723732;
        let resIm257_s = eIm257 + (oRe257 * tRe271 + oIm257 * tRe257);
        out512[259] = resIm257_s;
        out512[383] = -resIm257_s;
        let resRe257_s = eRe257 + (oRe257 * tRe257 - oIm257 * tRe271);
        out512[382] = resRe257_s;
        out512[258] = resRe257_s;
        let resRe287_s = eRe257 - (oRe257 * tRe257 - oIm257 * tRe271);
        out512[322] = resRe287_s;
        out512[318] = resRe287_s;
        let resIm287_s = -eIm257 + (oRe257 * tRe271 + oIm257 * tRe257);
        out512[319] = resIm287_s;
        out512[323] = -resIm287_s;
        
        let oRe258 = out512[324];
        let oIm258 = out512[325];
        let eRe258 = out512[260];
        let eIm258 = out512[261];
        let tRe258 = 0.9807852506637573;
        let tRe270 = 0.1950903534889221;
        let resIm258_s = eIm258 + (oRe258 * tRe270 + oIm258 * tRe258);
        out512[261] = resIm258_s;
        out512[381] = -resIm258_s;
        let resRe258_s = eRe258 + (oRe258 * tRe258 - oIm258 * tRe270);
        out512[380] = resRe258_s;
        out512[260] = resRe258_s;
        let resRe286_s = eRe258 - (oRe258 * tRe258 - oIm258 * tRe270);
        out512[324] = resRe286_s;
        out512[316] = resRe286_s;
        let resIm286_s = -eIm258 + (oRe258 * tRe270 + oIm258 * tRe258);
        out512[317] = resIm286_s;
        out512[325] = -resIm286_s;
        
        let oRe259 = out512[326];
        let oIm259 = out512[327];
        let eRe259 = out512[262];
        let eIm259 = out512[263];
        let tRe259 = 0.9569403529167175;
        let tRe269 = 0.2902846336364746;
        let resIm259_s = eIm259 + (oRe259 * tRe269 + oIm259 * tRe259);
        out512[263] = resIm259_s;
        out512[379] = -resIm259_s;
        let resRe259_s = eRe259 + (oRe259 * tRe259 - oIm259 * tRe269);
        out512[378] = resRe259_s;
        out512[262] = resRe259_s;
        let resRe285_s = eRe259 - (oRe259 * tRe259 - oIm259 * tRe269);
        out512[326] = resRe285_s;
        out512[314] = resRe285_s;
        let resIm285_s = -eIm259 + (oRe259 * tRe269 + oIm259 * tRe259);
        out512[315] = resIm285_s;
        out512[327] = -resIm285_s;
        
        let oRe260 = out512[328];
        let oIm260 = out512[329];
        let eRe260 = out512[264];
        let eIm260 = out512[265];
        let tRe260 = 0.9238795042037964;
        let tRe268 = 0.3826834261417389;
        let resIm260_s = eIm260 + (oRe260 * tRe268 + oIm260 * tRe260);
        out512[265] = resIm260_s;
        out512[377] = -resIm260_s;
        let resRe260_s = eRe260 + (oRe260 * tRe260 - oIm260 * tRe268);
        out512[376] = resRe260_s;
        out512[264] = resRe260_s;
        let resRe284_s = eRe260 - (oRe260 * tRe260 - oIm260 * tRe268);
        out512[328] = resRe284_s;
        out512[312] = resRe284_s;
        let resIm284_s = -eIm260 + (oRe260 * tRe268 + oIm260 * tRe260);
        out512[313] = resIm284_s;
        out512[329] = -resIm284_s;
        
        let oRe261 = out512[330];
        let oIm261 = out512[331];
        let eRe261 = out512[266];
        let eIm261 = out512[267];
        let tRe261 = 0.8819212913513184;
        let tRe267 = 0.4713967740535736;
        let resIm261_s = eIm261 + (oRe261 * tRe267 + oIm261 * tRe261);
        out512[267] = resIm261_s;
        out512[375] = -resIm261_s;
        let resRe261_s = eRe261 + (oRe261 * tRe261 - oIm261 * tRe267);
        out512[374] = resRe261_s;
        out512[266] = resRe261_s;
        let resRe283_s = eRe261 - (oRe261 * tRe261 - oIm261 * tRe267);
        out512[330] = resRe283_s;
        out512[310] = resRe283_s;
        let resIm283_s = -eIm261 + (oRe261 * tRe267 + oIm261 * tRe261);
        out512[311] = resIm283_s;
        out512[331] = -resIm283_s;
        
        let oRe262 = out512[332];
        let oIm262 = out512[333];
        let eRe262 = out512[268];
        let eIm262 = out512[269];
        let tRe262 = 0.8314695954322815;
        let tRe266 = 0.5555702447891235;
        let resIm262_s = eIm262 + (oRe262 * tRe266 + oIm262 * tRe262);
        out512[269] = resIm262_s;
        out512[373] = -resIm262_s;
        let resRe262_s = eRe262 + (oRe262 * tRe262 - oIm262 * tRe266);
        out512[372] = resRe262_s;
        out512[268] = resRe262_s;
        let resRe282_s = eRe262 - (oRe262 * tRe262 - oIm262 * tRe266);
        out512[332] = resRe282_s;
        out512[308] = resRe282_s;
        let resIm282_s = -eIm262 + (oRe262 * tRe266 + oIm262 * tRe262);
        out512[309] = resIm282_s;
        out512[333] = -resIm282_s;
        
        let oRe263 = out512[334];
        let oIm263 = out512[335];
        let eRe263 = out512[270];
        let eIm263 = out512[271];
        let tRe263 = 0.7730104923248291;
        let tRe265 = 0.6343932747840881;
        let resIm263_s = eIm263 + (oRe263 * tRe265 + oIm263 * tRe263);
        out512[271] = resIm263_s;
        out512[371] = -resIm263_s;
        let resRe263_s = eRe263 + (oRe263 * tRe263 - oIm263 * tRe265);
        out512[370] = resRe263_s;
        out512[270] = resRe263_s;
        let resRe281_s = eRe263 - (oRe263 * tRe263 - oIm263 * tRe265);
        out512[334] = resRe281_s;
        out512[306] = resRe281_s;
        let resIm281_s = -eIm263 + (oRe263 * tRe265 + oIm263 * tRe263);
        out512[307] = resIm281_s;
        out512[335] = -resIm281_s;
        
        let oRe264 = out512[336];
        let oIm264 = out512[337];
        let eRe264 = out512[272];
        let eIm264 = out512[273];
        let tRe264 = 0.7071067690849304;
        let resIm264_s = eIm264 + (oRe264 * tRe264 + oIm264 * tRe264);
        out512[273] = resIm264_s;
        out512[369] = -resIm264_s;
        let resRe264_s = eRe264 + (oRe264 * tRe264 - oIm264 * tRe264);
        out512[368] = resRe264_s;
        out512[272] = resRe264_s;
        let resRe280_s = eRe264 - (oRe264 * tRe264 - oIm264 * tRe264);
        out512[336] = resRe280_s;
        out512[304] = resRe280_s;
        let resIm280_s = -eIm264 + (oRe264 * tRe264 + oIm264 * tRe264);
        out512[305] = resIm280_s;
        out512[337] = -resIm280_s;
        
        let oRe265 = out512[338];
        let oIm265 = out512[339];
        let eRe265 = out512[274];
        let eIm265 = out512[275];
        let resIm265_s = eIm265 + (oRe265 * tRe263 + oIm265 * tRe265);
        out512[275] = resIm265_s;
        out512[367] = -resIm265_s;
        let resRe265_s = eRe265 + (oRe265 * tRe265 - oIm265 * tRe263);
        out512[366] = resRe265_s;
        out512[274] = resRe265_s;
        let resRe279_s = eRe265 - (oRe265 * tRe265 - oIm265 * tRe263);
        out512[338] = resRe279_s;
        out512[302] = resRe279_s;
        let resIm279_s = -eIm265 + (oRe265 * tRe263 + oIm265 * tRe265);
        out512[303] = resIm279_s;
        out512[339] = -resIm279_s;
        
        let oRe266 = out512[340];
        let oIm266 = out512[341];
        let eRe266 = out512[276];
        let eIm266 = out512[277];
        let resIm266_s = eIm266 + (oRe266 * tRe262 + oIm266 * tRe266);
        out512[277] = resIm266_s;
        out512[365] = -resIm266_s;
        let resRe266_s = eRe266 + (oRe266 * tRe266 - oIm266 * tRe262);
        out512[364] = resRe266_s;
        out512[276] = resRe266_s;
        let resRe278_s = eRe266 - (oRe266 * tRe266 - oIm266 * tRe262);
        out512[340] = resRe278_s;
        out512[300] = resRe278_s;
        let resIm278_s = -eIm266 + (oRe266 * tRe262 + oIm266 * tRe266);
        out512[301] = resIm278_s;
        out512[341] = -resIm278_s;
        
        let oRe267 = out512[342];
        let oIm267 = out512[343];
        let eRe267 = out512[278];
        let eIm267 = out512[279];
        let resIm267_s = eIm267 + (oRe267 * tRe261 + oIm267 * tRe267);
        out512[279] = resIm267_s;
        out512[363] = -resIm267_s;
        let resRe267_s = eRe267 + (oRe267 * tRe267 - oIm267 * tRe261);
        out512[362] = resRe267_s;
        out512[278] = resRe267_s;
        let resRe277_s = eRe267 - (oRe267 * tRe267 - oIm267 * tRe261);
        out512[342] = resRe277_s;
        out512[298] = resRe277_s;
        let resIm277_s = -eIm267 + (oRe267 * tRe261 + oIm267 * tRe267);
        out512[299] = resIm277_s;
        out512[343] = -resIm277_s;
        
        let oRe268 = out512[344];
        let oIm268 = out512[345];
        let eRe268 = out512[280];
        let eIm268 = out512[281];
        let resIm268_s = eIm268 + (oRe268 * tRe260 + oIm268 * tRe268);
        out512[281] = resIm268_s;
        out512[361] = -resIm268_s;
        let resRe268_s = eRe268 + (oRe268 * tRe268 - oIm268 * tRe260);
        out512[360] = resRe268_s;
        out512[280] = resRe268_s;
        let resRe276_s = eRe268 - (oRe268 * tRe268 - oIm268 * tRe260);
        out512[344] = resRe276_s;
        out512[296] = resRe276_s;
        let resIm276_s = -eIm268 + (oRe268 * tRe260 + oIm268 * tRe268);
        out512[297] = resIm276_s;
        out512[345] = -resIm276_s;
        
        let oRe269 = out512[346];
        let oIm269 = out512[347];
        let eRe269 = out512[282];
        let eIm269 = out512[283];
        let resIm269_s = eIm269 + (oRe269 * tRe259 + oIm269 * tRe269);
        out512[283] = resIm269_s;
        out512[359] = -resIm269_s;
        let resRe269_s = eRe269 + (oRe269 * tRe269 - oIm269 * tRe259);
        out512[358] = resRe269_s;
        out512[282] = resRe269_s;
        let resRe275_s = eRe269 - (oRe269 * tRe269 - oIm269 * tRe259);
        out512[346] = resRe275_s;
        out512[294] = resRe275_s;
        let resIm275_s = -eIm269 + (oRe269 * tRe259 + oIm269 * tRe269);
        out512[295] = resIm275_s;
        out512[347] = -resIm275_s;
        
        let oRe270 = out512[348];
        let oIm270 = out512[349];
        let eRe270 = out512[284];
        let eIm270 = out512[285];
        let resIm270_s = eIm270 + (oRe270 * tRe258 + oIm270 * tRe270);
        out512[285] = resIm270_s;
        out512[357] = -resIm270_s;
        let resRe270_s = eRe270 + (oRe270 * tRe270 - oIm270 * tRe258);
        out512[356] = resRe270_s;
        out512[284] = resRe270_s;
        let resRe274_s = eRe270 - (oRe270 * tRe270 - oIm270 * tRe258);
        out512[348] = resRe274_s;
        out512[292] = resRe274_s;
        let resIm274_s = -eIm270 + (oRe270 * tRe258 + oIm270 * tRe270);
        out512[293] = resIm274_s;
        out512[349] = -resIm274_s;
        
        let oRe271 = out512[350];
        let oIm271 = out512[351];
        let eRe271 = out512[286];
        let eIm271 = out512[287];
        let resIm271_s = eIm271 + (oRe271 * tRe257 + oIm271 * tRe271);
        out512[287] = resIm271_s;
        out512[355] = -resIm271_s;
        let resRe271_s = eRe271 + (oRe271 * tRe271 - oIm271 * tRe257);
        out512[354] = resRe271_s;
        out512[286] = resRe271_s;
        let resRe273_s = eRe271 - (oRe271 * tRe271 - oIm271 * tRe257);
        out512[350] = resRe273_s;
        out512[290] = resRe273_s;
        let resIm273_s = -eIm271 + (oRe271 * tRe257 + oIm271 * tRe271);
        out512[291] = resIm273_s;
        out512[351] = -resIm273_s;
        
        let oRe272 = out512[352];
        let oIm272 = out512[353];
        let eRe272 = out512[288];
        let eIm272 = out512[289];
        let resIm272_s = eIm272 + oRe272;
        out512[289] = resIm272_s;
        out512[353] = -resIm272_s;
        let resRe272_s = eRe272 - oIm272;
        out512[352] = resRe272_s;
        out512[288] = resRe272_s;
        
        let oRe384 = out512[448];
        let oIm384 = out512[449];
        let eRe384 = out512[384];
        let eIm384 = out512[385];
        let resRe384_s = eRe384 + oRe384;
        out512[384] = resRe384_s;
        let resIm384_s = eIm384 + oIm384;
        out512[385] = resIm384_s;
        let resRe384_d = eRe384 - oRe384;
        out512[448] = resRe384_d;
        let resIm384_d = eIm384 - oIm384;
        out512[449] = resIm384_d;
        
        let oRe385 = out512[450];
        let oIm385 = out512[451];
        let eRe385 = out512[386];
        let eIm385 = out512[387];
        let tRe385 = 0.9951847195625305;
        let tRe399 = 0.0980171337723732;
        let resIm385_s = eIm385 + (oRe385 * tRe399 + oIm385 * tRe385);
        out512[387] = resIm385_s;
        out512[511] = -resIm385_s;
        let resRe385_s = eRe385 + (oRe385 * tRe385 - oIm385 * tRe399);
        out512[510] = resRe385_s;
        out512[386] = resRe385_s;
        let resRe415_s = eRe385 - (oRe385 * tRe385 - oIm385 * tRe399);
        out512[450] = resRe415_s;
        out512[446] = resRe415_s;
        let resIm415_s = -eIm385 + (oRe385 * tRe399 + oIm385 * tRe385);
        out512[447] = resIm415_s;
        out512[451] = -resIm415_s;
        
        let oRe386 = out512[452];
        let oIm386 = out512[453];
        let eRe386 = out512[388];
        let eIm386 = out512[389];
        let tRe386 = 0.9807852506637573;
        let tRe398 = 0.1950903534889221;
        let resIm386_s = eIm386 + (oRe386 * tRe398 + oIm386 * tRe386);
        out512[389] = resIm386_s;
        out512[509] = -resIm386_s;
        let resRe386_s = eRe386 + (oRe386 * tRe386 - oIm386 * tRe398);
        out512[508] = resRe386_s;
        out512[388] = resRe386_s;
        let resRe414_s = eRe386 - (oRe386 * tRe386 - oIm386 * tRe398);
        out512[452] = resRe414_s;
        out512[444] = resRe414_s;
        let resIm414_s = -eIm386 + (oRe386 * tRe398 + oIm386 * tRe386);
        out512[445] = resIm414_s;
        out512[453] = -resIm414_s;
        
        let oRe387 = out512[454];
        let oIm387 = out512[455];
        let eRe387 = out512[390];
        let eIm387 = out512[391];
        let tRe387 = 0.9569403529167175;
        let tRe397 = 0.2902846336364746;
        let resIm387_s = eIm387 + (oRe387 * tRe397 + oIm387 * tRe387);
        out512[391] = resIm387_s;
        out512[507] = -resIm387_s;
        let resRe387_s = eRe387 + (oRe387 * tRe387 - oIm387 * tRe397);
        out512[506] = resRe387_s;
        out512[390] = resRe387_s;
        let resRe413_s = eRe387 - (oRe387 * tRe387 - oIm387 * tRe397);
        out512[454] = resRe413_s;
        out512[442] = resRe413_s;
        let resIm413_s = -eIm387 + (oRe387 * tRe397 + oIm387 * tRe387);
        out512[443] = resIm413_s;
        out512[455] = -resIm413_s;
        
        let oRe388 = out512[456];
        let oIm388 = out512[457];
        let eRe388 = out512[392];
        let eIm388 = out512[393];
        let tRe388 = 0.9238795042037964;
        let tRe396 = 0.3826834261417389;
        let resIm388_s = eIm388 + (oRe388 * tRe396 + oIm388 * tRe388);
        out512[393] = resIm388_s;
        out512[505] = -resIm388_s;
        let resRe388_s = eRe388 + (oRe388 * tRe388 - oIm388 * tRe396);
        out512[504] = resRe388_s;
        out512[392] = resRe388_s;
        let resRe412_s = eRe388 - (oRe388 * tRe388 - oIm388 * tRe396);
        out512[456] = resRe412_s;
        out512[440] = resRe412_s;
        let resIm412_s = -eIm388 + (oRe388 * tRe396 + oIm388 * tRe388);
        out512[441] = resIm412_s;
        out512[457] = -resIm412_s;
        
        let oRe389 = out512[458];
        let oIm389 = out512[459];
        let eRe389 = out512[394];
        let eIm389 = out512[395];
        let tRe389 = 0.8819212913513184;
        let tRe395 = 0.4713967740535736;
        let resIm389_s = eIm389 + (oRe389 * tRe395 + oIm389 * tRe389);
        out512[395] = resIm389_s;
        out512[503] = -resIm389_s;
        let resRe389_s = eRe389 + (oRe389 * tRe389 - oIm389 * tRe395);
        out512[502] = resRe389_s;
        out512[394] = resRe389_s;
        let resRe411_s = eRe389 - (oRe389 * tRe389 - oIm389 * tRe395);
        out512[458] = resRe411_s;
        out512[438] = resRe411_s;
        let resIm411_s = -eIm389 + (oRe389 * tRe395 + oIm389 * tRe389);
        out512[439] = resIm411_s;
        out512[459] = -resIm411_s;
        
        let oRe390 = out512[460];
        let oIm390 = out512[461];
        let eRe390 = out512[396];
        let eIm390 = out512[397];
        let tRe390 = 0.8314695954322815;
        let tRe394 = 0.5555702447891235;
        let resIm390_s = eIm390 + (oRe390 * tRe394 + oIm390 * tRe390);
        out512[397] = resIm390_s;
        out512[501] = -resIm390_s;
        let resRe390_s = eRe390 + (oRe390 * tRe390 - oIm390 * tRe394);
        out512[500] = resRe390_s;
        out512[396] = resRe390_s;
        let resRe410_s = eRe390 - (oRe390 * tRe390 - oIm390 * tRe394);
        out512[460] = resRe410_s;
        out512[436] = resRe410_s;
        let resIm410_s = -eIm390 + (oRe390 * tRe394 + oIm390 * tRe390);
        out512[437] = resIm410_s;
        out512[461] = -resIm410_s;
        
        let oRe391 = out512[462];
        let oIm391 = out512[463];
        let eRe391 = out512[398];
        let eIm391 = out512[399];
        let tRe391 = 0.7730104923248291;
        let tRe393 = 0.6343932747840881;
        let resIm391_s = eIm391 + (oRe391 * tRe393 + oIm391 * tRe391);
        out512[399] = resIm391_s;
        out512[499] = -resIm391_s;
        let resRe391_s = eRe391 + (oRe391 * tRe391 - oIm391 * tRe393);
        out512[498] = resRe391_s;
        out512[398] = resRe391_s;
        let resRe409_s = eRe391 - (oRe391 * tRe391 - oIm391 * tRe393);
        out512[462] = resRe409_s;
        out512[434] = resRe409_s;
        let resIm409_s = -eIm391 + (oRe391 * tRe393 + oIm391 * tRe391);
        out512[435] = resIm409_s;
        out512[463] = -resIm409_s;
        
        let oRe392 = out512[464];
        let oIm392 = out512[465];
        let eRe392 = out512[400];
        let eIm392 = out512[401];
        let tRe392 = 0.7071067690849304;
        let resIm392_s = eIm392 + (oRe392 * tRe392 + oIm392 * tRe392);
        out512[401] = resIm392_s;
        out512[497] = -resIm392_s;
        let resRe392_s = eRe392 + (oRe392 * tRe392 - oIm392 * tRe392);
        out512[496] = resRe392_s;
        out512[400] = resRe392_s;
        let resRe408_s = eRe392 - (oRe392 * tRe392 - oIm392 * tRe392);
        out512[464] = resRe408_s;
        out512[432] = resRe408_s;
        let resIm408_s = -eIm392 + (oRe392 * tRe392 + oIm392 * tRe392);
        out512[433] = resIm408_s;
        out512[465] = -resIm408_s;
        
        let oRe393 = out512[466];
        let oIm393 = out512[467];
        let eRe393 = out512[402];
        let eIm393 = out512[403];
        let resIm393_s = eIm393 + (oRe393 * tRe391 + oIm393 * tRe393);
        out512[403] = resIm393_s;
        out512[495] = -resIm393_s;
        let resRe393_s = eRe393 + (oRe393 * tRe393 - oIm393 * tRe391);
        out512[494] = resRe393_s;
        out512[402] = resRe393_s;
        let resRe407_s = eRe393 - (oRe393 * tRe393 - oIm393 * tRe391);
        out512[466] = resRe407_s;
        out512[430] = resRe407_s;
        let resIm407_s = -eIm393 + (oRe393 * tRe391 + oIm393 * tRe393);
        out512[431] = resIm407_s;
        out512[467] = -resIm407_s;
        
        let oRe394 = out512[468];
        let oIm394 = out512[469];
        let eRe394 = out512[404];
        let eIm394 = out512[405];
        let resIm394_s = eIm394 + (oRe394 * tRe390 + oIm394 * tRe394);
        out512[405] = resIm394_s;
        out512[493] = -resIm394_s;
        let resRe394_s = eRe394 + (oRe394 * tRe394 - oIm394 * tRe390);
        out512[492] = resRe394_s;
        out512[404] = resRe394_s;
        let resRe406_s = eRe394 - (oRe394 * tRe394 - oIm394 * tRe390);
        out512[468] = resRe406_s;
        out512[428] = resRe406_s;
        let resIm406_s = -eIm394 + (oRe394 * tRe390 + oIm394 * tRe394);
        out512[429] = resIm406_s;
        out512[469] = -resIm406_s;
        
        let oRe395 = out512[470];
        let oIm395 = out512[471];
        let eRe395 = out512[406];
        let eIm395 = out512[407];
        let resIm395_s = eIm395 + (oRe395 * tRe389 + oIm395 * tRe395);
        out512[407] = resIm395_s;
        out512[491] = -resIm395_s;
        let resRe395_s = eRe395 + (oRe395 * tRe395 - oIm395 * tRe389);
        out512[490] = resRe395_s;
        out512[406] = resRe395_s;
        let resRe405_s = eRe395 - (oRe395 * tRe395 - oIm395 * tRe389);
        out512[470] = resRe405_s;
        out512[426] = resRe405_s;
        let resIm405_s = -eIm395 + (oRe395 * tRe389 + oIm395 * tRe395);
        out512[427] = resIm405_s;
        out512[471] = -resIm405_s;
        
        let oRe396 = out512[472];
        let oIm396 = out512[473];
        let eRe396 = out512[408];
        let eIm396 = out512[409];
        let resIm396_s = eIm396 + (oRe396 * tRe388 + oIm396 * tRe396);
        out512[409] = resIm396_s;
        out512[489] = -resIm396_s;
        let resRe396_s = eRe396 + (oRe396 * tRe396 - oIm396 * tRe388);
        out512[488] = resRe396_s;
        out512[408] = resRe396_s;
        let resRe404_s = eRe396 - (oRe396 * tRe396 - oIm396 * tRe388);
        out512[472] = resRe404_s;
        out512[424] = resRe404_s;
        let resIm404_s = -eIm396 + (oRe396 * tRe388 + oIm396 * tRe396);
        out512[425] = resIm404_s;
        out512[473] = -resIm404_s;
        
        let oRe397 = out512[474];
        let oIm397 = out512[475];
        let eRe397 = out512[410];
        let eIm397 = out512[411];
        let resIm397_s = eIm397 + (oRe397 * tRe387 + oIm397 * tRe397);
        out512[411] = resIm397_s;
        out512[487] = -resIm397_s;
        let resRe397_s = eRe397 + (oRe397 * tRe397 - oIm397 * tRe387);
        out512[486] = resRe397_s;
        out512[410] = resRe397_s;
        let resRe403_s = eRe397 - (oRe397 * tRe397 - oIm397 * tRe387);
        out512[474] = resRe403_s;
        out512[422] = resRe403_s;
        let resIm403_s = -eIm397 + (oRe397 * tRe387 + oIm397 * tRe397);
        out512[423] = resIm403_s;
        out512[475] = -resIm403_s;
        
        let oRe398 = out512[476];
        let oIm398 = out512[477];
        let eRe398 = out512[412];
        let eIm398 = out512[413];
        let resIm398_s = eIm398 + (oRe398 * tRe386 + oIm398 * tRe398);
        out512[413] = resIm398_s;
        out512[485] = -resIm398_s;
        let resRe398_s = eRe398 + (oRe398 * tRe398 - oIm398 * tRe386);
        out512[484] = resRe398_s;
        out512[412] = resRe398_s;
        let resRe402_s = eRe398 - (oRe398 * tRe398 - oIm398 * tRe386);
        out512[476] = resRe402_s;
        out512[420] = resRe402_s;
        let resIm402_s = -eIm398 + (oRe398 * tRe386 + oIm398 * tRe398);
        out512[421] = resIm402_s;
        out512[477] = -resIm402_s;
        
        let oRe399 = out512[478];
        let oIm399 = out512[479];
        let eRe399 = out512[414];
        let eIm399 = out512[415];
        let resIm399_s = eIm399 + (oRe399 * tRe385 + oIm399 * tRe399);
        out512[415] = resIm399_s;
        out512[483] = -resIm399_s;
        let resRe399_s = eRe399 + (oRe399 * tRe399 - oIm399 * tRe385);
        out512[482] = resRe399_s;
        out512[414] = resRe399_s;
        let resRe401_s = eRe399 - (oRe399 * tRe399 - oIm399 * tRe385);
        out512[478] = resRe401_s;
        out512[418] = resRe401_s;
        let resIm401_s = -eIm399 + (oRe399 * tRe385 + oIm399 * tRe399);
        out512[419] = resIm401_s;
        out512[479] = -resIm401_s;
        
        let oRe400 = out512[480];
        let oIm400 = out512[481];
        let eRe400 = out512[416];
        let eIm400 = out512[417];
        let resIm400_s = eIm400 + oRe400;
        out512[417] = resIm400_s;
        out512[481] = -resIm400_s;
        let resRe400_s = eRe400 - oIm400;
        out512[480] = resRe400_s;
        out512[416] = resRe400_s;
        
        let oRe512 = out512[576];
        let oIm512 = out512[577];
        let eRe512 = out512[512];
        let eIm512 = out512[513];
        let resRe512_s = eRe512 + oRe512;
        out512[512] = resRe512_s;
        let resIm512_s = eIm512 + oIm512;
        out512[513] = resIm512_s;
        let resRe512_d = eRe512 - oRe512;
        out512[576] = resRe512_d;
        let resIm512_d = eIm512 - oIm512;
        out512[577] = resIm512_d;
        
        let oRe513 = out512[578];
        let oIm513 = out512[579];
        let eRe513 = out512[514];
        let eIm513 = out512[515];
        let tRe513 = 0.9951847195625305;
        let tRe527 = 0.0980171337723732;
        let resIm513_s = eIm513 + (oRe513 * tRe527 + oIm513 * tRe513);
        out512[515] = resIm513_s;
        out512[639] = -resIm513_s;
        let resRe513_s = eRe513 + (oRe513 * tRe513 - oIm513 * tRe527);
        out512[638] = resRe513_s;
        out512[514] = resRe513_s;
        let resRe543_s = eRe513 - (oRe513 * tRe513 - oIm513 * tRe527);
        out512[578] = resRe543_s;
        out512[574] = resRe543_s;
        let resIm543_s = -eIm513 + (oRe513 * tRe527 + oIm513 * tRe513);
        out512[575] = resIm543_s;
        out512[579] = -resIm543_s;
        
        let oRe514 = out512[580];
        let oIm514 = out512[581];
        let eRe514 = out512[516];
        let eIm514 = out512[517];
        let tRe514 = 0.9807852506637573;
        let tRe526 = 0.1950903534889221;
        let resIm514_s = eIm514 + (oRe514 * tRe526 + oIm514 * tRe514);
        out512[517] = resIm514_s;
        out512[637] = -resIm514_s;
        let resRe514_s = eRe514 + (oRe514 * tRe514 - oIm514 * tRe526);
        out512[636] = resRe514_s;
        out512[516] = resRe514_s;
        let resRe542_s = eRe514 - (oRe514 * tRe514 - oIm514 * tRe526);
        out512[580] = resRe542_s;
        out512[572] = resRe542_s;
        let resIm542_s = -eIm514 + (oRe514 * tRe526 + oIm514 * tRe514);
        out512[573] = resIm542_s;
        out512[581] = -resIm542_s;
        
        let oRe515 = out512[582];
        let oIm515 = out512[583];
        let eRe515 = out512[518];
        let eIm515 = out512[519];
        let tRe515 = 0.9569403529167175;
        let tRe525 = 0.2902846336364746;
        let resIm515_s = eIm515 + (oRe515 * tRe525 + oIm515 * tRe515);
        out512[519] = resIm515_s;
        out512[635] = -resIm515_s;
        let resRe515_s = eRe515 + (oRe515 * tRe515 - oIm515 * tRe525);
        out512[634] = resRe515_s;
        out512[518] = resRe515_s;
        let resRe541_s = eRe515 - (oRe515 * tRe515 - oIm515 * tRe525);
        out512[582] = resRe541_s;
        out512[570] = resRe541_s;
        let resIm541_s = -eIm515 + (oRe515 * tRe525 + oIm515 * tRe515);
        out512[571] = resIm541_s;
        out512[583] = -resIm541_s;
        
        let oRe516 = out512[584];
        let oIm516 = out512[585];
        let eRe516 = out512[520];
        let eIm516 = out512[521];
        let tRe516 = 0.9238795042037964;
        let tRe524 = 0.3826834261417389;
        let resIm516_s = eIm516 + (oRe516 * tRe524 + oIm516 * tRe516);
        out512[521] = resIm516_s;
        out512[633] = -resIm516_s;
        let resRe516_s = eRe516 + (oRe516 * tRe516 - oIm516 * tRe524);
        out512[632] = resRe516_s;
        out512[520] = resRe516_s;
        let resRe540_s = eRe516 - (oRe516 * tRe516 - oIm516 * tRe524);
        out512[584] = resRe540_s;
        out512[568] = resRe540_s;
        let resIm540_s = -eIm516 + (oRe516 * tRe524 + oIm516 * tRe516);
        out512[569] = resIm540_s;
        out512[585] = -resIm540_s;
        
        let oRe517 = out512[586];
        let oIm517 = out512[587];
        let eRe517 = out512[522];
        let eIm517 = out512[523];
        let tRe517 = 0.8819212913513184;
        let tRe523 = 0.4713967740535736;
        let resIm517_s = eIm517 + (oRe517 * tRe523 + oIm517 * tRe517);
        out512[523] = resIm517_s;
        out512[631] = -resIm517_s;
        let resRe517_s = eRe517 + (oRe517 * tRe517 - oIm517 * tRe523);
        out512[630] = resRe517_s;
        out512[522] = resRe517_s;
        let resRe539_s = eRe517 - (oRe517 * tRe517 - oIm517 * tRe523);
        out512[586] = resRe539_s;
        out512[566] = resRe539_s;
        let resIm539_s = -eIm517 + (oRe517 * tRe523 + oIm517 * tRe517);
        out512[567] = resIm539_s;
        out512[587] = -resIm539_s;
        
        let oRe518 = out512[588];
        let oIm518 = out512[589];
        let eRe518 = out512[524];
        let eIm518 = out512[525];
        let tRe518 = 0.8314695954322815;
        let tRe522 = 0.5555702447891235;
        let resIm518_s = eIm518 + (oRe518 * tRe522 + oIm518 * tRe518);
        out512[525] = resIm518_s;
        out512[629] = -resIm518_s;
        let resRe518_s = eRe518 + (oRe518 * tRe518 - oIm518 * tRe522);
        out512[628] = resRe518_s;
        out512[524] = resRe518_s;
        let resRe538_s = eRe518 - (oRe518 * tRe518 - oIm518 * tRe522);
        out512[588] = resRe538_s;
        out512[564] = resRe538_s;
        let resIm538_s = -eIm518 + (oRe518 * tRe522 + oIm518 * tRe518);
        out512[565] = resIm538_s;
        out512[589] = -resIm538_s;
        
        let oRe519 = out512[590];
        let oIm519 = out512[591];
        let eRe519 = out512[526];
        let eIm519 = out512[527];
        let tRe519 = 0.7730104923248291;
        let tRe521 = 0.6343932747840881;
        let resIm519_s = eIm519 + (oRe519 * tRe521 + oIm519 * tRe519);
        out512[527] = resIm519_s;
        out512[627] = -resIm519_s;
        let resRe519_s = eRe519 + (oRe519 * tRe519 - oIm519 * tRe521);
        out512[626] = resRe519_s;
        out512[526] = resRe519_s;
        let resRe537_s = eRe519 - (oRe519 * tRe519 - oIm519 * tRe521);
        out512[590] = resRe537_s;
        out512[562] = resRe537_s;
        let resIm537_s = -eIm519 + (oRe519 * tRe521 + oIm519 * tRe519);
        out512[563] = resIm537_s;
        out512[591] = -resIm537_s;
        
        let oRe520 = out512[592];
        let oIm520 = out512[593];
        let eRe520 = out512[528];
        let eIm520 = out512[529];
        let tRe520 = 0.7071067690849304;
        let resIm520_s = eIm520 + (oRe520 * tRe520 + oIm520 * tRe520);
        out512[529] = resIm520_s;
        out512[625] = -resIm520_s;
        let resRe520_s = eRe520 + (oRe520 * tRe520 - oIm520 * tRe520);
        out512[624] = resRe520_s;
        out512[528] = resRe520_s;
        let resRe536_s = eRe520 - (oRe520 * tRe520 - oIm520 * tRe520);
        out512[592] = resRe536_s;
        out512[560] = resRe536_s;
        let resIm536_s = -eIm520 + (oRe520 * tRe520 + oIm520 * tRe520);
        out512[561] = resIm536_s;
        out512[593] = -resIm536_s;
        
        let oRe521 = out512[594];
        let oIm521 = out512[595];
        let eRe521 = out512[530];
        let eIm521 = out512[531];
        let resIm521_s = eIm521 + (oRe521 * tRe519 + oIm521 * tRe521);
        out512[531] = resIm521_s;
        out512[623] = -resIm521_s;
        let resRe521_s = eRe521 + (oRe521 * tRe521 - oIm521 * tRe519);
        out512[622] = resRe521_s;
        out512[530] = resRe521_s;
        let resRe535_s = eRe521 - (oRe521 * tRe521 - oIm521 * tRe519);
        out512[594] = resRe535_s;
        out512[558] = resRe535_s;
        let resIm535_s = -eIm521 + (oRe521 * tRe519 + oIm521 * tRe521);
        out512[559] = resIm535_s;
        out512[595] = -resIm535_s;
        
        let oRe522 = out512[596];
        let oIm522 = out512[597];
        let eRe522 = out512[532];
        let eIm522 = out512[533];
        let resIm522_s = eIm522 + (oRe522 * tRe518 + oIm522 * tRe522);
        out512[533] = resIm522_s;
        out512[621] = -resIm522_s;
        let resRe522_s = eRe522 + (oRe522 * tRe522 - oIm522 * tRe518);
        out512[620] = resRe522_s;
        out512[532] = resRe522_s;
        let resRe534_s = eRe522 - (oRe522 * tRe522 - oIm522 * tRe518);
        out512[596] = resRe534_s;
        out512[556] = resRe534_s;
        let resIm534_s = -eIm522 + (oRe522 * tRe518 + oIm522 * tRe522);
        out512[557] = resIm534_s;
        out512[597] = -resIm534_s;
        
        let oRe523 = out512[598];
        let oIm523 = out512[599];
        let eRe523 = out512[534];
        let eIm523 = out512[535];
        let resIm523_s = eIm523 + (oRe523 * tRe517 + oIm523 * tRe523);
        out512[535] = resIm523_s;
        out512[619] = -resIm523_s;
        let resRe523_s = eRe523 + (oRe523 * tRe523 - oIm523 * tRe517);
        out512[618] = resRe523_s;
        out512[534] = resRe523_s;
        let resRe533_s = eRe523 - (oRe523 * tRe523 - oIm523 * tRe517);
        out512[598] = resRe533_s;
        out512[554] = resRe533_s;
        let resIm533_s = -eIm523 + (oRe523 * tRe517 + oIm523 * tRe523);
        out512[555] = resIm533_s;
        out512[599] = -resIm533_s;
        
        let oRe524 = out512[600];
        let oIm524 = out512[601];
        let eRe524 = out512[536];
        let eIm524 = out512[537];
        let resIm524_s = eIm524 + (oRe524 * tRe516 + oIm524 * tRe524);
        out512[537] = resIm524_s;
        out512[617] = -resIm524_s;
        let resRe524_s = eRe524 + (oRe524 * tRe524 - oIm524 * tRe516);
        out512[616] = resRe524_s;
        out512[536] = resRe524_s;
        let resRe532_s = eRe524 - (oRe524 * tRe524 - oIm524 * tRe516);
        out512[600] = resRe532_s;
        out512[552] = resRe532_s;
        let resIm532_s = -eIm524 + (oRe524 * tRe516 + oIm524 * tRe524);
        out512[553] = resIm532_s;
        out512[601] = -resIm532_s;
        
        let oRe525 = out512[602];
        let oIm525 = out512[603];
        let eRe525 = out512[538];
        let eIm525 = out512[539];
        let resIm525_s = eIm525 + (oRe525 * tRe515 + oIm525 * tRe525);
        out512[539] = resIm525_s;
        out512[615] = -resIm525_s;
        let resRe525_s = eRe525 + (oRe525 * tRe525 - oIm525 * tRe515);
        out512[614] = resRe525_s;
        out512[538] = resRe525_s;
        let resRe531_s = eRe525 - (oRe525 * tRe525 - oIm525 * tRe515);
        out512[602] = resRe531_s;
        out512[550] = resRe531_s;
        let resIm531_s = -eIm525 + (oRe525 * tRe515 + oIm525 * tRe525);
        out512[551] = resIm531_s;
        out512[603] = -resIm531_s;
        
        let oRe526 = out512[604];
        let oIm526 = out512[605];
        let eRe526 = out512[540];
        let eIm526 = out512[541];
        let resIm526_s = eIm526 + (oRe526 * tRe514 + oIm526 * tRe526);
        out512[541] = resIm526_s;
        out512[613] = -resIm526_s;
        let resRe526_s = eRe526 + (oRe526 * tRe526 - oIm526 * tRe514);
        out512[612] = resRe526_s;
        out512[540] = resRe526_s;
        let resRe530_s = eRe526 - (oRe526 * tRe526 - oIm526 * tRe514);
        out512[604] = resRe530_s;
        out512[548] = resRe530_s;
        let resIm530_s = -eIm526 + (oRe526 * tRe514 + oIm526 * tRe526);
        out512[549] = resIm530_s;
        out512[605] = -resIm530_s;
        
        let oRe527 = out512[606];
        let oIm527 = out512[607];
        let eRe527 = out512[542];
        let eIm527 = out512[543];
        let resIm527_s = eIm527 + (oRe527 * tRe513 + oIm527 * tRe527);
        out512[543] = resIm527_s;
        out512[611] = -resIm527_s;
        let resRe527_s = eRe527 + (oRe527 * tRe527 - oIm527 * tRe513);
        out512[610] = resRe527_s;
        out512[542] = resRe527_s;
        let resRe529_s = eRe527 - (oRe527 * tRe527 - oIm527 * tRe513);
        out512[606] = resRe529_s;
        out512[546] = resRe529_s;
        let resIm529_s = -eIm527 + (oRe527 * tRe513 + oIm527 * tRe527);
        out512[547] = resIm529_s;
        out512[607] = -resIm529_s;
        
        let oRe528 = out512[608];
        let oIm528 = out512[609];
        let eRe528 = out512[544];
        let eIm528 = out512[545];
        let resIm528_s = eIm528 + oRe528;
        out512[545] = resIm528_s;
        out512[609] = -resIm528_s;
        let resRe528_s = eRe528 - oIm528;
        out512[608] = resRe528_s;
        out512[544] = resRe528_s;
        
        let oRe640 = out512[704];
        let oIm640 = out512[705];
        let eRe640 = out512[640];
        let eIm640 = out512[641];
        let resRe640_s = eRe640 + oRe640;
        out512[640] = resRe640_s;
        let resIm640_s = eIm640 + oIm640;
        out512[641] = resIm640_s;
        let resRe640_d = eRe640 - oRe640;
        out512[704] = resRe640_d;
        let resIm640_d = eIm640 - oIm640;
        out512[705] = resIm640_d;
        
        let oRe641 = out512[706];
        let oIm641 = out512[707];
        let eRe641 = out512[642];
        let eIm641 = out512[643];
        let tRe641 = 0.9951847195625305;
        let tRe655 = 0.0980171337723732;
        let resIm641_s = eIm641 + (oRe641 * tRe655 + oIm641 * tRe641);
        out512[643] = resIm641_s;
        out512[767] = -resIm641_s;
        let resRe641_s = eRe641 + (oRe641 * tRe641 - oIm641 * tRe655);
        out512[766] = resRe641_s;
        out512[642] = resRe641_s;
        let resRe671_s = eRe641 - (oRe641 * tRe641 - oIm641 * tRe655);
        out512[706] = resRe671_s;
        out512[702] = resRe671_s;
        let resIm671_s = -eIm641 + (oRe641 * tRe655 + oIm641 * tRe641);
        out512[703] = resIm671_s;
        out512[707] = -resIm671_s;
        
        let oRe642 = out512[708];
        let oIm642 = out512[709];
        let eRe642 = out512[644];
        let eIm642 = out512[645];
        let tRe642 = 0.9807852506637573;
        let tRe654 = 0.1950903534889221;
        let resIm642_s = eIm642 + (oRe642 * tRe654 + oIm642 * tRe642);
        out512[645] = resIm642_s;
        out512[765] = -resIm642_s;
        let resRe642_s = eRe642 + (oRe642 * tRe642 - oIm642 * tRe654);
        out512[764] = resRe642_s;
        out512[644] = resRe642_s;
        let resRe670_s = eRe642 - (oRe642 * tRe642 - oIm642 * tRe654);
        out512[708] = resRe670_s;
        out512[700] = resRe670_s;
        let resIm670_s = -eIm642 + (oRe642 * tRe654 + oIm642 * tRe642);
        out512[701] = resIm670_s;
        out512[709] = -resIm670_s;
        
        let oRe643 = out512[710];
        let oIm643 = out512[711];
        let eRe643 = out512[646];
        let eIm643 = out512[647];
        let tRe643 = 0.9569403529167175;
        let tRe653 = 0.2902846336364746;
        let resIm643_s = eIm643 + (oRe643 * tRe653 + oIm643 * tRe643);
        out512[647] = resIm643_s;
        out512[763] = -resIm643_s;
        let resRe643_s = eRe643 + (oRe643 * tRe643 - oIm643 * tRe653);
        out512[762] = resRe643_s;
        out512[646] = resRe643_s;
        let resRe669_s = eRe643 - (oRe643 * tRe643 - oIm643 * tRe653);
        out512[710] = resRe669_s;
        out512[698] = resRe669_s;
        let resIm669_s = -eIm643 + (oRe643 * tRe653 + oIm643 * tRe643);
        out512[699] = resIm669_s;
        out512[711] = -resIm669_s;
        
        let oRe644 = out512[712];
        let oIm644 = out512[713];
        let eRe644 = out512[648];
        let eIm644 = out512[649];
        let tRe644 = 0.9238795042037964;
        let tRe652 = 0.3826834261417389;
        let resIm644_s = eIm644 + (oRe644 * tRe652 + oIm644 * tRe644);
        out512[649] = resIm644_s;
        out512[761] = -resIm644_s;
        let resRe644_s = eRe644 + (oRe644 * tRe644 - oIm644 * tRe652);
        out512[760] = resRe644_s;
        out512[648] = resRe644_s;
        let resRe668_s = eRe644 - (oRe644 * tRe644 - oIm644 * tRe652);
        out512[712] = resRe668_s;
        out512[696] = resRe668_s;
        let resIm668_s = -eIm644 + (oRe644 * tRe652 + oIm644 * tRe644);
        out512[697] = resIm668_s;
        out512[713] = -resIm668_s;
        
        let oRe645 = out512[714];
        let oIm645 = out512[715];
        let eRe645 = out512[650];
        let eIm645 = out512[651];
        let tRe645 = 0.8819212913513184;
        let tRe651 = 0.4713967740535736;
        let resIm645_s = eIm645 + (oRe645 * tRe651 + oIm645 * tRe645);
        out512[651] = resIm645_s;
        out512[759] = -resIm645_s;
        let resRe645_s = eRe645 + (oRe645 * tRe645 - oIm645 * tRe651);
        out512[758] = resRe645_s;
        out512[650] = resRe645_s;
        let resRe667_s = eRe645 - (oRe645 * tRe645 - oIm645 * tRe651);
        out512[714] = resRe667_s;
        out512[694] = resRe667_s;
        let resIm667_s = -eIm645 + (oRe645 * tRe651 + oIm645 * tRe645);
        out512[695] = resIm667_s;
        out512[715] = -resIm667_s;
        
        let oRe646 = out512[716];
        let oIm646 = out512[717];
        let eRe646 = out512[652];
        let eIm646 = out512[653];
        let tRe646 = 0.8314695954322815;
        let tRe650 = 0.5555702447891235;
        let resIm646_s = eIm646 + (oRe646 * tRe650 + oIm646 * tRe646);
        out512[653] = resIm646_s;
        out512[757] = -resIm646_s;
        let resRe646_s = eRe646 + (oRe646 * tRe646 - oIm646 * tRe650);
        out512[756] = resRe646_s;
        out512[652] = resRe646_s;
        let resRe666_s = eRe646 - (oRe646 * tRe646 - oIm646 * tRe650);
        out512[716] = resRe666_s;
        out512[692] = resRe666_s;
        let resIm666_s = -eIm646 + (oRe646 * tRe650 + oIm646 * tRe646);
        out512[693] = resIm666_s;
        out512[717] = -resIm666_s;
        
        let oRe647 = out512[718];
        let oIm647 = out512[719];
        let eRe647 = out512[654];
        let eIm647 = out512[655];
        let tRe647 = 0.7730104923248291;
        let tRe649 = 0.6343932747840881;
        let resIm647_s = eIm647 + (oRe647 * tRe649 + oIm647 * tRe647);
        out512[655] = resIm647_s;
        out512[755] = -resIm647_s;
        let resRe647_s = eRe647 + (oRe647 * tRe647 - oIm647 * tRe649);
        out512[754] = resRe647_s;
        out512[654] = resRe647_s;
        let resRe665_s = eRe647 - (oRe647 * tRe647 - oIm647 * tRe649);
        out512[718] = resRe665_s;
        out512[690] = resRe665_s;
        let resIm665_s = -eIm647 + (oRe647 * tRe649 + oIm647 * tRe647);
        out512[691] = resIm665_s;
        out512[719] = -resIm665_s;
        
        let oRe648 = out512[720];
        let oIm648 = out512[721];
        let eRe648 = out512[656];
        let eIm648 = out512[657];
        let tRe648 = 0.7071067690849304;
        let resIm648_s = eIm648 + (oRe648 * tRe648 + oIm648 * tRe648);
        out512[657] = resIm648_s;
        out512[753] = -resIm648_s;
        let resRe648_s = eRe648 + (oRe648 * tRe648 - oIm648 * tRe648);
        out512[752] = resRe648_s;
        out512[656] = resRe648_s;
        let resRe664_s = eRe648 - (oRe648 * tRe648 - oIm648 * tRe648);
        out512[720] = resRe664_s;
        out512[688] = resRe664_s;
        let resIm664_s = -eIm648 + (oRe648 * tRe648 + oIm648 * tRe648);
        out512[689] = resIm664_s;
        out512[721] = -resIm664_s;
        
        let oRe649 = out512[722];
        let oIm649 = out512[723];
        let eRe649 = out512[658];
        let eIm649 = out512[659];
        let resIm649_s = eIm649 + (oRe649 * tRe647 + oIm649 * tRe649);
        out512[659] = resIm649_s;
        out512[751] = -resIm649_s;
        let resRe649_s = eRe649 + (oRe649 * tRe649 - oIm649 * tRe647);
        out512[750] = resRe649_s;
        out512[658] = resRe649_s;
        let resRe663_s = eRe649 - (oRe649 * tRe649 - oIm649 * tRe647);
        out512[722] = resRe663_s;
        out512[686] = resRe663_s;
        let resIm663_s = -eIm649 + (oRe649 * tRe647 + oIm649 * tRe649);
        out512[687] = resIm663_s;
        out512[723] = -resIm663_s;
        
        let oRe650 = out512[724];
        let oIm650 = out512[725];
        let eRe650 = out512[660];
        let eIm650 = out512[661];
        let resIm650_s = eIm650 + (oRe650 * tRe646 + oIm650 * tRe650);
        out512[661] = resIm650_s;
        out512[749] = -resIm650_s;
        let resRe650_s = eRe650 + (oRe650 * tRe650 - oIm650 * tRe646);
        out512[748] = resRe650_s;
        out512[660] = resRe650_s;
        let resRe662_s = eRe650 - (oRe650 * tRe650 - oIm650 * tRe646);
        out512[724] = resRe662_s;
        out512[684] = resRe662_s;
        let resIm662_s = -eIm650 + (oRe650 * tRe646 + oIm650 * tRe650);
        out512[685] = resIm662_s;
        out512[725] = -resIm662_s;
        
        let oRe651 = out512[726];
        let oIm651 = out512[727];
        let eRe651 = out512[662];
        let eIm651 = out512[663];
        let resIm651_s = eIm651 + (oRe651 * tRe645 + oIm651 * tRe651);
        out512[663] = resIm651_s;
        out512[747] = -resIm651_s;
        let resRe651_s = eRe651 + (oRe651 * tRe651 - oIm651 * tRe645);
        out512[746] = resRe651_s;
        out512[662] = resRe651_s;
        let resRe661_s = eRe651 - (oRe651 * tRe651 - oIm651 * tRe645);
        out512[726] = resRe661_s;
        out512[682] = resRe661_s;
        let resIm661_s = -eIm651 + (oRe651 * tRe645 + oIm651 * tRe651);
        out512[683] = resIm661_s;
        out512[727] = -resIm661_s;
        
        let oRe652 = out512[728];
        let oIm652 = out512[729];
        let eRe652 = out512[664];
        let eIm652 = out512[665];
        let resIm652_s = eIm652 + (oRe652 * tRe644 + oIm652 * tRe652);
        out512[665] = resIm652_s;
        out512[745] = -resIm652_s;
        let resRe652_s = eRe652 + (oRe652 * tRe652 - oIm652 * tRe644);
        out512[744] = resRe652_s;
        out512[664] = resRe652_s;
        let resRe660_s = eRe652 - (oRe652 * tRe652 - oIm652 * tRe644);
        out512[728] = resRe660_s;
        out512[680] = resRe660_s;
        let resIm660_s = -eIm652 + (oRe652 * tRe644 + oIm652 * tRe652);
        out512[681] = resIm660_s;
        out512[729] = -resIm660_s;
        
        let oRe653 = out512[730];
        let oIm653 = out512[731];
        let eRe653 = out512[666];
        let eIm653 = out512[667];
        let resIm653_s = eIm653 + (oRe653 * tRe643 + oIm653 * tRe653);
        out512[667] = resIm653_s;
        out512[743] = -resIm653_s;
        let resRe653_s = eRe653 + (oRe653 * tRe653 - oIm653 * tRe643);
        out512[742] = resRe653_s;
        out512[666] = resRe653_s;
        let resRe659_s = eRe653 - (oRe653 * tRe653 - oIm653 * tRe643);
        out512[730] = resRe659_s;
        out512[678] = resRe659_s;
        let resIm659_s = -eIm653 + (oRe653 * tRe643 + oIm653 * tRe653);
        out512[679] = resIm659_s;
        out512[731] = -resIm659_s;
        
        let oRe654 = out512[732];
        let oIm654 = out512[733];
        let eRe654 = out512[668];
        let eIm654 = out512[669];
        let resIm654_s = eIm654 + (oRe654 * tRe642 + oIm654 * tRe654);
        out512[669] = resIm654_s;
        out512[741] = -resIm654_s;
        let resRe654_s = eRe654 + (oRe654 * tRe654 - oIm654 * tRe642);
        out512[740] = resRe654_s;
        out512[668] = resRe654_s;
        let resRe658_s = eRe654 - (oRe654 * tRe654 - oIm654 * tRe642);
        out512[732] = resRe658_s;
        out512[676] = resRe658_s;
        let resIm658_s = -eIm654 + (oRe654 * tRe642 + oIm654 * tRe654);
        out512[677] = resIm658_s;
        out512[733] = -resIm658_s;
        
        let oRe655 = out512[734];
        let oIm655 = out512[735];
        let eRe655 = out512[670];
        let eIm655 = out512[671];
        let resIm655_s = eIm655 + (oRe655 * tRe641 + oIm655 * tRe655);
        out512[671] = resIm655_s;
        out512[739] = -resIm655_s;
        let resRe655_s = eRe655 + (oRe655 * tRe655 - oIm655 * tRe641);
        out512[738] = resRe655_s;
        out512[670] = resRe655_s;
        let resRe657_s = eRe655 - (oRe655 * tRe655 - oIm655 * tRe641);
        out512[734] = resRe657_s;
        out512[674] = resRe657_s;
        let resIm657_s = -eIm655 + (oRe655 * tRe641 + oIm655 * tRe655);
        out512[675] = resIm657_s;
        out512[735] = -resIm657_s;
        
        let oRe656 = out512[736];
        let oIm656 = out512[737];
        let eRe656 = out512[672];
        let eIm656 = out512[673];
        let resIm656_s = eIm656 + oRe656;
        out512[673] = resIm656_s;
        out512[737] = -resIm656_s;
        let resRe656_s = eRe656 - oIm656;
        out512[736] = resRe656_s;
        out512[672] = resRe656_s;
        
        let oRe768 = out512[832];
        let oIm768 = out512[833];
        let eRe768 = out512[768];
        let eIm768 = out512[769];
        let resRe768_s = eRe768 + oRe768;
        out512[768] = resRe768_s;
        let resIm768_s = eIm768 + oIm768;
        out512[769] = resIm768_s;
        let resRe768_d = eRe768 - oRe768;
        out512[832] = resRe768_d;
        let resIm768_d = eIm768 - oIm768;
        out512[833] = resIm768_d;
        
        let oRe769 = out512[834];
        let oIm769 = out512[835];
        let eRe769 = out512[770];
        let eIm769 = out512[771];
        let tRe769 = 0.9951847195625305;
        let tRe783 = 0.0980171337723732;
        let resIm769_s = eIm769 + (oRe769 * tRe783 + oIm769 * tRe769);
        out512[771] = resIm769_s;
        out512[895] = -resIm769_s;
        let resRe769_s = eRe769 + (oRe769 * tRe769 - oIm769 * tRe783);
        out512[894] = resRe769_s;
        out512[770] = resRe769_s;
        let resRe799_s = eRe769 - (oRe769 * tRe769 - oIm769 * tRe783);
        out512[834] = resRe799_s;
        out512[830] = resRe799_s;
        let resIm799_s = -eIm769 + (oRe769 * tRe783 + oIm769 * tRe769);
        out512[831] = resIm799_s;
        out512[835] = -resIm799_s;
        
        let oRe770 = out512[836];
        let oIm770 = out512[837];
        let eRe770 = out512[772];
        let eIm770 = out512[773];
        let tRe770 = 0.9807852506637573;
        let tRe782 = 0.1950903534889221;
        let resIm770_s = eIm770 + (oRe770 * tRe782 + oIm770 * tRe770);
        out512[773] = resIm770_s;
        out512[893] = -resIm770_s;
        let resRe770_s = eRe770 + (oRe770 * tRe770 - oIm770 * tRe782);
        out512[892] = resRe770_s;
        out512[772] = resRe770_s;
        let resRe798_s = eRe770 - (oRe770 * tRe770 - oIm770 * tRe782);
        out512[836] = resRe798_s;
        out512[828] = resRe798_s;
        let resIm798_s = -eIm770 + (oRe770 * tRe782 + oIm770 * tRe770);
        out512[829] = resIm798_s;
        out512[837] = -resIm798_s;
        
        let oRe771 = out512[838];
        let oIm771 = out512[839];
        let eRe771 = out512[774];
        let eIm771 = out512[775];
        let tRe771 = 0.9569403529167175;
        let tRe781 = 0.2902846336364746;
        let resIm771_s = eIm771 + (oRe771 * tRe781 + oIm771 * tRe771);
        out512[775] = resIm771_s;
        out512[891] = -resIm771_s;
        let resRe771_s = eRe771 + (oRe771 * tRe771 - oIm771 * tRe781);
        out512[890] = resRe771_s;
        out512[774] = resRe771_s;
        let resRe797_s = eRe771 - (oRe771 * tRe771 - oIm771 * tRe781);
        out512[838] = resRe797_s;
        out512[826] = resRe797_s;
        let resIm797_s = -eIm771 + (oRe771 * tRe781 + oIm771 * tRe771);
        out512[827] = resIm797_s;
        out512[839] = -resIm797_s;
        
        let oRe772 = out512[840];
        let oIm772 = out512[841];
        let eRe772 = out512[776];
        let eIm772 = out512[777];
        let tRe772 = 0.9238795042037964;
        let tRe780 = 0.3826834261417389;
        let resIm772_s = eIm772 + (oRe772 * tRe780 + oIm772 * tRe772);
        out512[777] = resIm772_s;
        out512[889] = -resIm772_s;
        let resRe772_s = eRe772 + (oRe772 * tRe772 - oIm772 * tRe780);
        out512[888] = resRe772_s;
        out512[776] = resRe772_s;
        let resRe796_s = eRe772 - (oRe772 * tRe772 - oIm772 * tRe780);
        out512[840] = resRe796_s;
        out512[824] = resRe796_s;
        let resIm796_s = -eIm772 + (oRe772 * tRe780 + oIm772 * tRe772);
        out512[825] = resIm796_s;
        out512[841] = -resIm796_s;
        
        let oRe773 = out512[842];
        let oIm773 = out512[843];
        let eRe773 = out512[778];
        let eIm773 = out512[779];
        let tRe773 = 0.8819212913513184;
        let tRe779 = 0.4713967740535736;
        let resIm773_s = eIm773 + (oRe773 * tRe779 + oIm773 * tRe773);
        out512[779] = resIm773_s;
        out512[887] = -resIm773_s;
        let resRe773_s = eRe773 + (oRe773 * tRe773 - oIm773 * tRe779);
        out512[886] = resRe773_s;
        out512[778] = resRe773_s;
        let resRe795_s = eRe773 - (oRe773 * tRe773 - oIm773 * tRe779);
        out512[842] = resRe795_s;
        out512[822] = resRe795_s;
        let resIm795_s = -eIm773 + (oRe773 * tRe779 + oIm773 * tRe773);
        out512[823] = resIm795_s;
        out512[843] = -resIm795_s;
        
        let oRe774 = out512[844];
        let oIm774 = out512[845];
        let eRe774 = out512[780];
        let eIm774 = out512[781];
        let tRe774 = 0.8314695954322815;
        let tRe778 = 0.5555702447891235;
        let resIm774_s = eIm774 + (oRe774 * tRe778 + oIm774 * tRe774);
        out512[781] = resIm774_s;
        out512[885] = -resIm774_s;
        let resRe774_s = eRe774 + (oRe774 * tRe774 - oIm774 * tRe778);
        out512[884] = resRe774_s;
        out512[780] = resRe774_s;
        let resRe794_s = eRe774 - (oRe774 * tRe774 - oIm774 * tRe778);
        out512[844] = resRe794_s;
        out512[820] = resRe794_s;
        let resIm794_s = -eIm774 + (oRe774 * tRe778 + oIm774 * tRe774);
        out512[821] = resIm794_s;
        out512[845] = -resIm794_s;
        
        let oRe775 = out512[846];
        let oIm775 = out512[847];
        let eRe775 = out512[782];
        let eIm775 = out512[783];
        let tRe775 = 0.7730104923248291;
        let tRe777 = 0.6343932747840881;
        let resIm775_s = eIm775 + (oRe775 * tRe777 + oIm775 * tRe775);
        out512[783] = resIm775_s;
        out512[883] = -resIm775_s;
        let resRe775_s = eRe775 + (oRe775 * tRe775 - oIm775 * tRe777);
        out512[882] = resRe775_s;
        out512[782] = resRe775_s;
        let resRe793_s = eRe775 - (oRe775 * tRe775 - oIm775 * tRe777);
        out512[846] = resRe793_s;
        out512[818] = resRe793_s;
        let resIm793_s = -eIm775 + (oRe775 * tRe777 + oIm775 * tRe775);
        out512[819] = resIm793_s;
        out512[847] = -resIm793_s;
        
        let oRe776 = out512[848];
        let oIm776 = out512[849];
        let eRe776 = out512[784];
        let eIm776 = out512[785];
        let tRe776 = 0.7071067690849304;
        let resIm776_s = eIm776 + (oRe776 * tRe776 + oIm776 * tRe776);
        out512[785] = resIm776_s;
        out512[881] = -resIm776_s;
        let resRe776_s = eRe776 + (oRe776 * tRe776 - oIm776 * tRe776);
        out512[880] = resRe776_s;
        out512[784] = resRe776_s;
        let resRe792_s = eRe776 - (oRe776 * tRe776 - oIm776 * tRe776);
        out512[848] = resRe792_s;
        out512[816] = resRe792_s;
        let resIm792_s = -eIm776 + (oRe776 * tRe776 + oIm776 * tRe776);
        out512[817] = resIm792_s;
        out512[849] = -resIm792_s;
        
        let oRe777 = out512[850];
        let oIm777 = out512[851];
        let eRe777 = out512[786];
        let eIm777 = out512[787];
        let resIm777_s = eIm777 + (oRe777 * tRe775 + oIm777 * tRe777);
        out512[787] = resIm777_s;
        out512[879] = -resIm777_s;
        let resRe777_s = eRe777 + (oRe777 * tRe777 - oIm777 * tRe775);
        out512[878] = resRe777_s;
        out512[786] = resRe777_s;
        let resRe791_s = eRe777 - (oRe777 * tRe777 - oIm777 * tRe775);
        out512[850] = resRe791_s;
        out512[814] = resRe791_s;
        let resIm791_s = -eIm777 + (oRe777 * tRe775 + oIm777 * tRe777);
        out512[815] = resIm791_s;
        out512[851] = -resIm791_s;
        
        let oRe778 = out512[852];
        let oIm778 = out512[853];
        let eRe778 = out512[788];
        let eIm778 = out512[789];
        let resIm778_s = eIm778 + (oRe778 * tRe774 + oIm778 * tRe778);
        out512[789] = resIm778_s;
        out512[877] = -resIm778_s;
        let resRe778_s = eRe778 + (oRe778 * tRe778 - oIm778 * tRe774);
        out512[876] = resRe778_s;
        out512[788] = resRe778_s;
        let resRe790_s = eRe778 - (oRe778 * tRe778 - oIm778 * tRe774);
        out512[852] = resRe790_s;
        out512[812] = resRe790_s;
        let resIm790_s = -eIm778 + (oRe778 * tRe774 + oIm778 * tRe778);
        out512[813] = resIm790_s;
        out512[853] = -resIm790_s;
        
        let oRe779 = out512[854];
        let oIm779 = out512[855];
        let eRe779 = out512[790];
        let eIm779 = out512[791];
        let resIm779_s = eIm779 + (oRe779 * tRe773 + oIm779 * tRe779);
        out512[791] = resIm779_s;
        out512[875] = -resIm779_s;
        let resRe779_s = eRe779 + (oRe779 * tRe779 - oIm779 * tRe773);
        out512[874] = resRe779_s;
        out512[790] = resRe779_s;
        let resRe789_s = eRe779 - (oRe779 * tRe779 - oIm779 * tRe773);
        out512[854] = resRe789_s;
        out512[810] = resRe789_s;
        let resIm789_s = -eIm779 + (oRe779 * tRe773 + oIm779 * tRe779);
        out512[811] = resIm789_s;
        out512[855] = -resIm789_s;
        
        let oRe780 = out512[856];
        let oIm780 = out512[857];
        let eRe780 = out512[792];
        let eIm780 = out512[793];
        let resIm780_s = eIm780 + (oRe780 * tRe772 + oIm780 * tRe780);
        out512[793] = resIm780_s;
        out512[873] = -resIm780_s;
        let resRe780_s = eRe780 + (oRe780 * tRe780 - oIm780 * tRe772);
        out512[872] = resRe780_s;
        out512[792] = resRe780_s;
        let resRe788_s = eRe780 - (oRe780 * tRe780 - oIm780 * tRe772);
        out512[856] = resRe788_s;
        out512[808] = resRe788_s;
        let resIm788_s = -eIm780 + (oRe780 * tRe772 + oIm780 * tRe780);
        out512[809] = resIm788_s;
        out512[857] = -resIm788_s;
        
        let oRe781 = out512[858];
        let oIm781 = out512[859];
        let eRe781 = out512[794];
        let eIm781 = out512[795];
        let resIm781_s = eIm781 + (oRe781 * tRe771 + oIm781 * tRe781);
        out512[795] = resIm781_s;
        out512[871] = -resIm781_s;
        let resRe781_s = eRe781 + (oRe781 * tRe781 - oIm781 * tRe771);
        out512[870] = resRe781_s;
        out512[794] = resRe781_s;
        let resRe787_s = eRe781 - (oRe781 * tRe781 - oIm781 * tRe771);
        out512[858] = resRe787_s;
        out512[806] = resRe787_s;
        let resIm787_s = -eIm781 + (oRe781 * tRe771 + oIm781 * tRe781);
        out512[807] = resIm787_s;
        out512[859] = -resIm787_s;
        
        let oRe782 = out512[860];
        let oIm782 = out512[861];
        let eRe782 = out512[796];
        let eIm782 = out512[797];
        let resIm782_s = eIm782 + (oRe782 * tRe770 + oIm782 * tRe782);
        out512[797] = resIm782_s;
        out512[869] = -resIm782_s;
        let resRe782_s = eRe782 + (oRe782 * tRe782 - oIm782 * tRe770);
        out512[868] = resRe782_s;
        out512[796] = resRe782_s;
        let resRe786_s = eRe782 - (oRe782 * tRe782 - oIm782 * tRe770);
        out512[860] = resRe786_s;
        out512[804] = resRe786_s;
        let resIm786_s = -eIm782 + (oRe782 * tRe770 + oIm782 * tRe782);
        out512[805] = resIm786_s;
        out512[861] = -resIm786_s;
        
        let oRe783 = out512[862];
        let oIm783 = out512[863];
        let eRe783 = out512[798];
        let eIm783 = out512[799];
        let resIm783_s = eIm783 + (oRe783 * tRe769 + oIm783 * tRe783);
        out512[799] = resIm783_s;
        out512[867] = -resIm783_s;
        let resRe783_s = eRe783 + (oRe783 * tRe783 - oIm783 * tRe769);
        out512[866] = resRe783_s;
        out512[798] = resRe783_s;
        let resRe785_s = eRe783 - (oRe783 * tRe783 - oIm783 * tRe769);
        out512[862] = resRe785_s;
        out512[802] = resRe785_s;
        let resIm785_s = -eIm783 + (oRe783 * tRe769 + oIm783 * tRe783);
        out512[803] = resIm785_s;
        out512[863] = -resIm785_s;
        
        let oRe784 = out512[864];
        let oIm784 = out512[865];
        let eRe784 = out512[800];
        let eIm784 = out512[801];
        let resIm784_s = eIm784 + oRe784;
        out512[801] = resIm784_s;
        out512[865] = -resIm784_s;
        let resRe784_s = eRe784 - oIm784;
        out512[864] = resRe784_s;
        out512[800] = resRe784_s;
        
        let oRe896 = out512[960];
        let oIm896 = out512[961];
        let eRe896 = out512[896];
        let eIm896 = out512[897];
        let resRe896_s = eRe896 + oRe896;
        out512[896] = resRe896_s;
        let resIm896_s = eIm896 + oIm896;
        out512[897] = resIm896_s;
        let resRe896_d = eRe896 - oRe896;
        out512[960] = resRe896_d;
        let resIm896_d = eIm896 - oIm896;
        out512[961] = resIm896_d;
        
        let oRe897 = out512[962];
        let oIm897 = out512[963];
        let eRe897 = out512[898];
        let eIm897 = out512[899];
        let tRe897 = 0.9951847195625305;
        let tRe911 = 0.0980171337723732;
        let resIm897_s = eIm897 + (oRe897 * tRe911 + oIm897 * tRe897);
        out512[899] = resIm897_s;
        out512[1023] = -resIm897_s;
        let resRe897_s = eRe897 + (oRe897 * tRe897 - oIm897 * tRe911);
        out512[1022] = resRe897_s;
        out512[898] = resRe897_s;
        let resRe927_s = eRe897 - (oRe897 * tRe897 - oIm897 * tRe911);
        out512[962] = resRe927_s;
        out512[958] = resRe927_s;
        let resIm927_s = -eIm897 + (oRe897 * tRe911 + oIm897 * tRe897);
        out512[959] = resIm927_s;
        out512[963] = -resIm927_s;
        
        let oRe898 = out512[964];
        let oIm898 = out512[965];
        let eRe898 = out512[900];
        let eIm898 = out512[901];
        let tRe898 = 0.9807852506637573;
        let tRe910 = 0.1950903534889221;
        let resIm898_s = eIm898 + (oRe898 * tRe910 + oIm898 * tRe898);
        out512[901] = resIm898_s;
        out512[1021] = -resIm898_s;
        let resRe898_s = eRe898 + (oRe898 * tRe898 - oIm898 * tRe910);
        out512[1020] = resRe898_s;
        out512[900] = resRe898_s;
        let resRe926_s = eRe898 - (oRe898 * tRe898 - oIm898 * tRe910);
        out512[964] = resRe926_s;
        out512[956] = resRe926_s;
        let resIm926_s = -eIm898 + (oRe898 * tRe910 + oIm898 * tRe898);
        out512[957] = resIm926_s;
        out512[965] = -resIm926_s;
        
        let oRe899 = out512[966];
        let oIm899 = out512[967];
        let eRe899 = out512[902];
        let eIm899 = out512[903];
        let tRe899 = 0.9569403529167175;
        let tRe909 = 0.2902846336364746;
        let resIm899_s = eIm899 + (oRe899 * tRe909 + oIm899 * tRe899);
        out512[903] = resIm899_s;
        out512[1019] = -resIm899_s;
        let resRe899_s = eRe899 + (oRe899 * tRe899 - oIm899 * tRe909);
        out512[1018] = resRe899_s;
        out512[902] = resRe899_s;
        let resRe925_s = eRe899 - (oRe899 * tRe899 - oIm899 * tRe909);
        out512[966] = resRe925_s;
        out512[954] = resRe925_s;
        let resIm925_s = -eIm899 + (oRe899 * tRe909 + oIm899 * tRe899);
        out512[955] = resIm925_s;
        out512[967] = -resIm925_s;
        
        let oRe900 = out512[968];
        let oIm900 = out512[969];
        let eRe900 = out512[904];
        let eIm900 = out512[905];
        let tRe900 = 0.9238795042037964;
        let tRe908 = 0.3826834261417389;
        let resIm900_s = eIm900 + (oRe900 * tRe908 + oIm900 * tRe900);
        out512[905] = resIm900_s;
        out512[1017] = -resIm900_s;
        let resRe900_s = eRe900 + (oRe900 * tRe900 - oIm900 * tRe908);
        out512[1016] = resRe900_s;
        out512[904] = resRe900_s;
        let resRe924_s = eRe900 - (oRe900 * tRe900 - oIm900 * tRe908);
        out512[968] = resRe924_s;
        out512[952] = resRe924_s;
        let resIm924_s = -eIm900 + (oRe900 * tRe908 + oIm900 * tRe900);
        out512[953] = resIm924_s;
        out512[969] = -resIm924_s;
        
        let oRe901 = out512[970];
        let oIm901 = out512[971];
        let eRe901 = out512[906];
        let eIm901 = out512[907];
        let tRe901 = 0.8819212913513184;
        let tRe907 = 0.4713967740535736;
        let resIm901_s = eIm901 + (oRe901 * tRe907 + oIm901 * tRe901);
        out512[907] = resIm901_s;
        out512[1015] = -resIm901_s;
        let resRe901_s = eRe901 + (oRe901 * tRe901 - oIm901 * tRe907);
        out512[1014] = resRe901_s;
        out512[906] = resRe901_s;
        let resRe923_s = eRe901 - (oRe901 * tRe901 - oIm901 * tRe907);
        out512[970] = resRe923_s;
        out512[950] = resRe923_s;
        let resIm923_s = -eIm901 + (oRe901 * tRe907 + oIm901 * tRe901);
        out512[951] = resIm923_s;
        out512[971] = -resIm923_s;
        
        let oRe902 = out512[972];
        let oIm902 = out512[973];
        let eRe902 = out512[908];
        let eIm902 = out512[909];
        let tRe902 = 0.8314695954322815;
        let tRe906 = 0.5555702447891235;
        let resIm902_s = eIm902 + (oRe902 * tRe906 + oIm902 * tRe902);
        out512[909] = resIm902_s;
        out512[1013] = -resIm902_s;
        let resRe902_s = eRe902 + (oRe902 * tRe902 - oIm902 * tRe906);
        out512[1012] = resRe902_s;
        out512[908] = resRe902_s;
        let resRe922_s = eRe902 - (oRe902 * tRe902 - oIm902 * tRe906);
        out512[972] = resRe922_s;
        out512[948] = resRe922_s;
        let resIm922_s = -eIm902 + (oRe902 * tRe906 + oIm902 * tRe902);
        out512[949] = resIm922_s;
        out512[973] = -resIm922_s;
        
        let oRe903 = out512[974];
        let oIm903 = out512[975];
        let eRe903 = out512[910];
        let eIm903 = out512[911];
        let tRe903 = 0.7730104923248291;
        let tRe905 = 0.6343932747840881;
        let resIm903_s = eIm903 + (oRe903 * tRe905 + oIm903 * tRe903);
        out512[911] = resIm903_s;
        out512[1011] = -resIm903_s;
        let resRe903_s = eRe903 + (oRe903 * tRe903 - oIm903 * tRe905);
        out512[1010] = resRe903_s;
        out512[910] = resRe903_s;
        let resRe921_s = eRe903 - (oRe903 * tRe903 - oIm903 * tRe905);
        out512[974] = resRe921_s;
        out512[946] = resRe921_s;
        let resIm921_s = -eIm903 + (oRe903 * tRe905 + oIm903 * tRe903);
        out512[947] = resIm921_s;
        out512[975] = -resIm921_s;
        
        let oRe904 = out512[976];
        let oIm904 = out512[977];
        let eRe904 = out512[912];
        let eIm904 = out512[913];
        let tRe904 = 0.7071067690849304;
        let resIm904_s = eIm904 + (oRe904 * tRe904 + oIm904 * tRe904);
        out512[913] = resIm904_s;
        out512[1009] = -resIm904_s;
        let resRe904_s = eRe904 + (oRe904 * tRe904 - oIm904 * tRe904);
        out512[1008] = resRe904_s;
        out512[912] = resRe904_s;
        let resRe920_s = eRe904 - (oRe904 * tRe904 - oIm904 * tRe904);
        out512[976] = resRe920_s;
        out512[944] = resRe920_s;
        let resIm920_s = -eIm904 + (oRe904 * tRe904 + oIm904 * tRe904);
        out512[945] = resIm920_s;
        out512[977] = -resIm920_s;
        
        let oRe905 = out512[978];
        let oIm905 = out512[979];
        let eRe905 = out512[914];
        let eIm905 = out512[915];
        let resIm905_s = eIm905 + (oRe905 * tRe903 + oIm905 * tRe905);
        out512[915] = resIm905_s;
        out512[1007] = -resIm905_s;
        let resRe905_s = eRe905 + (oRe905 * tRe905 - oIm905 * tRe903);
        out512[1006] = resRe905_s;
        out512[914] = resRe905_s;
        let resRe919_s = eRe905 - (oRe905 * tRe905 - oIm905 * tRe903);
        out512[978] = resRe919_s;
        out512[942] = resRe919_s;
        let resIm919_s = -eIm905 + (oRe905 * tRe903 + oIm905 * tRe905);
        out512[943] = resIm919_s;
        out512[979] = -resIm919_s;
        
        let oRe906 = out512[980];
        let oIm906 = out512[981];
        let eRe906 = out512[916];
        let eIm906 = out512[917];
        let resIm906_s = eIm906 + (oRe906 * tRe902 + oIm906 * tRe906);
        out512[917] = resIm906_s;
        out512[1005] = -resIm906_s;
        let resRe906_s = eRe906 + (oRe906 * tRe906 - oIm906 * tRe902);
        out512[1004] = resRe906_s;
        out512[916] = resRe906_s;
        let resRe918_s = eRe906 - (oRe906 * tRe906 - oIm906 * tRe902);
        out512[980] = resRe918_s;
        out512[940] = resRe918_s;
        let resIm918_s = -eIm906 + (oRe906 * tRe902 + oIm906 * tRe906);
        out512[941] = resIm918_s;
        out512[981] = -resIm918_s;
        
        let oRe907 = out512[982];
        let oIm907 = out512[983];
        let eRe907 = out512[918];
        let eIm907 = out512[919];
        let resIm907_s = eIm907 + (oRe907 * tRe901 + oIm907 * tRe907);
        out512[919] = resIm907_s;
        out512[1003] = -resIm907_s;
        let resRe907_s = eRe907 + (oRe907 * tRe907 - oIm907 * tRe901);
        out512[1002] = resRe907_s;
        out512[918] = resRe907_s;
        let resRe917_s = eRe907 - (oRe907 * tRe907 - oIm907 * tRe901);
        out512[982] = resRe917_s;
        out512[938] = resRe917_s;
        let resIm917_s = -eIm907 + (oRe907 * tRe901 + oIm907 * tRe907);
        out512[939] = resIm917_s;
        out512[983] = -resIm917_s;
        
        let oRe908 = out512[984];
        let oIm908 = out512[985];
        let eRe908 = out512[920];
        let eIm908 = out512[921];
        let resIm908_s = eIm908 + (oRe908 * tRe900 + oIm908 * tRe908);
        out512[921] = resIm908_s;
        out512[1001] = -resIm908_s;
        let resRe908_s = eRe908 + (oRe908 * tRe908 - oIm908 * tRe900);
        out512[1000] = resRe908_s;
        out512[920] = resRe908_s;
        let resRe916_s = eRe908 - (oRe908 * tRe908 - oIm908 * tRe900);
        out512[984] = resRe916_s;
        out512[936] = resRe916_s;
        let resIm916_s = -eIm908 + (oRe908 * tRe900 + oIm908 * tRe908);
        out512[937] = resIm916_s;
        out512[985] = -resIm916_s;
        
        let oRe909 = out512[986];
        let oIm909 = out512[987];
        let eRe909 = out512[922];
        let eIm909 = out512[923];
        let resIm909_s = eIm909 + (oRe909 * tRe899 + oIm909 * tRe909);
        out512[923] = resIm909_s;
        out512[999] = -resIm909_s;
        let resRe909_s = eRe909 + (oRe909 * tRe909 - oIm909 * tRe899);
        out512[998] = resRe909_s;
        out512[922] = resRe909_s;
        let resRe915_s = eRe909 - (oRe909 * tRe909 - oIm909 * tRe899);
        out512[986] = resRe915_s;
        out512[934] = resRe915_s;
        let resIm915_s = -eIm909 + (oRe909 * tRe899 + oIm909 * tRe909);
        out512[935] = resIm915_s;
        out512[987] = -resIm915_s;
        
        let oRe910 = out512[988];
        let oIm910 = out512[989];
        let eRe910 = out512[924];
        let eIm910 = out512[925];
        let resIm910_s = eIm910 + (oRe910 * tRe898 + oIm910 * tRe910);
        out512[925] = resIm910_s;
        out512[997] = -resIm910_s;
        let resRe910_s = eRe910 + (oRe910 * tRe910 - oIm910 * tRe898);
        out512[996] = resRe910_s;
        out512[924] = resRe910_s;
        let resRe914_s = eRe910 - (oRe910 * tRe910 - oIm910 * tRe898);
        out512[988] = resRe914_s;
        out512[932] = resRe914_s;
        let resIm914_s = -eIm910 + (oRe910 * tRe898 + oIm910 * tRe910);
        out512[933] = resIm914_s;
        out512[989] = -resIm914_s;
        
        let oRe911 = out512[990];
        let oIm911 = out512[991];
        let eRe911 = out512[926];
        let eIm911 = out512[927];
        let resIm911_s = eIm911 + (oRe911 * tRe897 + oIm911 * tRe911);
        out512[927] = resIm911_s;
        out512[995] = -resIm911_s;
        let resRe911_s = eRe911 + (oRe911 * tRe911 - oIm911 * tRe897);
        out512[994] = resRe911_s;
        out512[926] = resRe911_s;
        let resRe913_s = eRe911 - (oRe911 * tRe911 - oIm911 * tRe897);
        out512[990] = resRe913_s;
        out512[930] = resRe913_s;
        let resIm913_s = -eIm911 + (oRe911 * tRe897 + oIm911 * tRe911);
        out512[931] = resIm913_s;
        out512[991] = -resIm913_s;
        
        let oRe912 = out512[992];
        let oIm912 = out512[993];
        let eRe912 = out512[928];
        let eIm912 = out512[929];
        let resIm912_s = eIm912 + oRe912;
        out512[929] = resIm912_s;
        out512[993] = -resIm912_s;
        let resRe912_s = eRe912 - oIm912;
        out512[992] = resRe912_s;
        out512[928] = resRe912_s;
        
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 128 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 64; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 64;
         if(j > 32){
             out512[eI * 2    ] =  out512[256 - eI * 2    ];
             out512[eI * 2 + 1] = -out512[256 - eI * 2 + 1];
             out512[oI * 2    ] =  out512[256 - oI * 2    ];
             out512[oI * 2 + 1] = -out512[256 - oI * 2 + 1];
             continue;
         } 
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 64;
         if(j > 32){
             out512[eI * 2    ] =  out512[256 - eI * 2    ];
             out512[eI * 2 + 1] = -out512[256 - eI * 2 + 1];
             out512[oI * 2    ] =  out512[256 - oI * 2    ];
             out512[oI * 2 + 1] = -out512[256 - oI * 2 + 1];
             continue;
         } 
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 64;
         if(j > 32){
             out512[eI * 2    ] =  out512[256 - eI * 2    ];
             out512[eI * 2 + 1] = -out512[256 - eI * 2 + 1];
             out512[oI * 2    ] =  out512[256 - oI * 2    ];
             out512[oI * 2 + 1] = -out512[256 - oI * 2 + 1];
             continue;
         } 
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 384 + j;
         let oI = 384 + j + 64;
         if(j > 32){
             out512[eI * 2    ] =  out512[256 - eI * 2    ];
             out512[eI * 2 + 1] = -out512[256 - eI * 2 + 1];
             out512[oI * 2    ] =  out512[256 - oI * 2    ];
             out512[oI * 2 + 1] = -out512[256 - oI * 2 + 1];
             continue;
         } 
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 256 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 128; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 128;
         if(j > 64){
             out512[eI * 2    ] =  out512[512 - eI * 2    ];
             out512[eI * 2 + 1] = -out512[512 - eI * 2 + 1];
             out512[oI * 2    ] =  out512[512 - oI * 2    ];
             out512[oI * 2 + 1] = -out512[512 - oI * 2 + 1];
             continue;
         } 
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 128; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 128;
         if(j > 64){
             out512[eI * 2    ] =  out512[512 - eI * 2    ];
             out512[eI * 2 + 1] = -out512[512 - eI * 2 + 1];
             out512[oI * 2    ] =  out512[512 - oI * 2    ];
             out512[oI * 2 + 1] = -out512[512 - oI * 2 + 1];
             continue;
         } 
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 512 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 256; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 256;
         if(j > 128){
             out512[eI * 2    ] =  out512[1024 - eI * 2    ];
             out512[eI * 2 + 1] = -out512[1024 - eI * 2 + 1];
             out512[oI * 2    ] =  out512[1024 - oI * 2    ];
             out512[oI * 2 + 1] = -out512[1024 - oI * 2 + 1];
             continue;
         } 
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 

    return out512;
} 

export {fftReal512}; 
