let FFT_FAC_512 = new Float32Array([
1.0000000000000000,0.0000000000000000,0.9999247193336487,0.0122715383768082,0.9996988177299500,0.0245412290096283,0.9993223547935486,0.0368072241544724,
0.9987954497337341,0.0490676760673523,0.9981181025505066,0.0613207370042801,0.9972904324531555,0.0735645666718483,0.9963126182556152,0.0857973098754883,
0.9951847195625305,0.0980171412229538,0.9939069747924805,0.1102222055196762,0.9924795627593994,0.1224106699228287,0.9909026622772217,0.1345807015895844,
0.9891765117645264,0.1467304676771164,0.9873014092445374,0.1588581502437592,0.9852776527404785,0.1709618866443634,0.9831054806709290,0.1830398887395859,
0.9807852506637573,0.1950903236865997,0.9783173799514771,0.2071113735437393,0.9757021069526672,0.2191012352705002,0.9729399681091309,0.2310581207275391,
0.9700312614440918,0.2429801821708679,0.9669764637947083,0.2548656463623047,0.9637760519981384,0.2667127549648285,0.9604305028915405,0.2785196900367737,
0.9569403529167175,0.2902846634387970,0.9533060193061829,0.3020059466362000,0.9495281577110291,0.3136817514896393,0.9456073045730591,0.3253102898597717,
0.9415440559387207,0.3368898332118988,0.9373390078544617,0.3484186828136444,0.9329928159713745,0.3598950505256653,0.9285060763359070,0.3713172078132629,
0.9238795042037964,0.3826834559440613,0.9191138744354248,0.3939920365810394,0.9142097830772400,0.4052413105964661,0.9091680049896240,0.4164295494556427,
0.9039893150329590,0.4275550842285156,0.8986744880676270,0.4386162459850311,0.8932242989540100,0.4496113359928131,0.8876396417617798,0.4605386853218079,
0.8819212913513184,0.4713967144489288,0.8760700821876526,0.4821837544441223,0.8700870275497437,0.4928981661796570,0.8639728426933289,0.5035383701324463,
0.8577286005020142,0.5141027569770813,0.8513551950454712,0.5245897173881531,0.8448535799980164,0.5349976420402527,0.8382247090339661,0.5453249812126160,
0.8314695954322815,0.5555702447891235,0.8245893120765686,0.5657317638397217,0.8175848126411438,0.5758082270622253,0.8104572296142578,0.5857978463172913,
0.8032075166702271,0.5956993103027344,0.7958369255065918,0.6055110096931458,0.7883464694023132,0.6152315735816956,0.7807372212409973,0.6248595118522644,
0.7730104923248291,0.6343932747840881,0.7651672363281250,0.6438315510749817,0.7572088241577148,0.6531728506088257,0.7491363883018494,0.6624158024787903,
0.7409511208534241,0.6715589761734009,0.7326542735099792,0.6806010007858276,0.7242470979690552,0.6895405650138855,0.7157308459281921,0.6983762383460999,
0.7071067690849304,0.7071067690849304,0.6983762383460999,0.7157308459281921,0.6895405650138855,0.7242470383644104,0.6806010007858276,0.7326542735099792,
0.6715589761734009,0.7409511208534241,0.6624157428741455,0.7491363883018494,0.6531728506088257,0.7572088241577148,0.6438315510749817,0.7651672959327698,
0.6343932747840881,0.7730104327201843,0.6248595118522644,0.7807372212409973,0.6152315735816956,0.7883464097976685,0.6055110692977905,0.7958369255065918,
0.5956993103027344,0.8032075166702271,0.5857978463172913,0.8104571700096130,0.5758082270622253,0.8175848126411438,0.5657318234443665,0.8245893120765686,
0.5555702447891235,0.8314695954322815,0.5453249812126160,0.8382247090339661,0.5349976420402527,0.8448535799980164,0.5245896577835083,0.8513551950454712,
0.5141028165817261,0.8577286005020142,0.5035384297370911,0.8639728426933289,0.4928981959819794,0.8700869679450989,0.4821837246417999,0.8760701417922974,
0.4713967740535736,0.8819212317466736,0.4605387151241302,0.8876396417617798,0.4496113061904907,0.8932242989540100,0.4386162757873535,0.8986744284629822,
0.4275551140308380,0.9039893150329590,0.4164295494556427,0.9091680049896240,0.4052412807941437,0.9142097830772400,0.3939920663833618,0.9191138148307800,
0.3826834261417389,0.9238795042037964,0.3713171482086182,0.9285060763359070,0.3598950803279877,0.9329927563667297,0.3484186828136444,0.9373390078544617,
0.3368898332118988,0.9415440559387207,0.3253102302551270,0.9456073641777039,0.3136817514896393,0.9495281577110291,0.3020059466362000,0.9533060193061829,
0.2902846336364746,0.9569403529167175,0.2785197198390961,0.9604305028915405,0.2667127549648285,0.9637760519981384,0.2548656463623047,0.9669764637947083,
0.2429802417755127,0.9700312614440918,0.2310581356287003,0.9729399681091309,0.2191012203693390,0.9757021069526672,0.2071113288402557,0.9783173799514771,
0.1950903534889221,0.9807852506637573,0.1830398887395859,0.9831054806709290,0.1709618568420410,0.9852776527404785,0.1588581949472427,0.9873014092445374,
0.1467304974794388,0.9891765117645264,0.1345806866884232,0.9909026622772217,0.1224106252193451,0.9924795627593994,0.1102222353219986,0.9939069747924805,
0.0980171337723732,0.9951847195625305,0.0857972726225853,0.9963126182556152,0.0735646113753319,0.9972904324531555,0.0613207481801510,0.9981181025505066,
0.0490676499903202,0.9987954497337341,0.0368071645498276,0.9993224143981934,0.0245412550866604,0.9996988177299500,0.0122715290635824,0.9999247193336487,
-0.0000000437113883,1.0000000000000000,-0.0122714973986149,0.9999247193336487,-0.0245412234216928,0.9996988177299500,-0.0368072502315044,0.9993223547935486,
-0.0490676201879978,0.9987954497337341,-0.0613207146525383,0.9981181025505066,-0.0735645741224289,0.9972904324531555,-0.0857973620295525,0.9963126182556152,
-0.0980171039700508,0.9951847195625305,-0.1102222055196762,0.9939069747924805,-0.1224107071757317,0.9924795031547546,-0.1345806568861008,0.9909026622772217,
-0.1467304527759552,0.9891765117645264,-0.1588581651449203,0.9873014092445374,-0.1709619462490082,0.9852776527404785,-0.1830398589372635,0.9831054806709290,
-0.1950903236865997,0.9807852506637573,-0.2071114182472229,0.9783173799514771,-0.2191011905670166,0.9757021665573120,-0.2310580909252167,0.9729399681091309,
-0.2429801970720291,0.9700312614440918,-0.2548657059669495,0.9669764637947083,-0.2667127251625061,0.9637760519981384,-0.2785196900367737,0.9604305028915405,
-0.2902847230434418,0.9569402933120728,-0.3020059168338776,0.9533060789108276,-0.3136817216873169,0.9495281577110291,-0.3253103196620941,0.9456073045730591,
-0.3368898034095764,0.9415440559387207,-0.3484186530113220,0.9373390078544617,-0.3598950505256653,0.9329928159713745,-0.3713172376155853,0.9285060763359070,
-0.3826833963394165,0.9238795638084412,-0.3939920365810394,0.9191138744354248,-0.4052413403987885,0.9142097234725952,-0.4164295196533203,0.9091680049896240,
-0.4275550842285156,0.9039893150329590,-0.4386162459850311,0.8986744284629822,-0.4496113657951355,0.8932242989540100,-0.4605388045310974,0.8876395821571350,
-0.4713966250419617,0.8819212913513184,-0.4821836948394775,0.8760701417922974,-0.4928981661796570,0.8700870275497437,-0.5035383701324463,0.8639728426933289,
-0.5141027569770813,0.8577286005020142,-0.5245897173881531,0.8513551354408264,-0.5349977016448975,0.8448535203933716,-0.5453249216079712,0.8382247686386108,
-0.5555701851844788,0.8314696550369263,-0.5657317638397217,0.8245893120765686,-0.5758081674575806,0.8175848126411438,-0.5857979059219360,0.8104571700096130,
-0.5956993699073792,0.8032075166702271,-0.6055111289024353,0.7958368659019470,-0.6152315139770508,0.7883464694023132,-0.6248594522476196,0.7807372808456421,
-0.6343932747840881,0.7730104923248291,-0.6438315510749817,0.7651672363281250,-0.6531728506088257,0.7572088241577148,-0.6624158024787903,0.7491363286972046,
-0.6715590357780457,0.7409510612487793,-0.6806009411811829,0.7326543331146240,-0.6895405054092407,0.7242470979690552,-0.6983762383460999,0.7157308459281921,
-0.7071067690849304,0.7071067690849304,-0.7157308459281921,0.6983762383460999,-0.7242471575737000,0.6895405054092407,-0.7326543331146240,0.6806009411811829,
-0.7409510612487793,0.6715590357780457,-0.7491363286972046,0.6624158024787903,-0.7572088241577148,0.6531728506088257,-0.7651672959327698,0.6438315510749817,
-0.7730104923248291,0.6343932747840881,-0.7807372808456421,0.6248594522476196,-0.7883464694023132,0.6152315139770508,-0.7958368659019470,0.6055111289024353,
-0.8032075166702271,0.5956993699073792,-0.8104571700096130,0.5857978463172913,-0.8175848126411438,0.5758081674575806,-0.8245893120765686,0.5657317638397217,
-0.8314696550369263,0.5555701851844788,-0.8382246494293213,0.5453251004219055,-0.8448535203933716,0.5349977016448975,-0.8513551950454712,0.5245897173881531,
-0.8577286005020142,0.5141027569770813,-0.8639728426933289,0.5035383701324463,-0.8700870275497437,0.4928981363773346,-0.8760701417922974,0.4821836948394775,
-0.8819212317466736,0.4713968336582184,-0.8876395821571350,0.4605387747287750,-0.8932242989540100,0.4496113657951355,-0.8986744880676270,0.4386162459850311,
-0.9039893150329590,0.4275550544261932,-0.9091680049896240,0.4164294898509979,-0.9142097830772400,0.4052412211894989,-0.9191138148307800,0.3939921259880066,
-0.9238795042037964,0.3826834857463837,-0.9285060763359070,0.3713172376155853,-0.9329928159713745,0.3598950505256653,-0.9373390078544617,0.3484186530113220,
-0.9415441155433655,0.3368898034095764,-0.9456073641777039,0.3253102004528046,-0.9495281577110291,0.3136818408966064,-0.9533060193061829,0.3020060062408447,
-0.9569403529167175,0.2902847230434418,-0.9604305028915405,0.2785196900367737,-0.9637760519981384,0.2667127251625061,-0.9669764637947083,0.2548655867576599,
-0.9700312614440918,0.2429800778627396,-0.9729399085044861,0.2310581952333450,-0.9757021069526672,0.2191012948751450,-0.9783173799514771,0.2071114033460617,
-0.9807853102684021,0.1950903087854385,-0.9831054806709290,0.1830398440361023,-0.9852776527404785,0.1709618121385574,-0.9873014092445374,0.1588580310344696,
-0.9891765117645264,0.1467305719852448,-0.9909026026725769,0.1345807611942291,-0.9924795031547546,0.1224106997251511,-0.9939069747924805,0.1102221980690956,
-0.9951847195625305,0.0980170965194702,-0.9963126182556152,0.0857972279191017,-0.9972904920578003,0.0735644474625587,-0.9981181025505066,0.0613208226859570,
-0.9987954497337341,0.0490677244961262,-0.9993223547935486,0.0368072390556335,-0.9996988177299500,0.0245412103831768,-0.9999247193336487,0.0122714852914214
]);


let iBR512 = new Float32Array(512);
let iP512  = new Float32Array(512);
let _iP512 = new Float32Array(512);
let out512 = new Float32Array(1024);

function fftReal512(realInput) { 
    let size = realInput.length;
    if (size != 512) {
        for (let i = 0; i < 512; i++) {
            iP512[i] = (i < size) ? realInput[i] : 0.0;
        }
        _iP512 = iP512;
    } else {
        _iP512 = realInput;
    }


    //Bit Reversal
    iBR512[0]=_iP512[0]; 
    iBR512[1]=_iP512[256]; 
    iBR512[2]=_iP512[128]; 
    iBR512[3]=_iP512[384]; 
    iBR512[4]=_iP512[64]; 
    iBR512[5]=_iP512[320]; 
    iBR512[6]=_iP512[192]; 
    iBR512[7]=_iP512[448]; 
    iBR512[8]=_iP512[32]; 
    iBR512[9]=_iP512[288]; 
    iBR512[10]=_iP512[160]; 
    iBR512[11]=_iP512[416]; 
    iBR512[12]=_iP512[96]; 
    iBR512[13]=_iP512[352]; 
    iBR512[14]=_iP512[224]; 
    iBR512[15]=_iP512[480]; 
    iBR512[16]=_iP512[16]; 
    iBR512[17]=_iP512[272]; 
    iBR512[18]=_iP512[144]; 
    iBR512[19]=_iP512[400]; 
    iBR512[20]=_iP512[80]; 
    iBR512[21]=_iP512[336]; 
    iBR512[22]=_iP512[208]; 
    iBR512[23]=_iP512[464]; 
    iBR512[24]=_iP512[48]; 
    iBR512[25]=_iP512[304]; 
    iBR512[26]=_iP512[176]; 
    iBR512[27]=_iP512[432]; 
    iBR512[28]=_iP512[112]; 
    iBR512[29]=_iP512[368]; 
    iBR512[30]=_iP512[240]; 
    iBR512[31]=_iP512[496]; 
    iBR512[32]=_iP512[8]; 
    iBR512[33]=_iP512[264]; 
    iBR512[34]=_iP512[136]; 
    iBR512[35]=_iP512[392]; 
    iBR512[36]=_iP512[72]; 
    iBR512[37]=_iP512[328]; 
    iBR512[38]=_iP512[200]; 
    iBR512[39]=_iP512[456]; 
    iBR512[40]=_iP512[40]; 
    iBR512[41]=_iP512[296]; 
    iBR512[42]=_iP512[168]; 
    iBR512[43]=_iP512[424]; 
    iBR512[44]=_iP512[104]; 
    iBR512[45]=_iP512[360]; 
    iBR512[46]=_iP512[232]; 
    iBR512[47]=_iP512[488]; 
    iBR512[48]=_iP512[24]; 
    iBR512[49]=_iP512[280]; 
    iBR512[50]=_iP512[152]; 
    iBR512[51]=_iP512[408]; 
    iBR512[52]=_iP512[88]; 
    iBR512[53]=_iP512[344]; 
    iBR512[54]=_iP512[216]; 
    iBR512[55]=_iP512[472]; 
    iBR512[56]=_iP512[56]; 
    iBR512[57]=_iP512[312]; 
    iBR512[58]=_iP512[184]; 
    iBR512[59]=_iP512[440]; 
    iBR512[60]=_iP512[120]; 
    iBR512[61]=_iP512[376]; 
    iBR512[62]=_iP512[248]; 
    iBR512[63]=_iP512[504]; 
    iBR512[64]=_iP512[4]; 
    iBR512[65]=_iP512[260]; 
    iBR512[66]=_iP512[132]; 
    iBR512[67]=_iP512[388]; 
    iBR512[68]=_iP512[68]; 
    iBR512[69]=_iP512[324]; 
    iBR512[70]=_iP512[196]; 
    iBR512[71]=_iP512[452]; 
    iBR512[72]=_iP512[36]; 
    iBR512[73]=_iP512[292]; 
    iBR512[74]=_iP512[164]; 
    iBR512[75]=_iP512[420]; 
    iBR512[76]=_iP512[100]; 
    iBR512[77]=_iP512[356]; 
    iBR512[78]=_iP512[228]; 
    iBR512[79]=_iP512[484]; 
    iBR512[80]=_iP512[20]; 
    iBR512[81]=_iP512[276]; 
    iBR512[82]=_iP512[148]; 
    iBR512[83]=_iP512[404]; 
    iBR512[84]=_iP512[84]; 
    iBR512[85]=_iP512[340]; 
    iBR512[86]=_iP512[212]; 
    iBR512[87]=_iP512[468]; 
    iBR512[88]=_iP512[52]; 
    iBR512[89]=_iP512[308]; 
    iBR512[90]=_iP512[180]; 
    iBR512[91]=_iP512[436]; 
    iBR512[92]=_iP512[116]; 
    iBR512[93]=_iP512[372]; 
    iBR512[94]=_iP512[244]; 
    iBR512[95]=_iP512[500]; 
    iBR512[96]=_iP512[12]; 
    iBR512[97]=_iP512[268]; 
    iBR512[98]=_iP512[140]; 
    iBR512[99]=_iP512[396]; 
    iBR512[100]=_iP512[76]; 
    iBR512[101]=_iP512[332]; 
    iBR512[102]=_iP512[204]; 
    iBR512[103]=_iP512[460]; 
    iBR512[104]=_iP512[44]; 
    iBR512[105]=_iP512[300]; 
    iBR512[106]=_iP512[172]; 
    iBR512[107]=_iP512[428]; 
    iBR512[108]=_iP512[108]; 
    iBR512[109]=_iP512[364]; 
    iBR512[110]=_iP512[236]; 
    iBR512[111]=_iP512[492]; 
    iBR512[112]=_iP512[28]; 
    iBR512[113]=_iP512[284]; 
    iBR512[114]=_iP512[156]; 
    iBR512[115]=_iP512[412]; 
    iBR512[116]=_iP512[92]; 
    iBR512[117]=_iP512[348]; 
    iBR512[118]=_iP512[220]; 
    iBR512[119]=_iP512[476]; 
    iBR512[120]=_iP512[60]; 
    iBR512[121]=_iP512[316]; 
    iBR512[122]=_iP512[188]; 
    iBR512[123]=_iP512[444]; 
    iBR512[124]=_iP512[124]; 
    iBR512[125]=_iP512[380]; 
    iBR512[126]=_iP512[252]; 
    iBR512[127]=_iP512[508]; 
    iBR512[128]=_iP512[2]; 
    iBR512[129]=_iP512[258]; 
    iBR512[130]=_iP512[130]; 
    iBR512[131]=_iP512[386]; 
    iBR512[132]=_iP512[66]; 
    iBR512[133]=_iP512[322]; 
    iBR512[134]=_iP512[194]; 
    iBR512[135]=_iP512[450]; 
    iBR512[136]=_iP512[34]; 
    iBR512[137]=_iP512[290]; 
    iBR512[138]=_iP512[162]; 
    iBR512[139]=_iP512[418]; 
    iBR512[140]=_iP512[98]; 
    iBR512[141]=_iP512[354]; 
    iBR512[142]=_iP512[226]; 
    iBR512[143]=_iP512[482]; 
    iBR512[144]=_iP512[18]; 
    iBR512[145]=_iP512[274]; 
    iBR512[146]=_iP512[146]; 
    iBR512[147]=_iP512[402]; 
    iBR512[148]=_iP512[82]; 
    iBR512[149]=_iP512[338]; 
    iBR512[150]=_iP512[210]; 
    iBR512[151]=_iP512[466]; 
    iBR512[152]=_iP512[50]; 
    iBR512[153]=_iP512[306]; 
    iBR512[154]=_iP512[178]; 
    iBR512[155]=_iP512[434]; 
    iBR512[156]=_iP512[114]; 
    iBR512[157]=_iP512[370]; 
    iBR512[158]=_iP512[242]; 
    iBR512[159]=_iP512[498]; 
    iBR512[160]=_iP512[10]; 
    iBR512[161]=_iP512[266]; 
    iBR512[162]=_iP512[138]; 
    iBR512[163]=_iP512[394]; 
    iBR512[164]=_iP512[74]; 
    iBR512[165]=_iP512[330]; 
    iBR512[166]=_iP512[202]; 
    iBR512[167]=_iP512[458]; 
    iBR512[168]=_iP512[42]; 
    iBR512[169]=_iP512[298]; 
    iBR512[170]=_iP512[170]; 
    iBR512[171]=_iP512[426]; 
    iBR512[172]=_iP512[106]; 
    iBR512[173]=_iP512[362]; 
    iBR512[174]=_iP512[234]; 
    iBR512[175]=_iP512[490]; 
    iBR512[176]=_iP512[26]; 
    iBR512[177]=_iP512[282]; 
    iBR512[178]=_iP512[154]; 
    iBR512[179]=_iP512[410]; 
    iBR512[180]=_iP512[90]; 
    iBR512[181]=_iP512[346]; 
    iBR512[182]=_iP512[218]; 
    iBR512[183]=_iP512[474]; 
    iBR512[184]=_iP512[58]; 
    iBR512[185]=_iP512[314]; 
    iBR512[186]=_iP512[186]; 
    iBR512[187]=_iP512[442]; 
    iBR512[188]=_iP512[122]; 
    iBR512[189]=_iP512[378]; 
    iBR512[190]=_iP512[250]; 
    iBR512[191]=_iP512[506]; 
    iBR512[192]=_iP512[6]; 
    iBR512[193]=_iP512[262]; 
    iBR512[194]=_iP512[134]; 
    iBR512[195]=_iP512[390]; 
    iBR512[196]=_iP512[70]; 
    iBR512[197]=_iP512[326]; 
    iBR512[198]=_iP512[198]; 
    iBR512[199]=_iP512[454]; 
    iBR512[200]=_iP512[38]; 
    iBR512[201]=_iP512[294]; 
    iBR512[202]=_iP512[166]; 
    iBR512[203]=_iP512[422]; 
    iBR512[204]=_iP512[102]; 
    iBR512[205]=_iP512[358]; 
    iBR512[206]=_iP512[230]; 
    iBR512[207]=_iP512[486]; 
    iBR512[208]=_iP512[22]; 
    iBR512[209]=_iP512[278]; 
    iBR512[210]=_iP512[150]; 
    iBR512[211]=_iP512[406]; 
    iBR512[212]=_iP512[86]; 
    iBR512[213]=_iP512[342]; 
    iBR512[214]=_iP512[214]; 
    iBR512[215]=_iP512[470]; 
    iBR512[216]=_iP512[54]; 
    iBR512[217]=_iP512[310]; 
    iBR512[218]=_iP512[182]; 
    iBR512[219]=_iP512[438]; 
    iBR512[220]=_iP512[118]; 
    iBR512[221]=_iP512[374]; 
    iBR512[222]=_iP512[246]; 
    iBR512[223]=_iP512[502]; 
    iBR512[224]=_iP512[14]; 
    iBR512[225]=_iP512[270]; 
    iBR512[226]=_iP512[142]; 
    iBR512[227]=_iP512[398]; 
    iBR512[228]=_iP512[78]; 
    iBR512[229]=_iP512[334]; 
    iBR512[230]=_iP512[206]; 
    iBR512[231]=_iP512[462]; 
    iBR512[232]=_iP512[46]; 
    iBR512[233]=_iP512[302]; 
    iBR512[234]=_iP512[174]; 
    iBR512[235]=_iP512[430]; 
    iBR512[236]=_iP512[110]; 
    iBR512[237]=_iP512[366]; 
    iBR512[238]=_iP512[238]; 
    iBR512[239]=_iP512[494]; 
    iBR512[240]=_iP512[30]; 
    iBR512[241]=_iP512[286]; 
    iBR512[242]=_iP512[158]; 
    iBR512[243]=_iP512[414]; 
    iBR512[244]=_iP512[94]; 
    iBR512[245]=_iP512[350]; 
    iBR512[246]=_iP512[222]; 
    iBR512[247]=_iP512[478]; 
    iBR512[248]=_iP512[62]; 
    iBR512[249]=_iP512[318]; 
    iBR512[250]=_iP512[190]; 
    iBR512[251]=_iP512[446]; 
    iBR512[252]=_iP512[126]; 
    iBR512[253]=_iP512[382]; 
    iBR512[254]=_iP512[254]; 
    iBR512[255]=_iP512[510]; 
    iBR512[256]=_iP512[1]; 
    iBR512[257]=_iP512[257]; 
    iBR512[258]=_iP512[129]; 
    iBR512[259]=_iP512[385]; 
    iBR512[260]=_iP512[65]; 
    iBR512[261]=_iP512[321]; 
    iBR512[262]=_iP512[193]; 
    iBR512[263]=_iP512[449]; 
    iBR512[264]=_iP512[33]; 
    iBR512[265]=_iP512[289]; 
    iBR512[266]=_iP512[161]; 
    iBR512[267]=_iP512[417]; 
    iBR512[268]=_iP512[97]; 
    iBR512[269]=_iP512[353]; 
    iBR512[270]=_iP512[225]; 
    iBR512[271]=_iP512[481]; 
    iBR512[272]=_iP512[17]; 
    iBR512[273]=_iP512[273]; 
    iBR512[274]=_iP512[145]; 
    iBR512[275]=_iP512[401]; 
    iBR512[276]=_iP512[81]; 
    iBR512[277]=_iP512[337]; 
    iBR512[278]=_iP512[209]; 
    iBR512[279]=_iP512[465]; 
    iBR512[280]=_iP512[49]; 
    iBR512[281]=_iP512[305]; 
    iBR512[282]=_iP512[177]; 
    iBR512[283]=_iP512[433]; 
    iBR512[284]=_iP512[113]; 
    iBR512[285]=_iP512[369]; 
    iBR512[286]=_iP512[241]; 
    iBR512[287]=_iP512[497]; 
    iBR512[288]=_iP512[9]; 
    iBR512[289]=_iP512[265]; 
    iBR512[290]=_iP512[137]; 
    iBR512[291]=_iP512[393]; 
    iBR512[292]=_iP512[73]; 
    iBR512[293]=_iP512[329]; 
    iBR512[294]=_iP512[201]; 
    iBR512[295]=_iP512[457]; 
    iBR512[296]=_iP512[41]; 
    iBR512[297]=_iP512[297]; 
    iBR512[298]=_iP512[169]; 
    iBR512[299]=_iP512[425]; 
    iBR512[300]=_iP512[105]; 
    iBR512[301]=_iP512[361]; 
    iBR512[302]=_iP512[233]; 
    iBR512[303]=_iP512[489]; 
    iBR512[304]=_iP512[25]; 
    iBR512[305]=_iP512[281]; 
    iBR512[306]=_iP512[153]; 
    iBR512[307]=_iP512[409]; 
    iBR512[308]=_iP512[89]; 
    iBR512[309]=_iP512[345]; 
    iBR512[310]=_iP512[217]; 
    iBR512[311]=_iP512[473]; 
    iBR512[312]=_iP512[57]; 
    iBR512[313]=_iP512[313]; 
    iBR512[314]=_iP512[185]; 
    iBR512[315]=_iP512[441]; 
    iBR512[316]=_iP512[121]; 
    iBR512[317]=_iP512[377]; 
    iBR512[318]=_iP512[249]; 
    iBR512[319]=_iP512[505]; 
    iBR512[320]=_iP512[5]; 
    iBR512[321]=_iP512[261]; 
    iBR512[322]=_iP512[133]; 
    iBR512[323]=_iP512[389]; 
    iBR512[324]=_iP512[69]; 
    iBR512[325]=_iP512[325]; 
    iBR512[326]=_iP512[197]; 
    iBR512[327]=_iP512[453]; 
    iBR512[328]=_iP512[37]; 
    iBR512[329]=_iP512[293]; 
    iBR512[330]=_iP512[165]; 
    iBR512[331]=_iP512[421]; 
    iBR512[332]=_iP512[101]; 
    iBR512[333]=_iP512[357]; 
    iBR512[334]=_iP512[229]; 
    iBR512[335]=_iP512[485]; 
    iBR512[336]=_iP512[21]; 
    iBR512[337]=_iP512[277]; 
    iBR512[338]=_iP512[149]; 
    iBR512[339]=_iP512[405]; 
    iBR512[340]=_iP512[85]; 
    iBR512[341]=_iP512[341]; 
    iBR512[342]=_iP512[213]; 
    iBR512[343]=_iP512[469]; 
    iBR512[344]=_iP512[53]; 
    iBR512[345]=_iP512[309]; 
    iBR512[346]=_iP512[181]; 
    iBR512[347]=_iP512[437]; 
    iBR512[348]=_iP512[117]; 
    iBR512[349]=_iP512[373]; 
    iBR512[350]=_iP512[245]; 
    iBR512[351]=_iP512[501]; 
    iBR512[352]=_iP512[13]; 
    iBR512[353]=_iP512[269]; 
    iBR512[354]=_iP512[141]; 
    iBR512[355]=_iP512[397]; 
    iBR512[356]=_iP512[77]; 
    iBR512[357]=_iP512[333]; 
    iBR512[358]=_iP512[205]; 
    iBR512[359]=_iP512[461]; 
    iBR512[360]=_iP512[45]; 
    iBR512[361]=_iP512[301]; 
    iBR512[362]=_iP512[173]; 
    iBR512[363]=_iP512[429]; 
    iBR512[364]=_iP512[109]; 
    iBR512[365]=_iP512[365]; 
    iBR512[366]=_iP512[237]; 
    iBR512[367]=_iP512[493]; 
    iBR512[368]=_iP512[29]; 
    iBR512[369]=_iP512[285]; 
    iBR512[370]=_iP512[157]; 
    iBR512[371]=_iP512[413]; 
    iBR512[372]=_iP512[93]; 
    iBR512[373]=_iP512[349]; 
    iBR512[374]=_iP512[221]; 
    iBR512[375]=_iP512[477]; 
    iBR512[376]=_iP512[61]; 
    iBR512[377]=_iP512[317]; 
    iBR512[378]=_iP512[189]; 
    iBR512[379]=_iP512[445]; 
    iBR512[380]=_iP512[125]; 
    iBR512[381]=_iP512[381]; 
    iBR512[382]=_iP512[253]; 
    iBR512[383]=_iP512[509]; 
    iBR512[384]=_iP512[3]; 
    iBR512[385]=_iP512[259]; 
    iBR512[386]=_iP512[131]; 
    iBR512[387]=_iP512[387]; 
    iBR512[388]=_iP512[67]; 
    iBR512[389]=_iP512[323]; 
    iBR512[390]=_iP512[195]; 
    iBR512[391]=_iP512[451]; 
    iBR512[392]=_iP512[35]; 
    iBR512[393]=_iP512[291]; 
    iBR512[394]=_iP512[163]; 
    iBR512[395]=_iP512[419]; 
    iBR512[396]=_iP512[99]; 
    iBR512[397]=_iP512[355]; 
    iBR512[398]=_iP512[227]; 
    iBR512[399]=_iP512[483]; 
    iBR512[400]=_iP512[19]; 
    iBR512[401]=_iP512[275]; 
    iBR512[402]=_iP512[147]; 
    iBR512[403]=_iP512[403]; 
    iBR512[404]=_iP512[83]; 
    iBR512[405]=_iP512[339]; 
    iBR512[406]=_iP512[211]; 
    iBR512[407]=_iP512[467]; 
    iBR512[408]=_iP512[51]; 
    iBR512[409]=_iP512[307]; 
    iBR512[410]=_iP512[179]; 
    iBR512[411]=_iP512[435]; 
    iBR512[412]=_iP512[115]; 
    iBR512[413]=_iP512[371]; 
    iBR512[414]=_iP512[243]; 
    iBR512[415]=_iP512[499]; 
    iBR512[416]=_iP512[11]; 
    iBR512[417]=_iP512[267]; 
    iBR512[418]=_iP512[139]; 
    iBR512[419]=_iP512[395]; 
    iBR512[420]=_iP512[75]; 
    iBR512[421]=_iP512[331]; 
    iBR512[422]=_iP512[203]; 
    iBR512[423]=_iP512[459]; 
    iBR512[424]=_iP512[43]; 
    iBR512[425]=_iP512[299]; 
    iBR512[426]=_iP512[171]; 
    iBR512[427]=_iP512[427]; 
    iBR512[428]=_iP512[107]; 
    iBR512[429]=_iP512[363]; 
    iBR512[430]=_iP512[235]; 
    iBR512[431]=_iP512[491]; 
    iBR512[432]=_iP512[27]; 
    iBR512[433]=_iP512[283]; 
    iBR512[434]=_iP512[155]; 
    iBR512[435]=_iP512[411]; 
    iBR512[436]=_iP512[91]; 
    iBR512[437]=_iP512[347]; 
    iBR512[438]=_iP512[219]; 
    iBR512[439]=_iP512[475]; 
    iBR512[440]=_iP512[59]; 
    iBR512[441]=_iP512[315]; 
    iBR512[442]=_iP512[187]; 
    iBR512[443]=_iP512[443]; 
    iBR512[444]=_iP512[123]; 
    iBR512[445]=_iP512[379]; 
    iBR512[446]=_iP512[251]; 
    iBR512[447]=_iP512[507]; 
    iBR512[448]=_iP512[7]; 
    iBR512[449]=_iP512[263]; 
    iBR512[450]=_iP512[135]; 
    iBR512[451]=_iP512[391]; 
    iBR512[452]=_iP512[71]; 
    iBR512[453]=_iP512[327]; 
    iBR512[454]=_iP512[199]; 
    iBR512[455]=_iP512[455]; 
    iBR512[456]=_iP512[39]; 
    iBR512[457]=_iP512[295]; 
    iBR512[458]=_iP512[167]; 
    iBR512[459]=_iP512[423]; 
    iBR512[460]=_iP512[103]; 
    iBR512[461]=_iP512[359]; 
    iBR512[462]=_iP512[231]; 
    iBR512[463]=_iP512[487]; 
    iBR512[464]=_iP512[23]; 
    iBR512[465]=_iP512[279]; 
    iBR512[466]=_iP512[151]; 
    iBR512[467]=_iP512[407]; 
    iBR512[468]=_iP512[87]; 
    iBR512[469]=_iP512[343]; 
    iBR512[470]=_iP512[215]; 
    iBR512[471]=_iP512[471]; 
    iBR512[472]=_iP512[55]; 
    iBR512[473]=_iP512[311]; 
    iBR512[474]=_iP512[183]; 
    iBR512[475]=_iP512[439]; 
    iBR512[476]=_iP512[119]; 
    iBR512[477]=_iP512[375]; 
    iBR512[478]=_iP512[247]; 
    iBR512[479]=_iP512[503]; 
    iBR512[480]=_iP512[15]; 
    iBR512[481]=_iP512[271]; 
    iBR512[482]=_iP512[143]; 
    iBR512[483]=_iP512[399]; 
    iBR512[484]=_iP512[79]; 
    iBR512[485]=_iP512[335]; 
    iBR512[486]=_iP512[207]; 
    iBR512[487]=_iP512[463]; 
    iBR512[488]=_iP512[47]; 
    iBR512[489]=_iP512[303]; 
    iBR512[490]=_iP512[175]; 
    iBR512[491]=_iP512[431]; 
    iBR512[492]=_iP512[111]; 
    iBR512[493]=_iP512[367]; 
    iBR512[494]=_iP512[239]; 
    iBR512[495]=_iP512[495]; 
    iBR512[496]=_iP512[31]; 
    iBR512[497]=_iP512[287]; 
    iBR512[498]=_iP512[159]; 
    iBR512[499]=_iP512[415]; 
    iBR512[500]=_iP512[95]; 
    iBR512[501]=_iP512[351]; 
    iBR512[502]=_iP512[223]; 
    iBR512[503]=_iP512[479]; 
    iBR512[504]=_iP512[63]; 
    iBR512[505]=_iP512[319]; 
    iBR512[506]=_iP512[191]; 
    iBR512[507]=_iP512[447]; 
    iBR512[508]=_iP512[127]; 
    iBR512[509]=_iP512[383]; 
    iBR512[510]=_iP512[255]; 
    iBR512[511]=_iP512[511]; 

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 4 - FFT step for SIZE 4/8 
    ////////////////////////////////////////////////

    for (let idx = 0, out_idx = 0; idx < 512; idx += 4, out_idx += 8) {
        let x0aRe = iBR512[idx    ];
        let x1aRe = iBR512[idx + 1];
        let x2aRe = iBR512[idx + 2];
        let x3aRe = iBR512[idx + 3];

        let sum1  = x0aRe + x1aRe;
        let sum2  = x2aRe + x3aRe;
        let diff1 = x0aRe - x1aRe;
        let diff2 = x2aRe - x3aRe;

        out512[out_idx]     = sum1 + sum2;
        out512[out_idx + 1] = 0.0;
        out512[out_idx + 2] = diff1;
        out512[out_idx + 3] = diff2;
        out512[out_idx + 4] = sum1 - sum2;
        out512[out_idx + 5] = 0.0;
        out512[out_idx + 6] = diff1;
        out512[out_idx + 7] = -diff2;
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 16 
    ////////////////////////////////////////////////
    for(let idx = 0; idx < 512; idx += 32){ 
        let oRe0 = out512[idx + 16];
        let oIm0 = out512[idx + 17];
        let eRe0 = out512[idx + 0];
        let eIm0 = out512[idx + 1];
        let resRe0_s = eRe0 + oRe0;
        out512[idx] = resRe0_s;
        let resIm0_s = eIm0 + oIm0;
        out512[idx + 1] = resRe0_s;
        let resRe0_d = eRe0 - oRe0;
        out512[idx + 16] = resRe0_d;
        let resIm0_d = eIm0 - oIm0;
        out512[idx + 17] = resIm0_d;
        
        let oRe1 = out512[idx + 18];
        let oIm1 = out512[idx + 19];
        let eRe1 = out512[idx + 2];
        let eIm1 = out512[idx + 3];
        let tRe1 = FFT_FAC_512[idx + 1];
        let tRe3 = FFT_FAC_512[idx + 3];
        let resIm1_s = eIm1 + (oRe1 * tRe3 + oIm1 * tRe1);
        out512[idx + 3] = resIm1_s;
        out512[idx + 31] = -resIm1_s;
        let resRe1_s = eRe1 + (oRe1 * tRe1 - oIm1 * tRe3);
        out512[idx + 30] = resRe1_s;
        out512[idx + 2] = resRe1_s;
        let resRe7_s = eRe1 - (oRe1 * tRe1 - oIm1 * tRe3);
        out512[idx + 18] = resRe7_s;
        out512[idx + 14] = resRe7_s;
        let resIm7_s = -eIm1 + (oRe1 * tRe3 + oIm1 * tRe1);
        out512[idx + 15] = resIm7_s;
        out512[idx + 19] = -resIm7_s;
        
        let oRe2 = out512[idx + 20];
        let oIm2 = out512[idx + 21];
        let eRe2 = out512[idx + 4];
        let eIm2 = out512[idx + 5];
        let tRe2 = FFT_FAC_512[idx + 2];
        let resIm2_s = eIm2 + (oRe2 * tRe2 + oIm2 * tRe2);
        out512[idx + 5] = resIm2_s;
        out512[idx + 29] = -resIm2_s;
        let resRe2_s = eRe2 + (oRe2 * tRe2 - oIm2 * tRe2);
        out512[idx + 28] = resRe2_s;
        out512[idx + 4] = resRe2_s;
        let resRe6_s = eRe2 - (oRe2 * tRe2 - oIm2 * tRe2);
        out512[idx + 20] = resRe6_s;
        out512[idx + 12] = resRe6_s;
        let resIm6_s = -eIm2 + (oRe2 * tRe2 + oIm2 * tRe2);
        out512[idx + 13] = resIm6_s;
        out512[idx + 21] = -resIm6_s;
        
        let oRe3 = out512[idx + 22];
        let oIm3 = out512[idx + 23];
        let eRe3 = out512[idx + 6];
        let eIm3 = out512[idx + 7];
        let resIm3_s = eIm3 + (oRe3 * tRe1 + oIm3 * tRe3);
        out512[idx + 7] = resIm3_s;
        out512[idx + 27] = -resIm3_s;
        let resRe3_s = eRe3 + (oRe3 * tRe3 - oIm3 * tRe1);
        out512[idx + 26] = resRe3_s;
        out512[idx + 6] = resRe3_s;
        let resRe5_s = eRe3 - (oRe3 * tRe3 - oIm3 * tRe1);
        out512[idx + 22] = resRe5_s;
        out512[idx + 10] = resRe5_s;
        let resIm5_s = -eIm3 + (oRe3 * tRe1 + oIm3 * tRe3);
        out512[idx + 11] = resIm5_s;
        out512[idx + 23] = -resIm5_s;
        
        let oRe4 = out512[idx + 24];
        let oIm4 = out512[idx + 25];
        let eRe4 = out512[idx + 8];
        let eIm4 = out512[idx + 9];
        let resIm4_s = eIm4 + oRe4;
        out512[idx + 9] = resIm4_s;
        out512[idx + 25] = -resIm4_s;
        let resRe4_s = eRe4 - oIm4;
        out512[idx + 24] = resRe4_s;
        out512[idx + 8] = resRe4_s;
        
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 32 
    ////////////////////////////////////////////////
    for(let idx = 0; idx < 512; idx += 64){ 
        let oRe0 = out512[idx + 32];
        let oIm0 = out512[idx + 33];
        let eRe0 = out512[idx + 0];
        let eIm0 = out512[idx + 1];
        let resRe0_s = eRe0 + oRe0;
        out512[idx] = resRe0_s;
        let resIm0_s = eIm0 + oIm0;
        out512[idx + 1] = resRe0_s;
        let resRe0_d = eRe0 - oRe0;
        out512[idx + 32] = resRe0_d;
        let resIm0_d = eIm0 - oIm0;
        out512[idx + 33] = resIm0_d;
        
        let oRe1 = out512[idx + 34];
        let oIm1 = out512[idx + 35];
        let eRe1 = out512[idx + 2];
        let eIm1 = out512[idx + 3];
        let tRe1 = FFT_FAC_512[idx + 1];
        let tRe7 = FFT_FAC_512[idx + 7];
        let resIm1_s = eIm1 + (oRe1 * tRe7 + oIm1 * tRe1);
        out512[idx + 3] = resIm1_s;
        out512[idx + 63] = -resIm1_s;
        let resRe1_s = eRe1 + (oRe1 * tRe1 - oIm1 * tRe7);
        out512[idx + 62] = resRe1_s;
        out512[idx + 2] = resRe1_s;
        let resRe15_s = eRe1 - (oRe1 * tRe1 - oIm1 * tRe7);
        out512[idx + 34] = resRe15_s;
        out512[idx + 30] = resRe15_s;
        let resIm15_s = -eIm1 + (oRe1 * tRe7 + oIm1 * tRe1);
        out512[idx + 31] = resIm15_s;
        out512[idx + 35] = -resIm15_s;
        
        let oRe2 = out512[idx + 36];
        let oIm2 = out512[idx + 37];
        let eRe2 = out512[idx + 4];
        let eIm2 = out512[idx + 5];
        let tRe2 = FFT_FAC_512[idx + 2];
        let tRe6 = FFT_FAC_512[idx + 6];
        let resIm2_s = eIm2 + (oRe2 * tRe6 + oIm2 * tRe2);
        out512[idx + 5] = resIm2_s;
        out512[idx + 61] = -resIm2_s;
        let resRe2_s = eRe2 + (oRe2 * tRe2 - oIm2 * tRe6);
        out512[idx + 60] = resRe2_s;
        out512[idx + 4] = resRe2_s;
        let resRe14_s = eRe2 - (oRe2 * tRe2 - oIm2 * tRe6);
        out512[idx + 36] = resRe14_s;
        out512[idx + 28] = resRe14_s;
        let resIm14_s = -eIm2 + (oRe2 * tRe6 + oIm2 * tRe2);
        out512[idx + 29] = resIm14_s;
        out512[idx + 37] = -resIm14_s;
        
        let oRe3 = out512[idx + 38];
        let oIm3 = out512[idx + 39];
        let eRe3 = out512[idx + 6];
        let eIm3 = out512[idx + 7];
        let tRe3 = FFT_FAC_512[idx + 3];
        let tRe5 = FFT_FAC_512[idx + 5];
        let resIm3_s = eIm3 + (oRe3 * tRe5 + oIm3 * tRe3);
        out512[idx + 7] = resIm3_s;
        out512[idx + 59] = -resIm3_s;
        let resRe3_s = eRe3 + (oRe3 * tRe3 - oIm3 * tRe5);
        out512[idx + 58] = resRe3_s;
        out512[idx + 6] = resRe3_s;
        let resRe13_s = eRe3 - (oRe3 * tRe3 - oIm3 * tRe5);
        out512[idx + 38] = resRe13_s;
        out512[idx + 26] = resRe13_s;
        let resIm13_s = -eIm3 + (oRe3 * tRe5 + oIm3 * tRe3);
        out512[idx + 27] = resIm13_s;
        out512[idx + 39] = -resIm13_s;
        
        let oRe4 = out512[idx + 40];
        let oIm4 = out512[idx + 41];
        let eRe4 = out512[idx + 8];
        let eIm4 = out512[idx + 9];
        let tRe4 = FFT_FAC_512[idx + 4];
        let resIm4_s = eIm4 + (oRe4 * tRe4 + oIm4 * tRe4);
        out512[idx + 9] = resIm4_s;
        out512[idx + 57] = -resIm4_s;
        let resRe4_s = eRe4 + (oRe4 * tRe4 - oIm4 * tRe4);
        out512[idx + 56] = resRe4_s;
        out512[idx + 8] = resRe4_s;
        let resRe12_s = eRe4 - (oRe4 * tRe4 - oIm4 * tRe4);
        out512[idx + 40] = resRe12_s;
        out512[idx + 24] = resRe12_s;
        let resIm12_s = -eIm4 + (oRe4 * tRe4 + oIm4 * tRe4);
        out512[idx + 25] = resIm12_s;
        out512[idx + 41] = -resIm12_s;
        
        let oRe5 = out512[idx + 42];
        let oIm5 = out512[idx + 43];
        let eRe5 = out512[idx + 10];
        let eIm5 = out512[idx + 11];
        let resIm5_s = eIm5 + (oRe5 * tRe3 + oIm5 * tRe5);
        out512[idx + 11] = resIm5_s;
        out512[idx + 55] = -resIm5_s;
        let resRe5_s = eRe5 + (oRe5 * tRe5 - oIm5 * tRe3);
        out512[idx + 54] = resRe5_s;
        out512[idx + 10] = resRe5_s;
        let resRe11_s = eRe5 - (oRe5 * tRe5 - oIm5 * tRe3);
        out512[idx + 42] = resRe11_s;
        out512[idx + 22] = resRe11_s;
        let resIm11_s = -eIm5 + (oRe5 * tRe3 + oIm5 * tRe5);
        out512[idx + 23] = resIm11_s;
        out512[idx + 43] = -resIm11_s;
        
        let oRe6 = out512[idx + 44];
        let oIm6 = out512[idx + 45];
        let eRe6 = out512[idx + 12];
        let eIm6 = out512[idx + 13];
        let resIm6_s = eIm6 + (oRe6 * tRe2 + oIm6 * tRe6);
        out512[idx + 13] = resIm6_s;
        out512[idx + 53] = -resIm6_s;
        let resRe6_s = eRe6 + (oRe6 * tRe6 - oIm6 * tRe2);
        out512[idx + 52] = resRe6_s;
        out512[idx + 12] = resRe6_s;
        let resRe10_s = eRe6 - (oRe6 * tRe6 - oIm6 * tRe2);
        out512[idx + 44] = resRe10_s;
        out512[idx + 20] = resRe10_s;
        let resIm10_s = -eIm6 + (oRe6 * tRe2 + oIm6 * tRe6);
        out512[idx + 21] = resIm10_s;
        out512[idx + 45] = -resIm10_s;
        
        let oRe7 = out512[idx + 46];
        let oIm7 = out512[idx + 47];
        let eRe7 = out512[idx + 14];
        let eIm7 = out512[idx + 15];
        let resIm7_s = eIm7 + (oRe7 * tRe1 + oIm7 * tRe7);
        out512[idx + 15] = resIm7_s;
        out512[idx + 51] = -resIm7_s;
        let resRe7_s = eRe7 + (oRe7 * tRe7 - oIm7 * tRe1);
        out512[idx + 50] = resRe7_s;
        out512[idx + 14] = resRe7_s;
        let resRe9_s = eRe7 - (oRe7 * tRe7 - oIm7 * tRe1);
        out512[idx + 46] = resRe9_s;
        out512[idx + 18] = resRe9_s;
        let resIm9_s = -eIm7 + (oRe7 * tRe1 + oIm7 * tRe7);
        out512[idx + 19] = resIm9_s;
        out512[idx + 47] = -resIm9_s;
        
        let oRe8 = out512[idx + 48];
        let oIm8 = out512[idx + 49];
        let eRe8 = out512[idx + 16];
        let eIm8 = out512[idx + 17];
        let resIm8_s = eIm8 + oRe8;
        out512[idx + 17] = resIm8_s;
        out512[idx + 49] = -resIm8_s;
        let resRe8_s = eRe8 - oIm8;
        out512[idx + 48] = resRe8_s;
        out512[idx + 16] = resRe8_s;
        
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 64 
    ////////////////////////////////////////////////
    for(let idx = 0; idx < 512; idx += 128){ 
        let oRe0 = out512[idx + 64];
        let oIm0 = out512[idx + 65];
        let eRe0 = out512[idx + 0];
        let eIm0 = out512[idx + 1];
        let resRe0_s = eRe0 + oRe0;
        out512[idx] = resRe0_s;
        let resIm0_s = eIm0 + oIm0;
        out512[idx + 1] = resRe0_s;
        let resRe0_d = eRe0 - oRe0;
        out512[idx + 64] = resRe0_d;
        let resIm0_d = eIm0 - oIm0;
        out512[idx + 65] = resIm0_d;
        
        let oRe1 = out512[idx + 66];
        let oIm1 = out512[idx + 67];
        let eRe1 = out512[idx + 2];
        let eIm1 = out512[idx + 3];
        let tRe1 = FFT_FAC_512[idx + 1];
        let tRe15 = FFT_FAC_512[idx + 15];
        let resIm1_s = eIm1 + (oRe1 * tRe15 + oIm1 * tRe1);
        out512[idx + 3] = resIm1_s;
        out512[idx + 127] = -resIm1_s;
        let resRe1_s = eRe1 + (oRe1 * tRe1 - oIm1 * tRe15);
        out512[idx + 126] = resRe1_s;
        out512[idx + 2] = resRe1_s;
        let resRe31_s = eRe1 - (oRe1 * tRe1 - oIm1 * tRe15);
        out512[idx + 66] = resRe31_s;
        out512[idx + 62] = resRe31_s;
        let resIm31_s = -eIm1 + (oRe1 * tRe15 + oIm1 * tRe1);
        out512[idx + 63] = resIm31_s;
        out512[idx + 67] = -resIm31_s;
        
        let oRe2 = out512[idx + 68];
        let oIm2 = out512[idx + 69];
        let eRe2 = out512[idx + 4];
        let eIm2 = out512[idx + 5];
        let tRe2 = FFT_FAC_512[idx + 2];
        let tRe14 = FFT_FAC_512[idx + 14];
        let resIm2_s = eIm2 + (oRe2 * tRe14 + oIm2 * tRe2);
        out512[idx + 5] = resIm2_s;
        out512[idx + 125] = -resIm2_s;
        let resRe2_s = eRe2 + (oRe2 * tRe2 - oIm2 * tRe14);
        out512[idx + 124] = resRe2_s;
        out512[idx + 4] = resRe2_s;
        let resRe30_s = eRe2 - (oRe2 * tRe2 - oIm2 * tRe14);
        out512[idx + 68] = resRe30_s;
        out512[idx + 60] = resRe30_s;
        let resIm30_s = -eIm2 + (oRe2 * tRe14 + oIm2 * tRe2);
        out512[idx + 61] = resIm30_s;
        out512[idx + 69] = -resIm30_s;
        
        let oRe3 = out512[idx + 70];
        let oIm3 = out512[idx + 71];
        let eRe3 = out512[idx + 6];
        let eIm3 = out512[idx + 7];
        let tRe3 = FFT_FAC_512[idx + 3];
        let tRe13 = FFT_FAC_512[idx + 13];
        let resIm3_s = eIm3 + (oRe3 * tRe13 + oIm3 * tRe3);
        out512[idx + 7] = resIm3_s;
        out512[idx + 123] = -resIm3_s;
        let resRe3_s = eRe3 + (oRe3 * tRe3 - oIm3 * tRe13);
        out512[idx + 122] = resRe3_s;
        out512[idx + 6] = resRe3_s;
        let resRe29_s = eRe3 - (oRe3 * tRe3 - oIm3 * tRe13);
        out512[idx + 70] = resRe29_s;
        out512[idx + 58] = resRe29_s;
        let resIm29_s = -eIm3 + (oRe3 * tRe13 + oIm3 * tRe3);
        out512[idx + 59] = resIm29_s;
        out512[idx + 71] = -resIm29_s;
        
        let oRe4 = out512[idx + 72];
        let oIm4 = out512[idx + 73];
        let eRe4 = out512[idx + 8];
        let eIm4 = out512[idx + 9];
        let tRe4 = FFT_FAC_512[idx + 4];
        let tRe12 = FFT_FAC_512[idx + 12];
        let resIm4_s = eIm4 + (oRe4 * tRe12 + oIm4 * tRe4);
        out512[idx + 9] = resIm4_s;
        out512[idx + 121] = -resIm4_s;
        let resRe4_s = eRe4 + (oRe4 * tRe4 - oIm4 * tRe12);
        out512[idx + 120] = resRe4_s;
        out512[idx + 8] = resRe4_s;
        let resRe28_s = eRe4 - (oRe4 * tRe4 - oIm4 * tRe12);
        out512[idx + 72] = resRe28_s;
        out512[idx + 56] = resRe28_s;
        let resIm28_s = -eIm4 + (oRe4 * tRe12 + oIm4 * tRe4);
        out512[idx + 57] = resIm28_s;
        out512[idx + 73] = -resIm28_s;
        
        let oRe5 = out512[idx + 74];
        let oIm5 = out512[idx + 75];
        let eRe5 = out512[idx + 10];
        let eIm5 = out512[idx + 11];
        let tRe5 = FFT_FAC_512[idx + 5];
        let tRe11 = FFT_FAC_512[idx + 11];
        let resIm5_s = eIm5 + (oRe5 * tRe11 + oIm5 * tRe5);
        out512[idx + 11] = resIm5_s;
        out512[idx + 119] = -resIm5_s;
        let resRe5_s = eRe5 + (oRe5 * tRe5 - oIm5 * tRe11);
        out512[idx + 118] = resRe5_s;
        out512[idx + 10] = resRe5_s;
        let resRe27_s = eRe5 - (oRe5 * tRe5 - oIm5 * tRe11);
        out512[idx + 74] = resRe27_s;
        out512[idx + 54] = resRe27_s;
        let resIm27_s = -eIm5 + (oRe5 * tRe11 + oIm5 * tRe5);
        out512[idx + 55] = resIm27_s;
        out512[idx + 75] = -resIm27_s;
        
        let oRe6 = out512[idx + 76];
        let oIm6 = out512[idx + 77];
        let eRe6 = out512[idx + 12];
        let eIm6 = out512[idx + 13];
        let tRe6 = FFT_FAC_512[idx + 6];
        let tRe10 = FFT_FAC_512[idx + 10];
        let resIm6_s = eIm6 + (oRe6 * tRe10 + oIm6 * tRe6);
        out512[idx + 13] = resIm6_s;
        out512[idx + 117] = -resIm6_s;
        let resRe6_s = eRe6 + (oRe6 * tRe6 - oIm6 * tRe10);
        out512[idx + 116] = resRe6_s;
        out512[idx + 12] = resRe6_s;
        let resRe26_s = eRe6 - (oRe6 * tRe6 - oIm6 * tRe10);
        out512[idx + 76] = resRe26_s;
        out512[idx + 52] = resRe26_s;
        let resIm26_s = -eIm6 + (oRe6 * tRe10 + oIm6 * tRe6);
        out512[idx + 53] = resIm26_s;
        out512[idx + 77] = -resIm26_s;
        
        let oRe7 = out512[idx + 78];
        let oIm7 = out512[idx + 79];
        let eRe7 = out512[idx + 14];
        let eIm7 = out512[idx + 15];
        let tRe7 = FFT_FAC_512[idx + 7];
        let tRe9 = FFT_FAC_512[idx + 9];
        let resIm7_s = eIm7 + (oRe7 * tRe9 + oIm7 * tRe7);
        out512[idx + 15] = resIm7_s;
        out512[idx + 115] = -resIm7_s;
        let resRe7_s = eRe7 + (oRe7 * tRe7 - oIm7 * tRe9);
        out512[idx + 114] = resRe7_s;
        out512[idx + 14] = resRe7_s;
        let resRe25_s = eRe7 - (oRe7 * tRe7 - oIm7 * tRe9);
        out512[idx + 78] = resRe25_s;
        out512[idx + 50] = resRe25_s;
        let resIm25_s = -eIm7 + (oRe7 * tRe9 + oIm7 * tRe7);
        out512[idx + 51] = resIm25_s;
        out512[idx + 79] = -resIm25_s;
        
        let oRe8 = out512[idx + 80];
        let oIm8 = out512[idx + 81];
        let eRe8 = out512[idx + 16];
        let eIm8 = out512[idx + 17];
        let tRe8 = FFT_FAC_512[idx + 8];
        let resIm8_s = eIm8 + (oRe8 * tRe8 + oIm8 * tRe8);
        out512[idx + 17] = resIm8_s;
        out512[idx + 113] = -resIm8_s;
        let resRe8_s = eRe8 + (oRe8 * tRe8 - oIm8 * tRe8);
        out512[idx + 112] = resRe8_s;
        out512[idx + 16] = resRe8_s;
        let resRe24_s = eRe8 - (oRe8 * tRe8 - oIm8 * tRe8);
        out512[idx + 80] = resRe24_s;
        out512[idx + 48] = resRe24_s;
        let resIm24_s = -eIm8 + (oRe8 * tRe8 + oIm8 * tRe8);
        out512[idx + 49] = resIm24_s;
        out512[idx + 81] = -resIm24_s;
        
        let oRe9 = out512[idx + 82];
        let oIm9 = out512[idx + 83];
        let eRe9 = out512[idx + 18];
        let eIm9 = out512[idx + 19];
        let resIm9_s = eIm9 + (oRe9 * tRe7 + oIm9 * tRe9);
        out512[idx + 19] = resIm9_s;
        out512[idx + 111] = -resIm9_s;
        let resRe9_s = eRe9 + (oRe9 * tRe9 - oIm9 * tRe7);
        out512[idx + 110] = resRe9_s;
        out512[idx + 18] = resRe9_s;
        let resRe23_s = eRe9 - (oRe9 * tRe9 - oIm9 * tRe7);
        out512[idx + 82] = resRe23_s;
        out512[idx + 46] = resRe23_s;
        let resIm23_s = -eIm9 + (oRe9 * tRe7 + oIm9 * tRe9);
        out512[idx + 47] = resIm23_s;
        out512[idx + 83] = -resIm23_s;
        
        let oRe10 = out512[idx + 84];
        let oIm10 = out512[idx + 85];
        let eRe10 = out512[idx + 20];
        let eIm10 = out512[idx + 21];
        let resIm10_s = eIm10 + (oRe10 * tRe6 + oIm10 * tRe10);
        out512[idx + 21] = resIm10_s;
        out512[idx + 109] = -resIm10_s;
        let resRe10_s = eRe10 + (oRe10 * tRe10 - oIm10 * tRe6);
        out512[idx + 108] = resRe10_s;
        out512[idx + 20] = resRe10_s;
        let resRe22_s = eRe10 - (oRe10 * tRe10 - oIm10 * tRe6);
        out512[idx + 84] = resRe22_s;
        out512[idx + 44] = resRe22_s;
        let resIm22_s = -eIm10 + (oRe10 * tRe6 + oIm10 * tRe10);
        out512[idx + 45] = resIm22_s;
        out512[idx + 85] = -resIm22_s;
        
        let oRe11 = out512[idx + 86];
        let oIm11 = out512[idx + 87];
        let eRe11 = out512[idx + 22];
        let eIm11 = out512[idx + 23];
        let resIm11_s = eIm11 + (oRe11 * tRe5 + oIm11 * tRe11);
        out512[idx + 23] = resIm11_s;
        out512[idx + 107] = -resIm11_s;
        let resRe11_s = eRe11 + (oRe11 * tRe11 - oIm11 * tRe5);
        out512[idx + 106] = resRe11_s;
        out512[idx + 22] = resRe11_s;
        let resRe21_s = eRe11 - (oRe11 * tRe11 - oIm11 * tRe5);
        out512[idx + 86] = resRe21_s;
        out512[idx + 42] = resRe21_s;
        let resIm21_s = -eIm11 + (oRe11 * tRe5 + oIm11 * tRe11);
        out512[idx + 43] = resIm21_s;
        out512[idx + 87] = -resIm21_s;
        
        let oRe12 = out512[idx + 88];
        let oIm12 = out512[idx + 89];
        let eRe12 = out512[idx + 24];
        let eIm12 = out512[idx + 25];
        let resIm12_s = eIm12 + (oRe12 * tRe4 + oIm12 * tRe12);
        out512[idx + 25] = resIm12_s;
        out512[idx + 105] = -resIm12_s;
        let resRe12_s = eRe12 + (oRe12 * tRe12 - oIm12 * tRe4);
        out512[idx + 104] = resRe12_s;
        out512[idx + 24] = resRe12_s;
        let resRe20_s = eRe12 - (oRe12 * tRe12 - oIm12 * tRe4);
        out512[idx + 88] = resRe20_s;
        out512[idx + 40] = resRe20_s;
        let resIm20_s = -eIm12 + (oRe12 * tRe4 + oIm12 * tRe12);
        out512[idx + 41] = resIm20_s;
        out512[idx + 89] = -resIm20_s;
        
        let oRe13 = out512[idx + 90];
        let oIm13 = out512[idx + 91];
        let eRe13 = out512[idx + 26];
        let eIm13 = out512[idx + 27];
        let resIm13_s = eIm13 + (oRe13 * tRe3 + oIm13 * tRe13);
        out512[idx + 27] = resIm13_s;
        out512[idx + 103] = -resIm13_s;
        let resRe13_s = eRe13 + (oRe13 * tRe13 - oIm13 * tRe3);
        out512[idx + 102] = resRe13_s;
        out512[idx + 26] = resRe13_s;
        let resRe19_s = eRe13 - (oRe13 * tRe13 - oIm13 * tRe3);
        out512[idx + 90] = resRe19_s;
        out512[idx + 38] = resRe19_s;
        let resIm19_s = -eIm13 + (oRe13 * tRe3 + oIm13 * tRe13);
        out512[idx + 39] = resIm19_s;
        out512[idx + 91] = -resIm19_s;
        
        let oRe14 = out512[idx + 92];
        let oIm14 = out512[idx + 93];
        let eRe14 = out512[idx + 28];
        let eIm14 = out512[idx + 29];
        let resIm14_s = eIm14 + (oRe14 * tRe2 + oIm14 * tRe14);
        out512[idx + 29] = resIm14_s;
        out512[idx + 101] = -resIm14_s;
        let resRe14_s = eRe14 + (oRe14 * tRe14 - oIm14 * tRe2);
        out512[idx + 100] = resRe14_s;
        out512[idx + 28] = resRe14_s;
        let resRe18_s = eRe14 - (oRe14 * tRe14 - oIm14 * tRe2);
        out512[idx + 92] = resRe18_s;
        out512[idx + 36] = resRe18_s;
        let resIm18_s = -eIm14 + (oRe14 * tRe2 + oIm14 * tRe14);
        out512[idx + 37] = resIm18_s;
        out512[idx + 93] = -resIm18_s;
        
        let oRe15 = out512[idx + 94];
        let oIm15 = out512[idx + 95];
        let eRe15 = out512[idx + 30];
        let eIm15 = out512[idx + 31];
        let resIm15_s = eIm15 + (oRe15 * tRe1 + oIm15 * tRe15);
        out512[idx + 31] = resIm15_s;
        out512[idx + 99] = -resIm15_s;
        let resRe15_s = eRe15 + (oRe15 * tRe15 - oIm15 * tRe1);
        out512[idx + 98] = resRe15_s;
        out512[idx + 30] = resRe15_s;
        let resRe17_s = eRe15 - (oRe15 * tRe15 - oIm15 * tRe1);
        out512[idx + 94] = resRe17_s;
        out512[idx + 34] = resRe17_s;
        let resIm17_s = -eIm15 + (oRe15 * tRe1 + oIm15 * tRe15);
        out512[idx + 35] = resIm17_s;
        out512[idx + 95] = -resIm17_s;
        
        let oRe16 = out512[idx + 96];
        let oIm16 = out512[idx + 97];
        let eRe16 = out512[idx + 32];
        let eIm16 = out512[idx + 33];
        let resIm16_s = eIm16 + oRe16;
        out512[idx + 33] = resIm16_s;
        out512[idx + 97] = -resIm16_s;
        let resRe16_s = eRe16 - oIm16;
        out512[idx + 96] = resRe16_s;
        out512[idx + 32] = resRe16_s;
        
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 128 
    ////////////////////////////////////////////////
    for(let idx = 0; idx < 512; idx += 256){ 
        let oRe0 = out512[idx + 128];
        let oIm0 = out512[idx + 129];
        let eRe0 = out512[idx + 0];
        let eIm0 = out512[idx + 1];
        let resRe0_s = eRe0 + oRe0;
        out512[idx] = resRe0_s;
        let resIm0_s = eIm0 + oIm0;
        out512[idx + 1] = resRe0_s;
        let resRe0_d = eRe0 - oRe0;
        out512[idx + 128] = resRe0_d;
        let resIm0_d = eIm0 - oIm0;
        out512[idx + 129] = resIm0_d;
        
        let oRe1 = out512[idx + 130];
        let oIm1 = out512[idx + 131];
        let eRe1 = out512[idx + 2];
        let eIm1 = out512[idx + 3];
        let tRe1 = FFT_FAC_512[idx + 1];
        let tRe31 = FFT_FAC_512[idx + 31];
        let resIm1_s = eIm1 + (oRe1 * tRe31 + oIm1 * tRe1);
        out512[idx + 3] = resIm1_s;
        out512[idx + 255] = -resIm1_s;
        let resRe1_s = eRe1 + (oRe1 * tRe1 - oIm1 * tRe31);
        out512[idx + 254] = resRe1_s;
        out512[idx + 2] = resRe1_s;
        let resRe63_s = eRe1 - (oRe1 * tRe1 - oIm1 * tRe31);
        out512[idx + 130] = resRe63_s;
        out512[idx + 126] = resRe63_s;
        let resIm63_s = -eIm1 + (oRe1 * tRe31 + oIm1 * tRe1);
        out512[idx + 127] = resIm63_s;
        out512[idx + 131] = -resIm63_s;
        
        let oRe2 = out512[idx + 132];
        let oIm2 = out512[idx + 133];
        let eRe2 = out512[idx + 4];
        let eIm2 = out512[idx + 5];
        let tRe2 = FFT_FAC_512[idx + 2];
        let tRe30 = FFT_FAC_512[idx + 30];
        let resIm2_s = eIm2 + (oRe2 * tRe30 + oIm2 * tRe2);
        out512[idx + 5] = resIm2_s;
        out512[idx + 253] = -resIm2_s;
        let resRe2_s = eRe2 + (oRe2 * tRe2 - oIm2 * tRe30);
        out512[idx + 252] = resRe2_s;
        out512[idx + 4] = resRe2_s;
        let resRe62_s = eRe2 - (oRe2 * tRe2 - oIm2 * tRe30);
        out512[idx + 132] = resRe62_s;
        out512[idx + 124] = resRe62_s;
        let resIm62_s = -eIm2 + (oRe2 * tRe30 + oIm2 * tRe2);
        out512[idx + 125] = resIm62_s;
        out512[idx + 133] = -resIm62_s;
        
        let oRe3 = out512[idx + 134];
        let oIm3 = out512[idx + 135];
        let eRe3 = out512[idx + 6];
        let eIm3 = out512[idx + 7];
        let tRe3 = FFT_FAC_512[idx + 3];
        let tRe29 = FFT_FAC_512[idx + 29];
        let resIm3_s = eIm3 + (oRe3 * tRe29 + oIm3 * tRe3);
        out512[idx + 7] = resIm3_s;
        out512[idx + 251] = -resIm3_s;
        let resRe3_s = eRe3 + (oRe3 * tRe3 - oIm3 * tRe29);
        out512[idx + 250] = resRe3_s;
        out512[idx + 6] = resRe3_s;
        let resRe61_s = eRe3 - (oRe3 * tRe3 - oIm3 * tRe29);
        out512[idx + 134] = resRe61_s;
        out512[idx + 122] = resRe61_s;
        let resIm61_s = -eIm3 + (oRe3 * tRe29 + oIm3 * tRe3);
        out512[idx + 123] = resIm61_s;
        out512[idx + 135] = -resIm61_s;
        
        let oRe4 = out512[idx + 136];
        let oIm4 = out512[idx + 137];
        let eRe4 = out512[idx + 8];
        let eIm4 = out512[idx + 9];
        let tRe4 = FFT_FAC_512[idx + 4];
        let tRe28 = FFT_FAC_512[idx + 28];
        let resIm4_s = eIm4 + (oRe4 * tRe28 + oIm4 * tRe4);
        out512[idx + 9] = resIm4_s;
        out512[idx + 249] = -resIm4_s;
        let resRe4_s = eRe4 + (oRe4 * tRe4 - oIm4 * tRe28);
        out512[idx + 248] = resRe4_s;
        out512[idx + 8] = resRe4_s;
        let resRe60_s = eRe4 - (oRe4 * tRe4 - oIm4 * tRe28);
        out512[idx + 136] = resRe60_s;
        out512[idx + 120] = resRe60_s;
        let resIm60_s = -eIm4 + (oRe4 * tRe28 + oIm4 * tRe4);
        out512[idx + 121] = resIm60_s;
        out512[idx + 137] = -resIm60_s;
        
        let oRe5 = out512[idx + 138];
        let oIm5 = out512[idx + 139];
        let eRe5 = out512[idx + 10];
        let eIm5 = out512[idx + 11];
        let tRe5 = FFT_FAC_512[idx + 5];
        let tRe27 = FFT_FAC_512[idx + 27];
        let resIm5_s = eIm5 + (oRe5 * tRe27 + oIm5 * tRe5);
        out512[idx + 11] = resIm5_s;
        out512[idx + 247] = -resIm5_s;
        let resRe5_s = eRe5 + (oRe5 * tRe5 - oIm5 * tRe27);
        out512[idx + 246] = resRe5_s;
        out512[idx + 10] = resRe5_s;
        let resRe59_s = eRe5 - (oRe5 * tRe5 - oIm5 * tRe27);
        out512[idx + 138] = resRe59_s;
        out512[idx + 118] = resRe59_s;
        let resIm59_s = -eIm5 + (oRe5 * tRe27 + oIm5 * tRe5);
        out512[idx + 119] = resIm59_s;
        out512[idx + 139] = -resIm59_s;
        
        let oRe6 = out512[idx + 140];
        let oIm6 = out512[idx + 141];
        let eRe6 = out512[idx + 12];
        let eIm6 = out512[idx + 13];
        let tRe6 = FFT_FAC_512[idx + 6];
        let tRe26 = FFT_FAC_512[idx + 26];
        let resIm6_s = eIm6 + (oRe6 * tRe26 + oIm6 * tRe6);
        out512[idx + 13] = resIm6_s;
        out512[idx + 245] = -resIm6_s;
        let resRe6_s = eRe6 + (oRe6 * tRe6 - oIm6 * tRe26);
        out512[idx + 244] = resRe6_s;
        out512[idx + 12] = resRe6_s;
        let resRe58_s = eRe6 - (oRe6 * tRe6 - oIm6 * tRe26);
        out512[idx + 140] = resRe58_s;
        out512[idx + 116] = resRe58_s;
        let resIm58_s = -eIm6 + (oRe6 * tRe26 + oIm6 * tRe6);
        out512[idx + 117] = resIm58_s;
        out512[idx + 141] = -resIm58_s;
        
        let oRe7 = out512[idx + 142];
        let oIm7 = out512[idx + 143];
        let eRe7 = out512[idx + 14];
        let eIm7 = out512[idx + 15];
        let tRe7 = FFT_FAC_512[idx + 7];
        let tRe25 = FFT_FAC_512[idx + 25];
        let resIm7_s = eIm7 + (oRe7 * tRe25 + oIm7 * tRe7);
        out512[idx + 15] = resIm7_s;
        out512[idx + 243] = -resIm7_s;
        let resRe7_s = eRe7 + (oRe7 * tRe7 - oIm7 * tRe25);
        out512[idx + 242] = resRe7_s;
        out512[idx + 14] = resRe7_s;
        let resRe57_s = eRe7 - (oRe7 * tRe7 - oIm7 * tRe25);
        out512[idx + 142] = resRe57_s;
        out512[idx + 114] = resRe57_s;
        let resIm57_s = -eIm7 + (oRe7 * tRe25 + oIm7 * tRe7);
        out512[idx + 115] = resIm57_s;
        out512[idx + 143] = -resIm57_s;
        
        let oRe8 = out512[idx + 144];
        let oIm8 = out512[idx + 145];
        let eRe8 = out512[idx + 16];
        let eIm8 = out512[idx + 17];
        let tRe8 = FFT_FAC_512[idx + 8];
        let tRe24 = FFT_FAC_512[idx + 24];
        let resIm8_s = eIm8 + (oRe8 * tRe24 + oIm8 * tRe8);
        out512[idx + 17] = resIm8_s;
        out512[idx + 241] = -resIm8_s;
        let resRe8_s = eRe8 + (oRe8 * tRe8 - oIm8 * tRe24);
        out512[idx + 240] = resRe8_s;
        out512[idx + 16] = resRe8_s;
        let resRe56_s = eRe8 - (oRe8 * tRe8 - oIm8 * tRe24);
        out512[idx + 144] = resRe56_s;
        out512[idx + 112] = resRe56_s;
        let resIm56_s = -eIm8 + (oRe8 * tRe24 + oIm8 * tRe8);
        out512[idx + 113] = resIm56_s;
        out512[idx + 145] = -resIm56_s;
        
        let oRe9 = out512[idx + 146];
        let oIm9 = out512[idx + 147];
        let eRe9 = out512[idx + 18];
        let eIm9 = out512[idx + 19];
        let tRe9 = FFT_FAC_512[idx + 9];
        let tRe23 = FFT_FAC_512[idx + 23];
        let resIm9_s = eIm9 + (oRe9 * tRe23 + oIm9 * tRe9);
        out512[idx + 19] = resIm9_s;
        out512[idx + 239] = -resIm9_s;
        let resRe9_s = eRe9 + (oRe9 * tRe9 - oIm9 * tRe23);
        out512[idx + 238] = resRe9_s;
        out512[idx + 18] = resRe9_s;
        let resRe55_s = eRe9 - (oRe9 * tRe9 - oIm9 * tRe23);
        out512[idx + 146] = resRe55_s;
        out512[idx + 110] = resRe55_s;
        let resIm55_s = -eIm9 + (oRe9 * tRe23 + oIm9 * tRe9);
        out512[idx + 111] = resIm55_s;
        out512[idx + 147] = -resIm55_s;
        
        let oRe10 = out512[idx + 148];
        let oIm10 = out512[idx + 149];
        let eRe10 = out512[idx + 20];
        let eIm10 = out512[idx + 21];
        let tRe10 = FFT_FAC_512[idx + 10];
        let tRe22 = FFT_FAC_512[idx + 22];
        let resIm10_s = eIm10 + (oRe10 * tRe22 + oIm10 * tRe10);
        out512[idx + 21] = resIm10_s;
        out512[idx + 237] = -resIm10_s;
        let resRe10_s = eRe10 + (oRe10 * tRe10 - oIm10 * tRe22);
        out512[idx + 236] = resRe10_s;
        out512[idx + 20] = resRe10_s;
        let resRe54_s = eRe10 - (oRe10 * tRe10 - oIm10 * tRe22);
        out512[idx + 148] = resRe54_s;
        out512[idx + 108] = resRe54_s;
        let resIm54_s = -eIm10 + (oRe10 * tRe22 + oIm10 * tRe10);
        out512[idx + 109] = resIm54_s;
        out512[idx + 149] = -resIm54_s;
        
        let oRe11 = out512[idx + 150];
        let oIm11 = out512[idx + 151];
        let eRe11 = out512[idx + 22];
        let eIm11 = out512[idx + 23];
        let tRe11 = FFT_FAC_512[idx + 11];
        let tRe21 = FFT_FAC_512[idx + 21];
        let resIm11_s = eIm11 + (oRe11 * tRe21 + oIm11 * tRe11);
        out512[idx + 23] = resIm11_s;
        out512[idx + 235] = -resIm11_s;
        let resRe11_s = eRe11 + (oRe11 * tRe11 - oIm11 * tRe21);
        out512[idx + 234] = resRe11_s;
        out512[idx + 22] = resRe11_s;
        let resRe53_s = eRe11 - (oRe11 * tRe11 - oIm11 * tRe21);
        out512[idx + 150] = resRe53_s;
        out512[idx + 106] = resRe53_s;
        let resIm53_s = -eIm11 + (oRe11 * tRe21 + oIm11 * tRe11);
        out512[idx + 107] = resIm53_s;
        out512[idx + 151] = -resIm53_s;
        
        let oRe12 = out512[idx + 152];
        let oIm12 = out512[idx + 153];
        let eRe12 = out512[idx + 24];
        let eIm12 = out512[idx + 25];
        let tRe12 = FFT_FAC_512[idx + 12];
        let tRe20 = FFT_FAC_512[idx + 20];
        let resIm12_s = eIm12 + (oRe12 * tRe20 + oIm12 * tRe12);
        out512[idx + 25] = resIm12_s;
        out512[idx + 233] = -resIm12_s;
        let resRe12_s = eRe12 + (oRe12 * tRe12 - oIm12 * tRe20);
        out512[idx + 232] = resRe12_s;
        out512[idx + 24] = resRe12_s;
        let resRe52_s = eRe12 - (oRe12 * tRe12 - oIm12 * tRe20);
        out512[idx + 152] = resRe52_s;
        out512[idx + 104] = resRe52_s;
        let resIm52_s = -eIm12 + (oRe12 * tRe20 + oIm12 * tRe12);
        out512[idx + 105] = resIm52_s;
        out512[idx + 153] = -resIm52_s;
        
        let oRe13 = out512[idx + 154];
        let oIm13 = out512[idx + 155];
        let eRe13 = out512[idx + 26];
        let eIm13 = out512[idx + 27];
        let tRe13 = FFT_FAC_512[idx + 13];
        let tRe19 = FFT_FAC_512[idx + 19];
        let resIm13_s = eIm13 + (oRe13 * tRe19 + oIm13 * tRe13);
        out512[idx + 27] = resIm13_s;
        out512[idx + 231] = -resIm13_s;
        let resRe13_s = eRe13 + (oRe13 * tRe13 - oIm13 * tRe19);
        out512[idx + 230] = resRe13_s;
        out512[idx + 26] = resRe13_s;
        let resRe51_s = eRe13 - (oRe13 * tRe13 - oIm13 * tRe19);
        out512[idx + 154] = resRe51_s;
        out512[idx + 102] = resRe51_s;
        let resIm51_s = -eIm13 + (oRe13 * tRe19 + oIm13 * tRe13);
        out512[idx + 103] = resIm51_s;
        out512[idx + 155] = -resIm51_s;
        
        let oRe14 = out512[idx + 156];
        let oIm14 = out512[idx + 157];
        let eRe14 = out512[idx + 28];
        let eIm14 = out512[idx + 29];
        let tRe14 = FFT_FAC_512[idx + 14];
        let tRe18 = FFT_FAC_512[idx + 18];
        let resIm14_s = eIm14 + (oRe14 * tRe18 + oIm14 * tRe14);
        out512[idx + 29] = resIm14_s;
        out512[idx + 229] = -resIm14_s;
        let resRe14_s = eRe14 + (oRe14 * tRe14 - oIm14 * tRe18);
        out512[idx + 228] = resRe14_s;
        out512[idx + 28] = resRe14_s;
        let resRe50_s = eRe14 - (oRe14 * tRe14 - oIm14 * tRe18);
        out512[idx + 156] = resRe50_s;
        out512[idx + 100] = resRe50_s;
        let resIm50_s = -eIm14 + (oRe14 * tRe18 + oIm14 * tRe14);
        out512[idx + 101] = resIm50_s;
        out512[idx + 157] = -resIm50_s;
        
        let oRe15 = out512[idx + 158];
        let oIm15 = out512[idx + 159];
        let eRe15 = out512[idx + 30];
        let eIm15 = out512[idx + 31];
        let tRe15 = FFT_FAC_512[idx + 15];
        let tRe17 = FFT_FAC_512[idx + 17];
        let resIm15_s = eIm15 + (oRe15 * tRe17 + oIm15 * tRe15);
        out512[idx + 31] = resIm15_s;
        out512[idx + 227] = -resIm15_s;
        let resRe15_s = eRe15 + (oRe15 * tRe15 - oIm15 * tRe17);
        out512[idx + 226] = resRe15_s;
        out512[idx + 30] = resRe15_s;
        let resRe49_s = eRe15 - (oRe15 * tRe15 - oIm15 * tRe17);
        out512[idx + 158] = resRe49_s;
        out512[idx + 98] = resRe49_s;
        let resIm49_s = -eIm15 + (oRe15 * tRe17 + oIm15 * tRe15);
        out512[idx + 99] = resIm49_s;
        out512[idx + 159] = -resIm49_s;
        
        let oRe16 = out512[idx + 160];
        let oIm16 = out512[idx + 161];
        let eRe16 = out512[idx + 32];
        let eIm16 = out512[idx + 33];
        let tRe16 = FFT_FAC_512[idx + 16];
        let resIm16_s = eIm16 + (oRe16 * tRe16 + oIm16 * tRe16);
        out512[idx + 33] = resIm16_s;
        out512[idx + 225] = -resIm16_s;
        let resRe16_s = eRe16 + (oRe16 * tRe16 - oIm16 * tRe16);
        out512[idx + 224] = resRe16_s;
        out512[idx + 32] = resRe16_s;
        let resRe48_s = eRe16 - (oRe16 * tRe16 - oIm16 * tRe16);
        out512[idx + 160] = resRe48_s;
        out512[idx + 96] = resRe48_s;
        let resIm48_s = -eIm16 + (oRe16 * tRe16 + oIm16 * tRe16);
        out512[idx + 97] = resIm48_s;
        out512[idx + 161] = -resIm48_s;
        
        let oRe17 = out512[idx + 162];
        let oIm17 = out512[idx + 163];
        let eRe17 = out512[idx + 34];
        let eIm17 = out512[idx + 35];
        let resIm17_s = eIm17 + (oRe17 * tRe15 + oIm17 * tRe17);
        out512[idx + 35] = resIm17_s;
        out512[idx + 223] = -resIm17_s;
        let resRe17_s = eRe17 + (oRe17 * tRe17 - oIm17 * tRe15);
        out512[idx + 222] = resRe17_s;
        out512[idx + 34] = resRe17_s;
        let resRe47_s = eRe17 - (oRe17 * tRe17 - oIm17 * tRe15);
        out512[idx + 162] = resRe47_s;
        out512[idx + 94] = resRe47_s;
        let resIm47_s = -eIm17 + (oRe17 * tRe15 + oIm17 * tRe17);
        out512[idx + 95] = resIm47_s;
        out512[idx + 163] = -resIm47_s;
        
        let oRe18 = out512[idx + 164];
        let oIm18 = out512[idx + 165];
        let eRe18 = out512[idx + 36];
        let eIm18 = out512[idx + 37];
        let resIm18_s = eIm18 + (oRe18 * tRe14 + oIm18 * tRe18);
        out512[idx + 37] = resIm18_s;
        out512[idx + 221] = -resIm18_s;
        let resRe18_s = eRe18 + (oRe18 * tRe18 - oIm18 * tRe14);
        out512[idx + 220] = resRe18_s;
        out512[idx + 36] = resRe18_s;
        let resRe46_s = eRe18 - (oRe18 * tRe18 - oIm18 * tRe14);
        out512[idx + 164] = resRe46_s;
        out512[idx + 92] = resRe46_s;
        let resIm46_s = -eIm18 + (oRe18 * tRe14 + oIm18 * tRe18);
        out512[idx + 93] = resIm46_s;
        out512[idx + 165] = -resIm46_s;
        
        let oRe19 = out512[idx + 166];
        let oIm19 = out512[idx + 167];
        let eRe19 = out512[idx + 38];
        let eIm19 = out512[idx + 39];
        let resIm19_s = eIm19 + (oRe19 * tRe13 + oIm19 * tRe19);
        out512[idx + 39] = resIm19_s;
        out512[idx + 219] = -resIm19_s;
        let resRe19_s = eRe19 + (oRe19 * tRe19 - oIm19 * tRe13);
        out512[idx + 218] = resRe19_s;
        out512[idx + 38] = resRe19_s;
        let resRe45_s = eRe19 - (oRe19 * tRe19 - oIm19 * tRe13);
        out512[idx + 166] = resRe45_s;
        out512[idx + 90] = resRe45_s;
        let resIm45_s = -eIm19 + (oRe19 * tRe13 + oIm19 * tRe19);
        out512[idx + 91] = resIm45_s;
        out512[idx + 167] = -resIm45_s;
        
        let oRe20 = out512[idx + 168];
        let oIm20 = out512[idx + 169];
        let eRe20 = out512[idx + 40];
        let eIm20 = out512[idx + 41];
        let resIm20_s = eIm20 + (oRe20 * tRe12 + oIm20 * tRe20);
        out512[idx + 41] = resIm20_s;
        out512[idx + 217] = -resIm20_s;
        let resRe20_s = eRe20 + (oRe20 * tRe20 - oIm20 * tRe12);
        out512[idx + 216] = resRe20_s;
        out512[idx + 40] = resRe20_s;
        let resRe44_s = eRe20 - (oRe20 * tRe20 - oIm20 * tRe12);
        out512[idx + 168] = resRe44_s;
        out512[idx + 88] = resRe44_s;
        let resIm44_s = -eIm20 + (oRe20 * tRe12 + oIm20 * tRe20);
        out512[idx + 89] = resIm44_s;
        out512[idx + 169] = -resIm44_s;
        
        let oRe21 = out512[idx + 170];
        let oIm21 = out512[idx + 171];
        let eRe21 = out512[idx + 42];
        let eIm21 = out512[idx + 43];
        let resIm21_s = eIm21 + (oRe21 * tRe11 + oIm21 * tRe21);
        out512[idx + 43] = resIm21_s;
        out512[idx + 215] = -resIm21_s;
        let resRe21_s = eRe21 + (oRe21 * tRe21 - oIm21 * tRe11);
        out512[idx + 214] = resRe21_s;
        out512[idx + 42] = resRe21_s;
        let resRe43_s = eRe21 - (oRe21 * tRe21 - oIm21 * tRe11);
        out512[idx + 170] = resRe43_s;
        out512[idx + 86] = resRe43_s;
        let resIm43_s = -eIm21 + (oRe21 * tRe11 + oIm21 * tRe21);
        out512[idx + 87] = resIm43_s;
        out512[idx + 171] = -resIm43_s;
        
        let oRe22 = out512[idx + 172];
        let oIm22 = out512[idx + 173];
        let eRe22 = out512[idx + 44];
        let eIm22 = out512[idx + 45];
        let resIm22_s = eIm22 + (oRe22 * tRe10 + oIm22 * tRe22);
        out512[idx + 45] = resIm22_s;
        out512[idx + 213] = -resIm22_s;
        let resRe22_s = eRe22 + (oRe22 * tRe22 - oIm22 * tRe10);
        out512[idx + 212] = resRe22_s;
        out512[idx + 44] = resRe22_s;
        let resRe42_s = eRe22 - (oRe22 * tRe22 - oIm22 * tRe10);
        out512[idx + 172] = resRe42_s;
        out512[idx + 84] = resRe42_s;
        let resIm42_s = -eIm22 + (oRe22 * tRe10 + oIm22 * tRe22);
        out512[idx + 85] = resIm42_s;
        out512[idx + 173] = -resIm42_s;
        
        let oRe23 = out512[idx + 174];
        let oIm23 = out512[idx + 175];
        let eRe23 = out512[idx + 46];
        let eIm23 = out512[idx + 47];
        let resIm23_s = eIm23 + (oRe23 * tRe9 + oIm23 * tRe23);
        out512[idx + 47] = resIm23_s;
        out512[idx + 211] = -resIm23_s;
        let resRe23_s = eRe23 + (oRe23 * tRe23 - oIm23 * tRe9);
        out512[idx + 210] = resRe23_s;
        out512[idx + 46] = resRe23_s;
        let resRe41_s = eRe23 - (oRe23 * tRe23 - oIm23 * tRe9);
        out512[idx + 174] = resRe41_s;
        out512[idx + 82] = resRe41_s;
        let resIm41_s = -eIm23 + (oRe23 * tRe9 + oIm23 * tRe23);
        out512[idx + 83] = resIm41_s;
        out512[idx + 175] = -resIm41_s;
        
        let oRe24 = out512[idx + 176];
        let oIm24 = out512[idx + 177];
        let eRe24 = out512[idx + 48];
        let eIm24 = out512[idx + 49];
        let resIm24_s = eIm24 + (oRe24 * tRe8 + oIm24 * tRe24);
        out512[idx + 49] = resIm24_s;
        out512[idx + 209] = -resIm24_s;
        let resRe24_s = eRe24 + (oRe24 * tRe24 - oIm24 * tRe8);
        out512[idx + 208] = resRe24_s;
        out512[idx + 48] = resRe24_s;
        let resRe40_s = eRe24 - (oRe24 * tRe24 - oIm24 * tRe8);
        out512[idx + 176] = resRe40_s;
        out512[idx + 80] = resRe40_s;
        let resIm40_s = -eIm24 + (oRe24 * tRe8 + oIm24 * tRe24);
        out512[idx + 81] = resIm40_s;
        out512[idx + 177] = -resIm40_s;
        
        let oRe25 = out512[idx + 178];
        let oIm25 = out512[idx + 179];
        let eRe25 = out512[idx + 50];
        let eIm25 = out512[idx + 51];
        let resIm25_s = eIm25 + (oRe25 * tRe7 + oIm25 * tRe25);
        out512[idx + 51] = resIm25_s;
        out512[idx + 207] = -resIm25_s;
        let resRe25_s = eRe25 + (oRe25 * tRe25 - oIm25 * tRe7);
        out512[idx + 206] = resRe25_s;
        out512[idx + 50] = resRe25_s;
        let resRe39_s = eRe25 - (oRe25 * tRe25 - oIm25 * tRe7);
        out512[idx + 178] = resRe39_s;
        out512[idx + 78] = resRe39_s;
        let resIm39_s = -eIm25 + (oRe25 * tRe7 + oIm25 * tRe25);
        out512[idx + 79] = resIm39_s;
        out512[idx + 179] = -resIm39_s;
        
        let oRe26 = out512[idx + 180];
        let oIm26 = out512[idx + 181];
        let eRe26 = out512[idx + 52];
        let eIm26 = out512[idx + 53];
        let resIm26_s = eIm26 + (oRe26 * tRe6 + oIm26 * tRe26);
        out512[idx + 53] = resIm26_s;
        out512[idx + 205] = -resIm26_s;
        let resRe26_s = eRe26 + (oRe26 * tRe26 - oIm26 * tRe6);
        out512[idx + 204] = resRe26_s;
        out512[idx + 52] = resRe26_s;
        let resRe38_s = eRe26 - (oRe26 * tRe26 - oIm26 * tRe6);
        out512[idx + 180] = resRe38_s;
        out512[idx + 76] = resRe38_s;
        let resIm38_s = -eIm26 + (oRe26 * tRe6 + oIm26 * tRe26);
        out512[idx + 77] = resIm38_s;
        out512[idx + 181] = -resIm38_s;
        
        let oRe27 = out512[idx + 182];
        let oIm27 = out512[idx + 183];
        let eRe27 = out512[idx + 54];
        let eIm27 = out512[idx + 55];
        let resIm27_s = eIm27 + (oRe27 * tRe5 + oIm27 * tRe27);
        out512[idx + 55] = resIm27_s;
        out512[idx + 203] = -resIm27_s;
        let resRe27_s = eRe27 + (oRe27 * tRe27 - oIm27 * tRe5);
        out512[idx + 202] = resRe27_s;
        out512[idx + 54] = resRe27_s;
        let resRe37_s = eRe27 - (oRe27 * tRe27 - oIm27 * tRe5);
        out512[idx + 182] = resRe37_s;
        out512[idx + 74] = resRe37_s;
        let resIm37_s = -eIm27 + (oRe27 * tRe5 + oIm27 * tRe27);
        out512[idx + 75] = resIm37_s;
        out512[idx + 183] = -resIm37_s;
        
        let oRe28 = out512[idx + 184];
        let oIm28 = out512[idx + 185];
        let eRe28 = out512[idx + 56];
        let eIm28 = out512[idx + 57];
        let resIm28_s = eIm28 + (oRe28 * tRe4 + oIm28 * tRe28);
        out512[idx + 57] = resIm28_s;
        out512[idx + 201] = -resIm28_s;
        let resRe28_s = eRe28 + (oRe28 * tRe28 - oIm28 * tRe4);
        out512[idx + 200] = resRe28_s;
        out512[idx + 56] = resRe28_s;
        let resRe36_s = eRe28 - (oRe28 * tRe28 - oIm28 * tRe4);
        out512[idx + 184] = resRe36_s;
        out512[idx + 72] = resRe36_s;
        let resIm36_s = -eIm28 + (oRe28 * tRe4 + oIm28 * tRe28);
        out512[idx + 73] = resIm36_s;
        out512[idx + 185] = -resIm36_s;
        
        let oRe29 = out512[idx + 186];
        let oIm29 = out512[idx + 187];
        let eRe29 = out512[idx + 58];
        let eIm29 = out512[idx + 59];
        let resIm29_s = eIm29 + (oRe29 * tRe3 + oIm29 * tRe29);
        out512[idx + 59] = resIm29_s;
        out512[idx + 199] = -resIm29_s;
        let resRe29_s = eRe29 + (oRe29 * tRe29 - oIm29 * tRe3);
        out512[idx + 198] = resRe29_s;
        out512[idx + 58] = resRe29_s;
        let resRe35_s = eRe29 - (oRe29 * tRe29 - oIm29 * tRe3);
        out512[idx + 186] = resRe35_s;
        out512[idx + 70] = resRe35_s;
        let resIm35_s = -eIm29 + (oRe29 * tRe3 + oIm29 * tRe29);
        out512[idx + 71] = resIm35_s;
        out512[idx + 187] = -resIm35_s;
        
        let oRe30 = out512[idx + 188];
        let oIm30 = out512[idx + 189];
        let eRe30 = out512[idx + 60];
        let eIm30 = out512[idx + 61];
        let resIm30_s = eIm30 + (oRe30 * tRe2 + oIm30 * tRe30);
        out512[idx + 61] = resIm30_s;
        out512[idx + 197] = -resIm30_s;
        let resRe30_s = eRe30 + (oRe30 * tRe30 - oIm30 * tRe2);
        out512[idx + 196] = resRe30_s;
        out512[idx + 60] = resRe30_s;
        let resRe34_s = eRe30 - (oRe30 * tRe30 - oIm30 * tRe2);
        out512[idx + 188] = resRe34_s;
        out512[idx + 68] = resRe34_s;
        let resIm34_s = -eIm30 + (oRe30 * tRe2 + oIm30 * tRe30);
        out512[idx + 69] = resIm34_s;
        out512[idx + 189] = -resIm34_s;
        
        let oRe31 = out512[idx + 190];
        let oIm31 = out512[idx + 191];
        let eRe31 = out512[idx + 62];
        let eIm31 = out512[idx + 63];
        let resIm31_s = eIm31 + (oRe31 * tRe1 + oIm31 * tRe31);
        out512[idx + 63] = resIm31_s;
        out512[idx + 195] = -resIm31_s;
        let resRe31_s = eRe31 + (oRe31 * tRe31 - oIm31 * tRe1);
        out512[idx + 194] = resRe31_s;
        out512[idx + 62] = resRe31_s;
        let resRe33_s = eRe31 - (oRe31 * tRe31 - oIm31 * tRe1);
        out512[idx + 190] = resRe33_s;
        out512[idx + 66] = resRe33_s;
        let resIm33_s = -eIm31 + (oRe31 * tRe1 + oIm31 * tRe31);
        out512[idx + 67] = resIm33_s;
        out512[idx + 191] = -resIm33_s;
        
        let oRe32 = out512[idx + 192];
        let oIm32 = out512[idx + 193];
        let eRe32 = out512[idx + 64];
        let eIm32 = out512[idx + 65];
        let resIm32_s = eIm32 + oRe32;
        out512[idx + 65] = resIm32_s;
        out512[idx + 193] = -resIm32_s;
        let resRe32_s = eRe32 - oIm32;
        out512[idx + 192] = resRe32_s;
        out512[idx + 64] = resRe32_s;
        
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 256 
    ////////////////////////////////////////////////
    for(let idx = 0; idx < 512; idx += 512){ 
        let oRe0 = out512[idx + 256];
        let oIm0 = out512[idx + 257];
        let eRe0 = out512[idx + 0];
        let eIm0 = out512[idx + 1];
        let resRe0_s = eRe0 + oRe0;
        out512[idx] = resRe0_s;
        let resIm0_s = eIm0 + oIm0;
        out512[idx + 1] = resRe0_s;
        let resRe0_d = eRe0 - oRe0;
        out512[idx + 256] = resRe0_d;
        let resIm0_d = eIm0 - oIm0;
        out512[idx + 257] = resIm0_d;
        
        let oRe1 = out512[idx + 258];
        let oIm1 = out512[idx + 259];
        let eRe1 = out512[idx + 2];
        let eIm1 = out512[idx + 3];
        let tRe1 = FFT_FAC_512[idx + 1];
        let tRe63 = FFT_FAC_512[idx + 63];
        let resIm1_s = eIm1 + (oRe1 * tRe63 + oIm1 * tRe1);
        out512[idx + 3] = resIm1_s;
        out512[idx + 511] = -resIm1_s;
        let resRe1_s = eRe1 + (oRe1 * tRe1 - oIm1 * tRe63);
        out512[idx + 510] = resRe1_s;
        out512[idx + 2] = resRe1_s;
        let resRe127_s = eRe1 - (oRe1 * tRe1 - oIm1 * tRe63);
        out512[idx + 258] = resRe127_s;
        out512[idx + 254] = resRe127_s;
        let resIm127_s = -eIm1 + (oRe1 * tRe63 + oIm1 * tRe1);
        out512[idx + 255] = resIm127_s;
        out512[idx + 259] = -resIm127_s;
        
        let oRe2 = out512[idx + 260];
        let oIm2 = out512[idx + 261];
        let eRe2 = out512[idx + 4];
        let eIm2 = out512[idx + 5];
        let tRe2 = FFT_FAC_512[idx + 2];
        let tRe62 = FFT_FAC_512[idx + 62];
        let resIm2_s = eIm2 + (oRe2 * tRe62 + oIm2 * tRe2);
        out512[idx + 5] = resIm2_s;
        out512[idx + 509] = -resIm2_s;
        let resRe2_s = eRe2 + (oRe2 * tRe2 - oIm2 * tRe62);
        out512[idx + 508] = resRe2_s;
        out512[idx + 4] = resRe2_s;
        let resRe126_s = eRe2 - (oRe2 * tRe2 - oIm2 * tRe62);
        out512[idx + 260] = resRe126_s;
        out512[idx + 252] = resRe126_s;
        let resIm126_s = -eIm2 + (oRe2 * tRe62 + oIm2 * tRe2);
        out512[idx + 253] = resIm126_s;
        out512[idx + 261] = -resIm126_s;
        
        let oRe3 = out512[idx + 262];
        let oIm3 = out512[idx + 263];
        let eRe3 = out512[idx + 6];
        let eIm3 = out512[idx + 7];
        let tRe3 = FFT_FAC_512[idx + 3];
        let tRe61 = FFT_FAC_512[idx + 61];
        let resIm3_s = eIm3 + (oRe3 * tRe61 + oIm3 * tRe3);
        out512[idx + 7] = resIm3_s;
        out512[idx + 507] = -resIm3_s;
        let resRe3_s = eRe3 + (oRe3 * tRe3 - oIm3 * tRe61);
        out512[idx + 506] = resRe3_s;
        out512[idx + 6] = resRe3_s;
        let resRe125_s = eRe3 - (oRe3 * tRe3 - oIm3 * tRe61);
        out512[idx + 262] = resRe125_s;
        out512[idx + 250] = resRe125_s;
        let resIm125_s = -eIm3 + (oRe3 * tRe61 + oIm3 * tRe3);
        out512[idx + 251] = resIm125_s;
        out512[idx + 263] = -resIm125_s;
        
        let oRe4 = out512[idx + 264];
        let oIm4 = out512[idx + 265];
        let eRe4 = out512[idx + 8];
        let eIm4 = out512[idx + 9];
        let tRe4 = FFT_FAC_512[idx + 4];
        let tRe60 = FFT_FAC_512[idx + 60];
        let resIm4_s = eIm4 + (oRe4 * tRe60 + oIm4 * tRe4);
        out512[idx + 9] = resIm4_s;
        out512[idx + 505] = -resIm4_s;
        let resRe4_s = eRe4 + (oRe4 * tRe4 - oIm4 * tRe60);
        out512[idx + 504] = resRe4_s;
        out512[idx + 8] = resRe4_s;
        let resRe124_s = eRe4 - (oRe4 * tRe4 - oIm4 * tRe60);
        out512[idx + 264] = resRe124_s;
        out512[idx + 248] = resRe124_s;
        let resIm124_s = -eIm4 + (oRe4 * tRe60 + oIm4 * tRe4);
        out512[idx + 249] = resIm124_s;
        out512[idx + 265] = -resIm124_s;
        
        let oRe5 = out512[idx + 266];
        let oIm5 = out512[idx + 267];
        let eRe5 = out512[idx + 10];
        let eIm5 = out512[idx + 11];
        let tRe5 = FFT_FAC_512[idx + 5];
        let tRe59 = FFT_FAC_512[idx + 59];
        let resIm5_s = eIm5 + (oRe5 * tRe59 + oIm5 * tRe5);
        out512[idx + 11] = resIm5_s;
        out512[idx + 503] = -resIm5_s;
        let resRe5_s = eRe5 + (oRe5 * tRe5 - oIm5 * tRe59);
        out512[idx + 502] = resRe5_s;
        out512[idx + 10] = resRe5_s;
        let resRe123_s = eRe5 - (oRe5 * tRe5 - oIm5 * tRe59);
        out512[idx + 266] = resRe123_s;
        out512[idx + 246] = resRe123_s;
        let resIm123_s = -eIm5 + (oRe5 * tRe59 + oIm5 * tRe5);
        out512[idx + 247] = resIm123_s;
        out512[idx + 267] = -resIm123_s;
        
        let oRe6 = out512[idx + 268];
        let oIm6 = out512[idx + 269];
        let eRe6 = out512[idx + 12];
        let eIm6 = out512[idx + 13];
        let tRe6 = FFT_FAC_512[idx + 6];
        let tRe58 = FFT_FAC_512[idx + 58];
        let resIm6_s = eIm6 + (oRe6 * tRe58 + oIm6 * tRe6);
        out512[idx + 13] = resIm6_s;
        out512[idx + 501] = -resIm6_s;
        let resRe6_s = eRe6 + (oRe6 * tRe6 - oIm6 * tRe58);
        out512[idx + 500] = resRe6_s;
        out512[idx + 12] = resRe6_s;
        let resRe122_s = eRe6 - (oRe6 * tRe6 - oIm6 * tRe58);
        out512[idx + 268] = resRe122_s;
        out512[idx + 244] = resRe122_s;
        let resIm122_s = -eIm6 + (oRe6 * tRe58 + oIm6 * tRe6);
        out512[idx + 245] = resIm122_s;
        out512[idx + 269] = -resIm122_s;
        
        let oRe7 = out512[idx + 270];
        let oIm7 = out512[idx + 271];
        let eRe7 = out512[idx + 14];
        let eIm7 = out512[idx + 15];
        let tRe7 = FFT_FAC_512[idx + 7];
        let tRe57 = FFT_FAC_512[idx + 57];
        let resIm7_s = eIm7 + (oRe7 * tRe57 + oIm7 * tRe7);
        out512[idx + 15] = resIm7_s;
        out512[idx + 499] = -resIm7_s;
        let resRe7_s = eRe7 + (oRe7 * tRe7 - oIm7 * tRe57);
        out512[idx + 498] = resRe7_s;
        out512[idx + 14] = resRe7_s;
        let resRe121_s = eRe7 - (oRe7 * tRe7 - oIm7 * tRe57);
        out512[idx + 270] = resRe121_s;
        out512[idx + 242] = resRe121_s;
        let resIm121_s = -eIm7 + (oRe7 * tRe57 + oIm7 * tRe7);
        out512[idx + 243] = resIm121_s;
        out512[idx + 271] = -resIm121_s;
        
        let oRe8 = out512[idx + 272];
        let oIm8 = out512[idx + 273];
        let eRe8 = out512[idx + 16];
        let eIm8 = out512[idx + 17];
        let tRe8 = FFT_FAC_512[idx + 8];
        let tRe56 = FFT_FAC_512[idx + 56];
        let resIm8_s = eIm8 + (oRe8 * tRe56 + oIm8 * tRe8);
        out512[idx + 17] = resIm8_s;
        out512[idx + 497] = -resIm8_s;
        let resRe8_s = eRe8 + (oRe8 * tRe8 - oIm8 * tRe56);
        out512[idx + 496] = resRe8_s;
        out512[idx + 16] = resRe8_s;
        let resRe120_s = eRe8 - (oRe8 * tRe8 - oIm8 * tRe56);
        out512[idx + 272] = resRe120_s;
        out512[idx + 240] = resRe120_s;
        let resIm120_s = -eIm8 + (oRe8 * tRe56 + oIm8 * tRe8);
        out512[idx + 241] = resIm120_s;
        out512[idx + 273] = -resIm120_s;
        
        let oRe9 = out512[idx + 274];
        let oIm9 = out512[idx + 275];
        let eRe9 = out512[idx + 18];
        let eIm9 = out512[idx + 19];
        let tRe9 = FFT_FAC_512[idx + 9];
        let tRe55 = FFT_FAC_512[idx + 55];
        let resIm9_s = eIm9 + (oRe9 * tRe55 + oIm9 * tRe9);
        out512[idx + 19] = resIm9_s;
        out512[idx + 495] = -resIm9_s;
        let resRe9_s = eRe9 + (oRe9 * tRe9 - oIm9 * tRe55);
        out512[idx + 494] = resRe9_s;
        out512[idx + 18] = resRe9_s;
        let resRe119_s = eRe9 - (oRe9 * tRe9 - oIm9 * tRe55);
        out512[idx + 274] = resRe119_s;
        out512[idx + 238] = resRe119_s;
        let resIm119_s = -eIm9 + (oRe9 * tRe55 + oIm9 * tRe9);
        out512[idx + 239] = resIm119_s;
        out512[idx + 275] = -resIm119_s;
        
        let oRe10 = out512[idx + 276];
        let oIm10 = out512[idx + 277];
        let eRe10 = out512[idx + 20];
        let eIm10 = out512[idx + 21];
        let tRe10 = FFT_FAC_512[idx + 10];
        let tRe54 = FFT_FAC_512[idx + 54];
        let resIm10_s = eIm10 + (oRe10 * tRe54 + oIm10 * tRe10);
        out512[idx + 21] = resIm10_s;
        out512[idx + 493] = -resIm10_s;
        let resRe10_s = eRe10 + (oRe10 * tRe10 - oIm10 * tRe54);
        out512[idx + 492] = resRe10_s;
        out512[idx + 20] = resRe10_s;
        let resRe118_s = eRe10 - (oRe10 * tRe10 - oIm10 * tRe54);
        out512[idx + 276] = resRe118_s;
        out512[idx + 236] = resRe118_s;
        let resIm118_s = -eIm10 + (oRe10 * tRe54 + oIm10 * tRe10);
        out512[idx + 237] = resIm118_s;
        out512[idx + 277] = -resIm118_s;
        
        let oRe11 = out512[idx + 278];
        let oIm11 = out512[idx + 279];
        let eRe11 = out512[idx + 22];
        let eIm11 = out512[idx + 23];
        let tRe11 = FFT_FAC_512[idx + 11];
        let tRe53 = FFT_FAC_512[idx + 53];
        let resIm11_s = eIm11 + (oRe11 * tRe53 + oIm11 * tRe11);
        out512[idx + 23] = resIm11_s;
        out512[idx + 491] = -resIm11_s;
        let resRe11_s = eRe11 + (oRe11 * tRe11 - oIm11 * tRe53);
        out512[idx + 490] = resRe11_s;
        out512[idx + 22] = resRe11_s;
        let resRe117_s = eRe11 - (oRe11 * tRe11 - oIm11 * tRe53);
        out512[idx + 278] = resRe117_s;
        out512[idx + 234] = resRe117_s;
        let resIm117_s = -eIm11 + (oRe11 * tRe53 + oIm11 * tRe11);
        out512[idx + 235] = resIm117_s;
        out512[idx + 279] = -resIm117_s;
        
        let oRe12 = out512[idx + 280];
        let oIm12 = out512[idx + 281];
        let eRe12 = out512[idx + 24];
        let eIm12 = out512[idx + 25];
        let tRe12 = FFT_FAC_512[idx + 12];
        let tRe52 = FFT_FAC_512[idx + 52];
        let resIm12_s = eIm12 + (oRe12 * tRe52 + oIm12 * tRe12);
        out512[idx + 25] = resIm12_s;
        out512[idx + 489] = -resIm12_s;
        let resRe12_s = eRe12 + (oRe12 * tRe12 - oIm12 * tRe52);
        out512[idx + 488] = resRe12_s;
        out512[idx + 24] = resRe12_s;
        let resRe116_s = eRe12 - (oRe12 * tRe12 - oIm12 * tRe52);
        out512[idx + 280] = resRe116_s;
        out512[idx + 232] = resRe116_s;
        let resIm116_s = -eIm12 + (oRe12 * tRe52 + oIm12 * tRe12);
        out512[idx + 233] = resIm116_s;
        out512[idx + 281] = -resIm116_s;
        
        let oRe13 = out512[idx + 282];
        let oIm13 = out512[idx + 283];
        let eRe13 = out512[idx + 26];
        let eIm13 = out512[idx + 27];
        let tRe13 = FFT_FAC_512[idx + 13];
        let tRe51 = FFT_FAC_512[idx + 51];
        let resIm13_s = eIm13 + (oRe13 * tRe51 + oIm13 * tRe13);
        out512[idx + 27] = resIm13_s;
        out512[idx + 487] = -resIm13_s;
        let resRe13_s = eRe13 + (oRe13 * tRe13 - oIm13 * tRe51);
        out512[idx + 486] = resRe13_s;
        out512[idx + 26] = resRe13_s;
        let resRe115_s = eRe13 - (oRe13 * tRe13 - oIm13 * tRe51);
        out512[idx + 282] = resRe115_s;
        out512[idx + 230] = resRe115_s;
        let resIm115_s = -eIm13 + (oRe13 * tRe51 + oIm13 * tRe13);
        out512[idx + 231] = resIm115_s;
        out512[idx + 283] = -resIm115_s;
        
        let oRe14 = out512[idx + 284];
        let oIm14 = out512[idx + 285];
        let eRe14 = out512[idx + 28];
        let eIm14 = out512[idx + 29];
        let tRe14 = FFT_FAC_512[idx + 14];
        let tRe50 = FFT_FAC_512[idx + 50];
        let resIm14_s = eIm14 + (oRe14 * tRe50 + oIm14 * tRe14);
        out512[idx + 29] = resIm14_s;
        out512[idx + 485] = -resIm14_s;
        let resRe14_s = eRe14 + (oRe14 * tRe14 - oIm14 * tRe50);
        out512[idx + 484] = resRe14_s;
        out512[idx + 28] = resRe14_s;
        let resRe114_s = eRe14 - (oRe14 * tRe14 - oIm14 * tRe50);
        out512[idx + 284] = resRe114_s;
        out512[idx + 228] = resRe114_s;
        let resIm114_s = -eIm14 + (oRe14 * tRe50 + oIm14 * tRe14);
        out512[idx + 229] = resIm114_s;
        out512[idx + 285] = -resIm114_s;
        
        let oRe15 = out512[idx + 286];
        let oIm15 = out512[idx + 287];
        let eRe15 = out512[idx + 30];
        let eIm15 = out512[idx + 31];
        let tRe15 = FFT_FAC_512[idx + 15];
        let tRe49 = FFT_FAC_512[idx + 49];
        let resIm15_s = eIm15 + (oRe15 * tRe49 + oIm15 * tRe15);
        out512[idx + 31] = resIm15_s;
        out512[idx + 483] = -resIm15_s;
        let resRe15_s = eRe15 + (oRe15 * tRe15 - oIm15 * tRe49);
        out512[idx + 482] = resRe15_s;
        out512[idx + 30] = resRe15_s;
        let resRe113_s = eRe15 - (oRe15 * tRe15 - oIm15 * tRe49);
        out512[idx + 286] = resRe113_s;
        out512[idx + 226] = resRe113_s;
        let resIm113_s = -eIm15 + (oRe15 * tRe49 + oIm15 * tRe15);
        out512[idx + 227] = resIm113_s;
        out512[idx + 287] = -resIm113_s;
        
        let oRe16 = out512[idx + 288];
        let oIm16 = out512[idx + 289];
        let eRe16 = out512[idx + 32];
        let eIm16 = out512[idx + 33];
        let tRe16 = FFT_FAC_512[idx + 16];
        let tRe48 = FFT_FAC_512[idx + 48];
        let resIm16_s = eIm16 + (oRe16 * tRe48 + oIm16 * tRe16);
        out512[idx + 33] = resIm16_s;
        out512[idx + 481] = -resIm16_s;
        let resRe16_s = eRe16 + (oRe16 * tRe16 - oIm16 * tRe48);
        out512[idx + 480] = resRe16_s;
        out512[idx + 32] = resRe16_s;
        let resRe112_s = eRe16 - (oRe16 * tRe16 - oIm16 * tRe48);
        out512[idx + 288] = resRe112_s;
        out512[idx + 224] = resRe112_s;
        let resIm112_s = -eIm16 + (oRe16 * tRe48 + oIm16 * tRe16);
        out512[idx + 225] = resIm112_s;
        out512[idx + 289] = -resIm112_s;
        
        let oRe17 = out512[idx + 290];
        let oIm17 = out512[idx + 291];
        let eRe17 = out512[idx + 34];
        let eIm17 = out512[idx + 35];
        let tRe17 = FFT_FAC_512[idx + 17];
        let tRe47 = FFT_FAC_512[idx + 47];
        let resIm17_s = eIm17 + (oRe17 * tRe47 + oIm17 * tRe17);
        out512[idx + 35] = resIm17_s;
        out512[idx + 479] = -resIm17_s;
        let resRe17_s = eRe17 + (oRe17 * tRe17 - oIm17 * tRe47);
        out512[idx + 478] = resRe17_s;
        out512[idx + 34] = resRe17_s;
        let resRe111_s = eRe17 - (oRe17 * tRe17 - oIm17 * tRe47);
        out512[idx + 290] = resRe111_s;
        out512[idx + 222] = resRe111_s;
        let resIm111_s = -eIm17 + (oRe17 * tRe47 + oIm17 * tRe17);
        out512[idx + 223] = resIm111_s;
        out512[idx + 291] = -resIm111_s;
        
        let oRe18 = out512[idx + 292];
        let oIm18 = out512[idx + 293];
        let eRe18 = out512[idx + 36];
        let eIm18 = out512[idx + 37];
        let tRe18 = FFT_FAC_512[idx + 18];
        let tRe46 = FFT_FAC_512[idx + 46];
        let resIm18_s = eIm18 + (oRe18 * tRe46 + oIm18 * tRe18);
        out512[idx + 37] = resIm18_s;
        out512[idx + 477] = -resIm18_s;
        let resRe18_s = eRe18 + (oRe18 * tRe18 - oIm18 * tRe46);
        out512[idx + 476] = resRe18_s;
        out512[idx + 36] = resRe18_s;
        let resRe110_s = eRe18 - (oRe18 * tRe18 - oIm18 * tRe46);
        out512[idx + 292] = resRe110_s;
        out512[idx + 220] = resRe110_s;
        let resIm110_s = -eIm18 + (oRe18 * tRe46 + oIm18 * tRe18);
        out512[idx + 221] = resIm110_s;
        out512[idx + 293] = -resIm110_s;
        
        let oRe19 = out512[idx + 294];
        let oIm19 = out512[idx + 295];
        let eRe19 = out512[idx + 38];
        let eIm19 = out512[idx + 39];
        let tRe19 = FFT_FAC_512[idx + 19];
        let tRe45 = FFT_FAC_512[idx + 45];
        let resIm19_s = eIm19 + (oRe19 * tRe45 + oIm19 * tRe19);
        out512[idx + 39] = resIm19_s;
        out512[idx + 475] = -resIm19_s;
        let resRe19_s = eRe19 + (oRe19 * tRe19 - oIm19 * tRe45);
        out512[idx + 474] = resRe19_s;
        out512[idx + 38] = resRe19_s;
        let resRe109_s = eRe19 - (oRe19 * tRe19 - oIm19 * tRe45);
        out512[idx + 294] = resRe109_s;
        out512[idx + 218] = resRe109_s;
        let resIm109_s = -eIm19 + (oRe19 * tRe45 + oIm19 * tRe19);
        out512[idx + 219] = resIm109_s;
        out512[idx + 295] = -resIm109_s;
        
        let oRe20 = out512[idx + 296];
        let oIm20 = out512[idx + 297];
        let eRe20 = out512[idx + 40];
        let eIm20 = out512[idx + 41];
        let tRe20 = FFT_FAC_512[idx + 20];
        let tRe44 = FFT_FAC_512[idx + 44];
        let resIm20_s = eIm20 + (oRe20 * tRe44 + oIm20 * tRe20);
        out512[idx + 41] = resIm20_s;
        out512[idx + 473] = -resIm20_s;
        let resRe20_s = eRe20 + (oRe20 * tRe20 - oIm20 * tRe44);
        out512[idx + 472] = resRe20_s;
        out512[idx + 40] = resRe20_s;
        let resRe108_s = eRe20 - (oRe20 * tRe20 - oIm20 * tRe44);
        out512[idx + 296] = resRe108_s;
        out512[idx + 216] = resRe108_s;
        let resIm108_s = -eIm20 + (oRe20 * tRe44 + oIm20 * tRe20);
        out512[idx + 217] = resIm108_s;
        out512[idx + 297] = -resIm108_s;
        
        let oRe21 = out512[idx + 298];
        let oIm21 = out512[idx + 299];
        let eRe21 = out512[idx + 42];
        let eIm21 = out512[idx + 43];
        let tRe21 = FFT_FAC_512[idx + 21];
        let tRe43 = FFT_FAC_512[idx + 43];
        let resIm21_s = eIm21 + (oRe21 * tRe43 + oIm21 * tRe21);
        out512[idx + 43] = resIm21_s;
        out512[idx + 471] = -resIm21_s;
        let resRe21_s = eRe21 + (oRe21 * tRe21 - oIm21 * tRe43);
        out512[idx + 470] = resRe21_s;
        out512[idx + 42] = resRe21_s;
        let resRe107_s = eRe21 - (oRe21 * tRe21 - oIm21 * tRe43);
        out512[idx + 298] = resRe107_s;
        out512[idx + 214] = resRe107_s;
        let resIm107_s = -eIm21 + (oRe21 * tRe43 + oIm21 * tRe21);
        out512[idx + 215] = resIm107_s;
        out512[idx + 299] = -resIm107_s;
        
        let oRe22 = out512[idx + 300];
        let oIm22 = out512[idx + 301];
        let eRe22 = out512[idx + 44];
        let eIm22 = out512[idx + 45];
        let tRe22 = FFT_FAC_512[idx + 22];
        let tRe42 = FFT_FAC_512[idx + 42];
        let resIm22_s = eIm22 + (oRe22 * tRe42 + oIm22 * tRe22);
        out512[idx + 45] = resIm22_s;
        out512[idx + 469] = -resIm22_s;
        let resRe22_s = eRe22 + (oRe22 * tRe22 - oIm22 * tRe42);
        out512[idx + 468] = resRe22_s;
        out512[idx + 44] = resRe22_s;
        let resRe106_s = eRe22 - (oRe22 * tRe22 - oIm22 * tRe42);
        out512[idx + 300] = resRe106_s;
        out512[idx + 212] = resRe106_s;
        let resIm106_s = -eIm22 + (oRe22 * tRe42 + oIm22 * tRe22);
        out512[idx + 213] = resIm106_s;
        out512[idx + 301] = -resIm106_s;
        
        let oRe23 = out512[idx + 302];
        let oIm23 = out512[idx + 303];
        let eRe23 = out512[idx + 46];
        let eIm23 = out512[idx + 47];
        let tRe23 = FFT_FAC_512[idx + 23];
        let tRe41 = FFT_FAC_512[idx + 41];
        let resIm23_s = eIm23 + (oRe23 * tRe41 + oIm23 * tRe23);
        out512[idx + 47] = resIm23_s;
        out512[idx + 467] = -resIm23_s;
        let resRe23_s = eRe23 + (oRe23 * tRe23 - oIm23 * tRe41);
        out512[idx + 466] = resRe23_s;
        out512[idx + 46] = resRe23_s;
        let resRe105_s = eRe23 - (oRe23 * tRe23 - oIm23 * tRe41);
        out512[idx + 302] = resRe105_s;
        out512[idx + 210] = resRe105_s;
        let resIm105_s = -eIm23 + (oRe23 * tRe41 + oIm23 * tRe23);
        out512[idx + 211] = resIm105_s;
        out512[idx + 303] = -resIm105_s;
        
        let oRe24 = out512[idx + 304];
        let oIm24 = out512[idx + 305];
        let eRe24 = out512[idx + 48];
        let eIm24 = out512[idx + 49];
        let tRe24 = FFT_FAC_512[idx + 24];
        let tRe40 = FFT_FAC_512[idx + 40];
        let resIm24_s = eIm24 + (oRe24 * tRe40 + oIm24 * tRe24);
        out512[idx + 49] = resIm24_s;
        out512[idx + 465] = -resIm24_s;
        let resRe24_s = eRe24 + (oRe24 * tRe24 - oIm24 * tRe40);
        out512[idx + 464] = resRe24_s;
        out512[idx + 48] = resRe24_s;
        let resRe104_s = eRe24 - (oRe24 * tRe24 - oIm24 * tRe40);
        out512[idx + 304] = resRe104_s;
        out512[idx + 208] = resRe104_s;
        let resIm104_s = -eIm24 + (oRe24 * tRe40 + oIm24 * tRe24);
        out512[idx + 209] = resIm104_s;
        out512[idx + 305] = -resIm104_s;
        
        let oRe25 = out512[idx + 306];
        let oIm25 = out512[idx + 307];
        let eRe25 = out512[idx + 50];
        let eIm25 = out512[idx + 51];
        let tRe25 = FFT_FAC_512[idx + 25];
        let tRe39 = FFT_FAC_512[idx + 39];
        let resIm25_s = eIm25 + (oRe25 * tRe39 + oIm25 * tRe25);
        out512[idx + 51] = resIm25_s;
        out512[idx + 463] = -resIm25_s;
        let resRe25_s = eRe25 + (oRe25 * tRe25 - oIm25 * tRe39);
        out512[idx + 462] = resRe25_s;
        out512[idx + 50] = resRe25_s;
        let resRe103_s = eRe25 - (oRe25 * tRe25 - oIm25 * tRe39);
        out512[idx + 306] = resRe103_s;
        out512[idx + 206] = resRe103_s;
        let resIm103_s = -eIm25 + (oRe25 * tRe39 + oIm25 * tRe25);
        out512[idx + 207] = resIm103_s;
        out512[idx + 307] = -resIm103_s;
        
        let oRe26 = out512[idx + 308];
        let oIm26 = out512[idx + 309];
        let eRe26 = out512[idx + 52];
        let eIm26 = out512[idx + 53];
        let tRe26 = FFT_FAC_512[idx + 26];
        let tRe38 = FFT_FAC_512[idx + 38];
        let resIm26_s = eIm26 + (oRe26 * tRe38 + oIm26 * tRe26);
        out512[idx + 53] = resIm26_s;
        out512[idx + 461] = -resIm26_s;
        let resRe26_s = eRe26 + (oRe26 * tRe26 - oIm26 * tRe38);
        out512[idx + 460] = resRe26_s;
        out512[idx + 52] = resRe26_s;
        let resRe102_s = eRe26 - (oRe26 * tRe26 - oIm26 * tRe38);
        out512[idx + 308] = resRe102_s;
        out512[idx + 204] = resRe102_s;
        let resIm102_s = -eIm26 + (oRe26 * tRe38 + oIm26 * tRe26);
        out512[idx + 205] = resIm102_s;
        out512[idx + 309] = -resIm102_s;
        
        let oRe27 = out512[idx + 310];
        let oIm27 = out512[idx + 311];
        let eRe27 = out512[idx + 54];
        let eIm27 = out512[idx + 55];
        let tRe27 = FFT_FAC_512[idx + 27];
        let tRe37 = FFT_FAC_512[idx + 37];
        let resIm27_s = eIm27 + (oRe27 * tRe37 + oIm27 * tRe27);
        out512[idx + 55] = resIm27_s;
        out512[idx + 459] = -resIm27_s;
        let resRe27_s = eRe27 + (oRe27 * tRe27 - oIm27 * tRe37);
        out512[idx + 458] = resRe27_s;
        out512[idx + 54] = resRe27_s;
        let resRe101_s = eRe27 - (oRe27 * tRe27 - oIm27 * tRe37);
        out512[idx + 310] = resRe101_s;
        out512[idx + 202] = resRe101_s;
        let resIm101_s = -eIm27 + (oRe27 * tRe37 + oIm27 * tRe27);
        out512[idx + 203] = resIm101_s;
        out512[idx + 311] = -resIm101_s;
        
        let oRe28 = out512[idx + 312];
        let oIm28 = out512[idx + 313];
        let eRe28 = out512[idx + 56];
        let eIm28 = out512[idx + 57];
        let tRe28 = FFT_FAC_512[idx + 28];
        let tRe36 = FFT_FAC_512[idx + 36];
        let resIm28_s = eIm28 + (oRe28 * tRe36 + oIm28 * tRe28);
        out512[idx + 57] = resIm28_s;
        out512[idx + 457] = -resIm28_s;
        let resRe28_s = eRe28 + (oRe28 * tRe28 - oIm28 * tRe36);
        out512[idx + 456] = resRe28_s;
        out512[idx + 56] = resRe28_s;
        let resRe100_s = eRe28 - (oRe28 * tRe28 - oIm28 * tRe36);
        out512[idx + 312] = resRe100_s;
        out512[idx + 200] = resRe100_s;
        let resIm100_s = -eIm28 + (oRe28 * tRe36 + oIm28 * tRe28);
        out512[idx + 201] = resIm100_s;
        out512[idx + 313] = -resIm100_s;
        
        let oRe29 = out512[idx + 314];
        let oIm29 = out512[idx + 315];
        let eRe29 = out512[idx + 58];
        let eIm29 = out512[idx + 59];
        let tRe29 = FFT_FAC_512[idx + 29];
        let tRe35 = FFT_FAC_512[idx + 35];
        let resIm29_s = eIm29 + (oRe29 * tRe35 + oIm29 * tRe29);
        out512[idx + 59] = resIm29_s;
        out512[idx + 455] = -resIm29_s;
        let resRe29_s = eRe29 + (oRe29 * tRe29 - oIm29 * tRe35);
        out512[idx + 454] = resRe29_s;
        out512[idx + 58] = resRe29_s;
        let resRe99_s = eRe29 - (oRe29 * tRe29 - oIm29 * tRe35);
        out512[idx + 314] = resRe99_s;
        out512[idx + 198] = resRe99_s;
        let resIm99_s = -eIm29 + (oRe29 * tRe35 + oIm29 * tRe29);
        out512[idx + 199] = resIm99_s;
        out512[idx + 315] = -resIm99_s;
        
        let oRe30 = out512[idx + 316];
        let oIm30 = out512[idx + 317];
        let eRe30 = out512[idx + 60];
        let eIm30 = out512[idx + 61];
        let tRe30 = FFT_FAC_512[idx + 30];
        let tRe34 = FFT_FAC_512[idx + 34];
        let resIm30_s = eIm30 + (oRe30 * tRe34 + oIm30 * tRe30);
        out512[idx + 61] = resIm30_s;
        out512[idx + 453] = -resIm30_s;
        let resRe30_s = eRe30 + (oRe30 * tRe30 - oIm30 * tRe34);
        out512[idx + 452] = resRe30_s;
        out512[idx + 60] = resRe30_s;
        let resRe98_s = eRe30 - (oRe30 * tRe30 - oIm30 * tRe34);
        out512[idx + 316] = resRe98_s;
        out512[idx + 196] = resRe98_s;
        let resIm98_s = -eIm30 + (oRe30 * tRe34 + oIm30 * tRe30);
        out512[idx + 197] = resIm98_s;
        out512[idx + 317] = -resIm98_s;
        
        let oRe31 = out512[idx + 318];
        let oIm31 = out512[idx + 319];
        let eRe31 = out512[idx + 62];
        let eIm31 = out512[idx + 63];
        let tRe31 = FFT_FAC_512[idx + 31];
        let tRe33 = FFT_FAC_512[idx + 33];
        let resIm31_s = eIm31 + (oRe31 * tRe33 + oIm31 * tRe31);
        out512[idx + 63] = resIm31_s;
        out512[idx + 451] = -resIm31_s;
        let resRe31_s = eRe31 + (oRe31 * tRe31 - oIm31 * tRe33);
        out512[idx + 450] = resRe31_s;
        out512[idx + 62] = resRe31_s;
        let resRe97_s = eRe31 - (oRe31 * tRe31 - oIm31 * tRe33);
        out512[idx + 318] = resRe97_s;
        out512[idx + 194] = resRe97_s;
        let resIm97_s = -eIm31 + (oRe31 * tRe33 + oIm31 * tRe31);
        out512[idx + 195] = resIm97_s;
        out512[idx + 319] = -resIm97_s;
        
        let oRe32 = out512[idx + 320];
        let oIm32 = out512[idx + 321];
        let eRe32 = out512[idx + 64];
        let eIm32 = out512[idx + 65];
        let tRe32 = FFT_FAC_512[idx + 32];
        let resIm32_s = eIm32 + (oRe32 * tRe32 + oIm32 * tRe32);
        out512[idx + 65] = resIm32_s;
        out512[idx + 449] = -resIm32_s;
        let resRe32_s = eRe32 + (oRe32 * tRe32 - oIm32 * tRe32);
        out512[idx + 448] = resRe32_s;
        out512[idx + 64] = resRe32_s;
        let resRe96_s = eRe32 - (oRe32 * tRe32 - oIm32 * tRe32);
        out512[idx + 320] = resRe96_s;
        out512[idx + 192] = resRe96_s;
        let resIm96_s = -eIm32 + (oRe32 * tRe32 + oIm32 * tRe32);
        out512[idx + 193] = resIm96_s;
        out512[idx + 321] = -resIm96_s;
        
        let oRe33 = out512[idx + 322];
        let oIm33 = out512[idx + 323];
        let eRe33 = out512[idx + 66];
        let eIm33 = out512[idx + 67];
        let resIm33_s = eIm33 + (oRe33 * tRe31 + oIm33 * tRe33);
        out512[idx + 67] = resIm33_s;
        out512[idx + 447] = -resIm33_s;
        let resRe33_s = eRe33 + (oRe33 * tRe33 - oIm33 * tRe31);
        out512[idx + 446] = resRe33_s;
        out512[idx + 66] = resRe33_s;
        let resRe95_s = eRe33 - (oRe33 * tRe33 - oIm33 * tRe31);
        out512[idx + 322] = resRe95_s;
        out512[idx + 190] = resRe95_s;
        let resIm95_s = -eIm33 + (oRe33 * tRe31 + oIm33 * tRe33);
        out512[idx + 191] = resIm95_s;
        out512[idx + 323] = -resIm95_s;
        
        let oRe34 = out512[idx + 324];
        let oIm34 = out512[idx + 325];
        let eRe34 = out512[idx + 68];
        let eIm34 = out512[idx + 69];
        let resIm34_s = eIm34 + (oRe34 * tRe30 + oIm34 * tRe34);
        out512[idx + 69] = resIm34_s;
        out512[idx + 445] = -resIm34_s;
        let resRe34_s = eRe34 + (oRe34 * tRe34 - oIm34 * tRe30);
        out512[idx + 444] = resRe34_s;
        out512[idx + 68] = resRe34_s;
        let resRe94_s = eRe34 - (oRe34 * tRe34 - oIm34 * tRe30);
        out512[idx + 324] = resRe94_s;
        out512[idx + 188] = resRe94_s;
        let resIm94_s = -eIm34 + (oRe34 * tRe30 + oIm34 * tRe34);
        out512[idx + 189] = resIm94_s;
        out512[idx + 325] = -resIm94_s;
        
        let oRe35 = out512[idx + 326];
        let oIm35 = out512[idx + 327];
        let eRe35 = out512[idx + 70];
        let eIm35 = out512[idx + 71];
        let resIm35_s = eIm35 + (oRe35 * tRe29 + oIm35 * tRe35);
        out512[idx + 71] = resIm35_s;
        out512[idx + 443] = -resIm35_s;
        let resRe35_s = eRe35 + (oRe35 * tRe35 - oIm35 * tRe29);
        out512[idx + 442] = resRe35_s;
        out512[idx + 70] = resRe35_s;
        let resRe93_s = eRe35 - (oRe35 * tRe35 - oIm35 * tRe29);
        out512[idx + 326] = resRe93_s;
        out512[idx + 186] = resRe93_s;
        let resIm93_s = -eIm35 + (oRe35 * tRe29 + oIm35 * tRe35);
        out512[idx + 187] = resIm93_s;
        out512[idx + 327] = -resIm93_s;
        
        let oRe36 = out512[idx + 328];
        let oIm36 = out512[idx + 329];
        let eRe36 = out512[idx + 72];
        let eIm36 = out512[idx + 73];
        let resIm36_s = eIm36 + (oRe36 * tRe28 + oIm36 * tRe36);
        out512[idx + 73] = resIm36_s;
        out512[idx + 441] = -resIm36_s;
        let resRe36_s = eRe36 + (oRe36 * tRe36 - oIm36 * tRe28);
        out512[idx + 440] = resRe36_s;
        out512[idx + 72] = resRe36_s;
        let resRe92_s = eRe36 - (oRe36 * tRe36 - oIm36 * tRe28);
        out512[idx + 328] = resRe92_s;
        out512[idx + 184] = resRe92_s;
        let resIm92_s = -eIm36 + (oRe36 * tRe28 + oIm36 * tRe36);
        out512[idx + 185] = resIm92_s;
        out512[idx + 329] = -resIm92_s;
        
        let oRe37 = out512[idx + 330];
        let oIm37 = out512[idx + 331];
        let eRe37 = out512[idx + 74];
        let eIm37 = out512[idx + 75];
        let resIm37_s = eIm37 + (oRe37 * tRe27 + oIm37 * tRe37);
        out512[idx + 75] = resIm37_s;
        out512[idx + 439] = -resIm37_s;
        let resRe37_s = eRe37 + (oRe37 * tRe37 - oIm37 * tRe27);
        out512[idx + 438] = resRe37_s;
        out512[idx + 74] = resRe37_s;
        let resRe91_s = eRe37 - (oRe37 * tRe37 - oIm37 * tRe27);
        out512[idx + 330] = resRe91_s;
        out512[idx + 182] = resRe91_s;
        let resIm91_s = -eIm37 + (oRe37 * tRe27 + oIm37 * tRe37);
        out512[idx + 183] = resIm91_s;
        out512[idx + 331] = -resIm91_s;
        
        let oRe38 = out512[idx + 332];
        let oIm38 = out512[idx + 333];
        let eRe38 = out512[idx + 76];
        let eIm38 = out512[idx + 77];
        let resIm38_s = eIm38 + (oRe38 * tRe26 + oIm38 * tRe38);
        out512[idx + 77] = resIm38_s;
        out512[idx + 437] = -resIm38_s;
        let resRe38_s = eRe38 + (oRe38 * tRe38 - oIm38 * tRe26);
        out512[idx + 436] = resRe38_s;
        out512[idx + 76] = resRe38_s;
        let resRe90_s = eRe38 - (oRe38 * tRe38 - oIm38 * tRe26);
        out512[idx + 332] = resRe90_s;
        out512[idx + 180] = resRe90_s;
        let resIm90_s = -eIm38 + (oRe38 * tRe26 + oIm38 * tRe38);
        out512[idx + 181] = resIm90_s;
        out512[idx + 333] = -resIm90_s;
        
        let oRe39 = out512[idx + 334];
        let oIm39 = out512[idx + 335];
        let eRe39 = out512[idx + 78];
        let eIm39 = out512[idx + 79];
        let resIm39_s = eIm39 + (oRe39 * tRe25 + oIm39 * tRe39);
        out512[idx + 79] = resIm39_s;
        out512[idx + 435] = -resIm39_s;
        let resRe39_s = eRe39 + (oRe39 * tRe39 - oIm39 * tRe25);
        out512[idx + 434] = resRe39_s;
        out512[idx + 78] = resRe39_s;
        let resRe89_s = eRe39 - (oRe39 * tRe39 - oIm39 * tRe25);
        out512[idx + 334] = resRe89_s;
        out512[idx + 178] = resRe89_s;
        let resIm89_s = -eIm39 + (oRe39 * tRe25 + oIm39 * tRe39);
        out512[idx + 179] = resIm89_s;
        out512[idx + 335] = -resIm89_s;
        
        let oRe40 = out512[idx + 336];
        let oIm40 = out512[idx + 337];
        let eRe40 = out512[idx + 80];
        let eIm40 = out512[idx + 81];
        let resIm40_s = eIm40 + (oRe40 * tRe24 + oIm40 * tRe40);
        out512[idx + 81] = resIm40_s;
        out512[idx + 433] = -resIm40_s;
        let resRe40_s = eRe40 + (oRe40 * tRe40 - oIm40 * tRe24);
        out512[idx + 432] = resRe40_s;
        out512[idx + 80] = resRe40_s;
        let resRe88_s = eRe40 - (oRe40 * tRe40 - oIm40 * tRe24);
        out512[idx + 336] = resRe88_s;
        out512[idx + 176] = resRe88_s;
        let resIm88_s = -eIm40 + (oRe40 * tRe24 + oIm40 * tRe40);
        out512[idx + 177] = resIm88_s;
        out512[idx + 337] = -resIm88_s;
        
        let oRe41 = out512[idx + 338];
        let oIm41 = out512[idx + 339];
        let eRe41 = out512[idx + 82];
        let eIm41 = out512[idx + 83];
        let resIm41_s = eIm41 + (oRe41 * tRe23 + oIm41 * tRe41);
        out512[idx + 83] = resIm41_s;
        out512[idx + 431] = -resIm41_s;
        let resRe41_s = eRe41 + (oRe41 * tRe41 - oIm41 * tRe23);
        out512[idx + 430] = resRe41_s;
        out512[idx + 82] = resRe41_s;
        let resRe87_s = eRe41 - (oRe41 * tRe41 - oIm41 * tRe23);
        out512[idx + 338] = resRe87_s;
        out512[idx + 174] = resRe87_s;
        let resIm87_s = -eIm41 + (oRe41 * tRe23 + oIm41 * tRe41);
        out512[idx + 175] = resIm87_s;
        out512[idx + 339] = -resIm87_s;
        
        let oRe42 = out512[idx + 340];
        let oIm42 = out512[idx + 341];
        let eRe42 = out512[idx + 84];
        let eIm42 = out512[idx + 85];
        let resIm42_s = eIm42 + (oRe42 * tRe22 + oIm42 * tRe42);
        out512[idx + 85] = resIm42_s;
        out512[idx + 429] = -resIm42_s;
        let resRe42_s = eRe42 + (oRe42 * tRe42 - oIm42 * tRe22);
        out512[idx + 428] = resRe42_s;
        out512[idx + 84] = resRe42_s;
        let resRe86_s = eRe42 - (oRe42 * tRe42 - oIm42 * tRe22);
        out512[idx + 340] = resRe86_s;
        out512[idx + 172] = resRe86_s;
        let resIm86_s = -eIm42 + (oRe42 * tRe22 + oIm42 * tRe42);
        out512[idx + 173] = resIm86_s;
        out512[idx + 341] = -resIm86_s;
        
        let oRe43 = out512[idx + 342];
        let oIm43 = out512[idx + 343];
        let eRe43 = out512[idx + 86];
        let eIm43 = out512[idx + 87];
        let resIm43_s = eIm43 + (oRe43 * tRe21 + oIm43 * tRe43);
        out512[idx + 87] = resIm43_s;
        out512[idx + 427] = -resIm43_s;
        let resRe43_s = eRe43 + (oRe43 * tRe43 - oIm43 * tRe21);
        out512[idx + 426] = resRe43_s;
        out512[idx + 86] = resRe43_s;
        let resRe85_s = eRe43 - (oRe43 * tRe43 - oIm43 * tRe21);
        out512[idx + 342] = resRe85_s;
        out512[idx + 170] = resRe85_s;
        let resIm85_s = -eIm43 + (oRe43 * tRe21 + oIm43 * tRe43);
        out512[idx + 171] = resIm85_s;
        out512[idx + 343] = -resIm85_s;
        
        let oRe44 = out512[idx + 344];
        let oIm44 = out512[idx + 345];
        let eRe44 = out512[idx + 88];
        let eIm44 = out512[idx + 89];
        let resIm44_s = eIm44 + (oRe44 * tRe20 + oIm44 * tRe44);
        out512[idx + 89] = resIm44_s;
        out512[idx + 425] = -resIm44_s;
        let resRe44_s = eRe44 + (oRe44 * tRe44 - oIm44 * tRe20);
        out512[idx + 424] = resRe44_s;
        out512[idx + 88] = resRe44_s;
        let resRe84_s = eRe44 - (oRe44 * tRe44 - oIm44 * tRe20);
        out512[idx + 344] = resRe84_s;
        out512[idx + 168] = resRe84_s;
        let resIm84_s = -eIm44 + (oRe44 * tRe20 + oIm44 * tRe44);
        out512[idx + 169] = resIm84_s;
        out512[idx + 345] = -resIm84_s;
        
        let oRe45 = out512[idx + 346];
        let oIm45 = out512[idx + 347];
        let eRe45 = out512[idx + 90];
        let eIm45 = out512[idx + 91];
        let resIm45_s = eIm45 + (oRe45 * tRe19 + oIm45 * tRe45);
        out512[idx + 91] = resIm45_s;
        out512[idx + 423] = -resIm45_s;
        let resRe45_s = eRe45 + (oRe45 * tRe45 - oIm45 * tRe19);
        out512[idx + 422] = resRe45_s;
        out512[idx + 90] = resRe45_s;
        let resRe83_s = eRe45 - (oRe45 * tRe45 - oIm45 * tRe19);
        out512[idx + 346] = resRe83_s;
        out512[idx + 166] = resRe83_s;
        let resIm83_s = -eIm45 + (oRe45 * tRe19 + oIm45 * tRe45);
        out512[idx + 167] = resIm83_s;
        out512[idx + 347] = -resIm83_s;
        
        let oRe46 = out512[idx + 348];
        let oIm46 = out512[idx + 349];
        let eRe46 = out512[idx + 92];
        let eIm46 = out512[idx + 93];
        let resIm46_s = eIm46 + (oRe46 * tRe18 + oIm46 * tRe46);
        out512[idx + 93] = resIm46_s;
        out512[idx + 421] = -resIm46_s;
        let resRe46_s = eRe46 + (oRe46 * tRe46 - oIm46 * tRe18);
        out512[idx + 420] = resRe46_s;
        out512[idx + 92] = resRe46_s;
        let resRe82_s = eRe46 - (oRe46 * tRe46 - oIm46 * tRe18);
        out512[idx + 348] = resRe82_s;
        out512[idx + 164] = resRe82_s;
        let resIm82_s = -eIm46 + (oRe46 * tRe18 + oIm46 * tRe46);
        out512[idx + 165] = resIm82_s;
        out512[idx + 349] = -resIm82_s;
        
        let oRe47 = out512[idx + 350];
        let oIm47 = out512[idx + 351];
        let eRe47 = out512[idx + 94];
        let eIm47 = out512[idx + 95];
        let resIm47_s = eIm47 + (oRe47 * tRe17 + oIm47 * tRe47);
        out512[idx + 95] = resIm47_s;
        out512[idx + 419] = -resIm47_s;
        let resRe47_s = eRe47 + (oRe47 * tRe47 - oIm47 * tRe17);
        out512[idx + 418] = resRe47_s;
        out512[idx + 94] = resRe47_s;
        let resRe81_s = eRe47 - (oRe47 * tRe47 - oIm47 * tRe17);
        out512[idx + 350] = resRe81_s;
        out512[idx + 162] = resRe81_s;
        let resIm81_s = -eIm47 + (oRe47 * tRe17 + oIm47 * tRe47);
        out512[idx + 163] = resIm81_s;
        out512[idx + 351] = -resIm81_s;
        
        let oRe48 = out512[idx + 352];
        let oIm48 = out512[idx + 353];
        let eRe48 = out512[idx + 96];
        let eIm48 = out512[idx + 97];
        let resIm48_s = eIm48 + (oRe48 * tRe16 + oIm48 * tRe48);
        out512[idx + 97] = resIm48_s;
        out512[idx + 417] = -resIm48_s;
        let resRe48_s = eRe48 + (oRe48 * tRe48 - oIm48 * tRe16);
        out512[idx + 416] = resRe48_s;
        out512[idx + 96] = resRe48_s;
        let resRe80_s = eRe48 - (oRe48 * tRe48 - oIm48 * tRe16);
        out512[idx + 352] = resRe80_s;
        out512[idx + 160] = resRe80_s;
        let resIm80_s = -eIm48 + (oRe48 * tRe16 + oIm48 * tRe48);
        out512[idx + 161] = resIm80_s;
        out512[idx + 353] = -resIm80_s;
        
        let oRe49 = out512[idx + 354];
        let oIm49 = out512[idx + 355];
        let eRe49 = out512[idx + 98];
        let eIm49 = out512[idx + 99];
        let resIm49_s = eIm49 + (oRe49 * tRe15 + oIm49 * tRe49);
        out512[idx + 99] = resIm49_s;
        out512[idx + 415] = -resIm49_s;
        let resRe49_s = eRe49 + (oRe49 * tRe49 - oIm49 * tRe15);
        out512[idx + 414] = resRe49_s;
        out512[idx + 98] = resRe49_s;
        let resRe79_s = eRe49 - (oRe49 * tRe49 - oIm49 * tRe15);
        out512[idx + 354] = resRe79_s;
        out512[idx + 158] = resRe79_s;
        let resIm79_s = -eIm49 + (oRe49 * tRe15 + oIm49 * tRe49);
        out512[idx + 159] = resIm79_s;
        out512[idx + 355] = -resIm79_s;
        
        let oRe50 = out512[idx + 356];
        let oIm50 = out512[idx + 357];
        let eRe50 = out512[idx + 100];
        let eIm50 = out512[idx + 101];
        let resIm50_s = eIm50 + (oRe50 * tRe14 + oIm50 * tRe50);
        out512[idx + 101] = resIm50_s;
        out512[idx + 413] = -resIm50_s;
        let resRe50_s = eRe50 + (oRe50 * tRe50 - oIm50 * tRe14);
        out512[idx + 412] = resRe50_s;
        out512[idx + 100] = resRe50_s;
        let resRe78_s = eRe50 - (oRe50 * tRe50 - oIm50 * tRe14);
        out512[idx + 356] = resRe78_s;
        out512[idx + 156] = resRe78_s;
        let resIm78_s = -eIm50 + (oRe50 * tRe14 + oIm50 * tRe50);
        out512[idx + 157] = resIm78_s;
        out512[idx + 357] = -resIm78_s;
        
        let oRe51 = out512[idx + 358];
        let oIm51 = out512[idx + 359];
        let eRe51 = out512[idx + 102];
        let eIm51 = out512[idx + 103];
        let resIm51_s = eIm51 + (oRe51 * tRe13 + oIm51 * tRe51);
        out512[idx + 103] = resIm51_s;
        out512[idx + 411] = -resIm51_s;
        let resRe51_s = eRe51 + (oRe51 * tRe51 - oIm51 * tRe13);
        out512[idx + 410] = resRe51_s;
        out512[idx + 102] = resRe51_s;
        let resRe77_s = eRe51 - (oRe51 * tRe51 - oIm51 * tRe13);
        out512[idx + 358] = resRe77_s;
        out512[idx + 154] = resRe77_s;
        let resIm77_s = -eIm51 + (oRe51 * tRe13 + oIm51 * tRe51);
        out512[idx + 155] = resIm77_s;
        out512[idx + 359] = -resIm77_s;
        
        let oRe52 = out512[idx + 360];
        let oIm52 = out512[idx + 361];
        let eRe52 = out512[idx + 104];
        let eIm52 = out512[idx + 105];
        let resIm52_s = eIm52 + (oRe52 * tRe12 + oIm52 * tRe52);
        out512[idx + 105] = resIm52_s;
        out512[idx + 409] = -resIm52_s;
        let resRe52_s = eRe52 + (oRe52 * tRe52 - oIm52 * tRe12);
        out512[idx + 408] = resRe52_s;
        out512[idx + 104] = resRe52_s;
        let resRe76_s = eRe52 - (oRe52 * tRe52 - oIm52 * tRe12);
        out512[idx + 360] = resRe76_s;
        out512[idx + 152] = resRe76_s;
        let resIm76_s = -eIm52 + (oRe52 * tRe12 + oIm52 * tRe52);
        out512[idx + 153] = resIm76_s;
        out512[idx + 361] = -resIm76_s;
        
        let oRe53 = out512[idx + 362];
        let oIm53 = out512[idx + 363];
        let eRe53 = out512[idx + 106];
        let eIm53 = out512[idx + 107];
        let resIm53_s = eIm53 + (oRe53 * tRe11 + oIm53 * tRe53);
        out512[idx + 107] = resIm53_s;
        out512[idx + 407] = -resIm53_s;
        let resRe53_s = eRe53 + (oRe53 * tRe53 - oIm53 * tRe11);
        out512[idx + 406] = resRe53_s;
        out512[idx + 106] = resRe53_s;
        let resRe75_s = eRe53 - (oRe53 * tRe53 - oIm53 * tRe11);
        out512[idx + 362] = resRe75_s;
        out512[idx + 150] = resRe75_s;
        let resIm75_s = -eIm53 + (oRe53 * tRe11 + oIm53 * tRe53);
        out512[idx + 151] = resIm75_s;
        out512[idx + 363] = -resIm75_s;
        
        let oRe54 = out512[idx + 364];
        let oIm54 = out512[idx + 365];
        let eRe54 = out512[idx + 108];
        let eIm54 = out512[idx + 109];
        let resIm54_s = eIm54 + (oRe54 * tRe10 + oIm54 * tRe54);
        out512[idx + 109] = resIm54_s;
        out512[idx + 405] = -resIm54_s;
        let resRe54_s = eRe54 + (oRe54 * tRe54 - oIm54 * tRe10);
        out512[idx + 404] = resRe54_s;
        out512[idx + 108] = resRe54_s;
        let resRe74_s = eRe54 - (oRe54 * tRe54 - oIm54 * tRe10);
        out512[idx + 364] = resRe74_s;
        out512[idx + 148] = resRe74_s;
        let resIm74_s = -eIm54 + (oRe54 * tRe10 + oIm54 * tRe54);
        out512[idx + 149] = resIm74_s;
        out512[idx + 365] = -resIm74_s;
        
        let oRe55 = out512[idx + 366];
        let oIm55 = out512[idx + 367];
        let eRe55 = out512[idx + 110];
        let eIm55 = out512[idx + 111];
        let resIm55_s = eIm55 + (oRe55 * tRe9 + oIm55 * tRe55);
        out512[idx + 111] = resIm55_s;
        out512[idx + 403] = -resIm55_s;
        let resRe55_s = eRe55 + (oRe55 * tRe55 - oIm55 * tRe9);
        out512[idx + 402] = resRe55_s;
        out512[idx + 110] = resRe55_s;
        let resRe73_s = eRe55 - (oRe55 * tRe55 - oIm55 * tRe9);
        out512[idx + 366] = resRe73_s;
        out512[idx + 146] = resRe73_s;
        let resIm73_s = -eIm55 + (oRe55 * tRe9 + oIm55 * tRe55);
        out512[idx + 147] = resIm73_s;
        out512[idx + 367] = -resIm73_s;
        
        let oRe56 = out512[idx + 368];
        let oIm56 = out512[idx + 369];
        let eRe56 = out512[idx + 112];
        let eIm56 = out512[idx + 113];
        let resIm56_s = eIm56 + (oRe56 * tRe8 + oIm56 * tRe56);
        out512[idx + 113] = resIm56_s;
        out512[idx + 401] = -resIm56_s;
        let resRe56_s = eRe56 + (oRe56 * tRe56 - oIm56 * tRe8);
        out512[idx + 400] = resRe56_s;
        out512[idx + 112] = resRe56_s;
        let resRe72_s = eRe56 - (oRe56 * tRe56 - oIm56 * tRe8);
        out512[idx + 368] = resRe72_s;
        out512[idx + 144] = resRe72_s;
        let resIm72_s = -eIm56 + (oRe56 * tRe8 + oIm56 * tRe56);
        out512[idx + 145] = resIm72_s;
        out512[idx + 369] = -resIm72_s;
        
        let oRe57 = out512[idx + 370];
        let oIm57 = out512[idx + 371];
        let eRe57 = out512[idx + 114];
        let eIm57 = out512[idx + 115];
        let resIm57_s = eIm57 + (oRe57 * tRe7 + oIm57 * tRe57);
        out512[idx + 115] = resIm57_s;
        out512[idx + 399] = -resIm57_s;
        let resRe57_s = eRe57 + (oRe57 * tRe57 - oIm57 * tRe7);
        out512[idx + 398] = resRe57_s;
        out512[idx + 114] = resRe57_s;
        let resRe71_s = eRe57 - (oRe57 * tRe57 - oIm57 * tRe7);
        out512[idx + 370] = resRe71_s;
        out512[idx + 142] = resRe71_s;
        let resIm71_s = -eIm57 + (oRe57 * tRe7 + oIm57 * tRe57);
        out512[idx + 143] = resIm71_s;
        out512[idx + 371] = -resIm71_s;
        
        let oRe58 = out512[idx + 372];
        let oIm58 = out512[idx + 373];
        let eRe58 = out512[idx + 116];
        let eIm58 = out512[idx + 117];
        let resIm58_s = eIm58 + (oRe58 * tRe6 + oIm58 * tRe58);
        out512[idx + 117] = resIm58_s;
        out512[idx + 397] = -resIm58_s;
        let resRe58_s = eRe58 + (oRe58 * tRe58 - oIm58 * tRe6);
        out512[idx + 396] = resRe58_s;
        out512[idx + 116] = resRe58_s;
        let resRe70_s = eRe58 - (oRe58 * tRe58 - oIm58 * tRe6);
        out512[idx + 372] = resRe70_s;
        out512[idx + 140] = resRe70_s;
        let resIm70_s = -eIm58 + (oRe58 * tRe6 + oIm58 * tRe58);
        out512[idx + 141] = resIm70_s;
        out512[idx + 373] = -resIm70_s;
        
        let oRe59 = out512[idx + 374];
        let oIm59 = out512[idx + 375];
        let eRe59 = out512[idx + 118];
        let eIm59 = out512[idx + 119];
        let resIm59_s = eIm59 + (oRe59 * tRe5 + oIm59 * tRe59);
        out512[idx + 119] = resIm59_s;
        out512[idx + 395] = -resIm59_s;
        let resRe59_s = eRe59 + (oRe59 * tRe59 - oIm59 * tRe5);
        out512[idx + 394] = resRe59_s;
        out512[idx + 118] = resRe59_s;
        let resRe69_s = eRe59 - (oRe59 * tRe59 - oIm59 * tRe5);
        out512[idx + 374] = resRe69_s;
        out512[idx + 138] = resRe69_s;
        let resIm69_s = -eIm59 + (oRe59 * tRe5 + oIm59 * tRe59);
        out512[idx + 139] = resIm69_s;
        out512[idx + 375] = -resIm69_s;
        
        let oRe60 = out512[idx + 376];
        let oIm60 = out512[idx + 377];
        let eRe60 = out512[idx + 120];
        let eIm60 = out512[idx + 121];
        let resIm60_s = eIm60 + (oRe60 * tRe4 + oIm60 * tRe60);
        out512[idx + 121] = resIm60_s;
        out512[idx + 393] = -resIm60_s;
        let resRe60_s = eRe60 + (oRe60 * tRe60 - oIm60 * tRe4);
        out512[idx + 392] = resRe60_s;
        out512[idx + 120] = resRe60_s;
        let resRe68_s = eRe60 - (oRe60 * tRe60 - oIm60 * tRe4);
        out512[idx + 376] = resRe68_s;
        out512[idx + 136] = resRe68_s;
        let resIm68_s = -eIm60 + (oRe60 * tRe4 + oIm60 * tRe60);
        out512[idx + 137] = resIm68_s;
        out512[idx + 377] = -resIm68_s;
        
        let oRe61 = out512[idx + 378];
        let oIm61 = out512[idx + 379];
        let eRe61 = out512[idx + 122];
        let eIm61 = out512[idx + 123];
        let resIm61_s = eIm61 + (oRe61 * tRe3 + oIm61 * tRe61);
        out512[idx + 123] = resIm61_s;
        out512[idx + 391] = -resIm61_s;
        let resRe61_s = eRe61 + (oRe61 * tRe61 - oIm61 * tRe3);
        out512[idx + 390] = resRe61_s;
        out512[idx + 122] = resRe61_s;
        let resRe67_s = eRe61 - (oRe61 * tRe61 - oIm61 * tRe3);
        out512[idx + 378] = resRe67_s;
        out512[idx + 134] = resRe67_s;
        let resIm67_s = -eIm61 + (oRe61 * tRe3 + oIm61 * tRe61);
        out512[idx + 135] = resIm67_s;
        out512[idx + 379] = -resIm67_s;
        
        let oRe62 = out512[idx + 380];
        let oIm62 = out512[idx + 381];
        let eRe62 = out512[idx + 124];
        let eIm62 = out512[idx + 125];
        let resIm62_s = eIm62 + (oRe62 * tRe2 + oIm62 * tRe62);
        out512[idx + 125] = resIm62_s;
        out512[idx + 389] = -resIm62_s;
        let resRe62_s = eRe62 + (oRe62 * tRe62 - oIm62 * tRe2);
        out512[idx + 388] = resRe62_s;
        out512[idx + 124] = resRe62_s;
        let resRe66_s = eRe62 - (oRe62 * tRe62 - oIm62 * tRe2);
        out512[idx + 380] = resRe66_s;
        out512[idx + 132] = resRe66_s;
        let resIm66_s = -eIm62 + (oRe62 * tRe2 + oIm62 * tRe62);
        out512[idx + 133] = resIm66_s;
        out512[idx + 381] = -resIm66_s;
        
        let oRe63 = out512[idx + 382];
        let oIm63 = out512[idx + 383];
        let eRe63 = out512[idx + 126];
        let eIm63 = out512[idx + 127];
        let resIm63_s = eIm63 + (oRe63 * tRe1 + oIm63 * tRe63);
        out512[idx + 127] = resIm63_s;
        out512[idx + 387] = -resIm63_s;
        let resRe63_s = eRe63 + (oRe63 * tRe63 - oIm63 * tRe1);
        out512[idx + 386] = resRe63_s;
        out512[idx + 126] = resRe63_s;
        let resRe65_s = eRe63 - (oRe63 * tRe63 - oIm63 * tRe1);
        out512[idx + 382] = resRe65_s;
        out512[idx + 130] = resRe65_s;
        let resIm65_s = -eIm63 + (oRe63 * tRe1 + oIm63 * tRe63);
        out512[idx + 131] = resIm65_s;
        out512[idx + 383] = -resIm65_s;
        
        let oRe64 = out512[idx + 384];
        let oIm64 = out512[idx + 385];
        let eRe64 = out512[idx + 128];
        let eIm64 = out512[idx + 129];
        let resIm64_s = eIm64 + oRe64;
        out512[idx + 129] = resIm64_s;
        out512[idx + 385] = -resIm64_s;
        let resRe64_s = eRe64 - oIm64;
        out512[idx + 384] = resRe64_s;
        out512[idx + 128] = resRe64_s;
        
    } 

    return out512;
} 

export {fftReal512}; 
