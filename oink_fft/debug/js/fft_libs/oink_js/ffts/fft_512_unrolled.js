let FFT_FAC_4 = new Float32Array([
1.0000000000000000,-0.0000000000000000,-0.0000000437113883,-1.0000000000000000
]);
let FFT_FAC_8 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.7071067690849304,-0.7071067690849304,-0.0000000437113883,-1.0000000000000000,-0.7071067690849304,-0.7071067690849304
]);
let FFT_FAC_16 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9238795042037964,-0.3826834559440613,0.7071067690849304,-0.7071067690849304,0.3826834261417389,-0.9238795042037964,
-0.0000000437113883,-1.0000000000000000,-0.3826833963394165,-0.9238795638084412,-0.7071067690849304,-0.7071067690849304,-0.9238795042037964,-0.3826834857463837
]);
let FFT_FAC_32 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9807852506637573,-0.1950903236865997,0.9238795042037964,-0.3826834559440613,0.8314695954322815,-0.5555702447891235,
0.7071067690849304,-0.7071067690849304,0.5555702447891235,-0.8314695954322815,0.3826834261417389,-0.9238795042037964,0.1950903534889221,-0.9807852506637573,
-0.0000000437113883,-1.0000000000000000,-0.1950903236865997,-0.9807852506637573,-0.3826833963394165,-0.9238795638084412,-0.5555701851844788,-0.8314696550369263,
-0.7071067690849304,-0.7071067690849304,-0.8314696550369263,-0.5555701851844788,-0.9238795042037964,-0.3826834857463837,-0.9807853102684021,-0.1950903087854385
]);
let FFT_FAC_64 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9951847195625305,-0.0980171412229538,0.9807852506637573,-0.1950903236865997,0.9569403529167175,-0.2902846634387970,
0.9238795042037964,-0.3826834559440613,0.8819212913513184,-0.4713967144489288,0.8314695954322815,-0.5555702447891235,0.7730104923248291,-0.6343932747840881,
0.7071067690849304,-0.7071067690849304,0.6343932747840881,-0.7730104327201843,0.5555702447891235,-0.8314695954322815,0.4713967740535736,-0.8819212317466736,
0.3826834261417389,-0.9238795042037964,0.2902846336364746,-0.9569403529167175,0.1950903534889221,-0.9807852506637573,0.0980171337723732,-0.9951847195625305,
-0.0000000437113883,-1.0000000000000000,-0.0980171039700508,-0.9951847195625305,-0.1950903236865997,-0.9807852506637573,-0.2902847230434418,-0.9569402933120728,
-0.3826833963394165,-0.9238795638084412,-0.4713966250419617,-0.8819212913513184,-0.5555701851844788,-0.8314696550369263,-0.6343932747840881,-0.7730104923248291,
-0.7071067690849304,-0.7071067690849304,-0.7730104923248291,-0.6343932747840881,-0.8314696550369263,-0.5555701851844788,-0.8819212317466736,-0.4713968336582184,
-0.9238795042037964,-0.3826834857463837,-0.9569403529167175,-0.2902847230434418,-0.9807853102684021,-0.1950903087854385,-0.9951847195625305,-0.0980170965194702
]);
let FFT_FAC_128 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9987954497337341,-0.0490676760673523,0.9951847195625305,-0.0980171412229538,0.9891765117645264,-0.1467304676771164,
0.9807852506637573,-0.1950903236865997,0.9700312614440918,-0.2429801821708679,0.9569403529167175,-0.2902846634387970,0.9415440559387207,-0.3368898332118988,
0.9238795042037964,-0.3826834559440613,0.9039893150329590,-0.4275550842285156,0.8819212913513184,-0.4713967144489288,0.8577286005020142,-0.5141027569770813,
0.8314695954322815,-0.5555702447891235,0.8032075166702271,-0.5956993103027344,0.7730104923248291,-0.6343932747840881,0.7409511208534241,-0.6715589761734009,
0.7071067690849304,-0.7071067690849304,0.6715589761734009,-0.7409511208534241,0.6343932747840881,-0.7730104327201843,0.5956993103027344,-0.8032075166702271,
0.5555702447891235,-0.8314695954322815,0.5141028165817261,-0.8577286005020142,0.4713967740535736,-0.8819212317466736,0.4275551140308380,-0.9039893150329590,
0.3826834261417389,-0.9238795042037964,0.3368898332118988,-0.9415440559387207,0.2902846336364746,-0.9569403529167175,0.2429802417755127,-0.9700312614440918,
0.1950903534889221,-0.9807852506637573,0.1467304974794388,-0.9891765117645264,0.0980171337723732,-0.9951847195625305,0.0490676499903202,-0.9987954497337341,
-0.0000000437113883,-1.0000000000000000,-0.0490676201879978,-0.9987954497337341,-0.0980171039700508,-0.9951847195625305,-0.1467304527759552,-0.9891765117645264,
-0.1950903236865997,-0.9807852506637573,-0.2429801970720291,-0.9700312614440918,-0.2902847230434418,-0.9569402933120728,-0.3368898034095764,-0.9415440559387207,
-0.3826833963394165,-0.9238795638084412,-0.4275550842285156,-0.9039893150329590,-0.4713966250419617,-0.8819212913513184,-0.5141027569770813,-0.8577286005020142,
-0.5555701851844788,-0.8314696550369263,-0.5956993699073792,-0.8032075166702271,-0.6343932747840881,-0.7730104923248291,-0.6715590357780457,-0.7409510612487793,
-0.7071067690849304,-0.7071067690849304,-0.7409510612487793,-0.6715590357780457,-0.7730104923248291,-0.6343932747840881,-0.8032075166702271,-0.5956993699073792,
-0.8314696550369263,-0.5555701851844788,-0.8577286005020142,-0.5141027569770813,-0.8819212317466736,-0.4713968336582184,-0.9039893150329590,-0.4275550544261932,
-0.9238795042037964,-0.3826834857463837,-0.9415441155433655,-0.3368898034095764,-0.9569403529167175,-0.2902847230434418,-0.9700312614440918,-0.2429800778627396,
-0.9807853102684021,-0.1950903087854385,-0.9891765117645264,-0.1467305719852448,-0.9951847195625305,-0.0980170965194702,-0.9987954497337341,-0.0490677244961262
]);
let FFT_FAC_256 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9996988177299500,-0.0245412290096283,0.9987954497337341,-0.0490676760673523,0.9972904324531555,-0.0735645666718483,
0.9951847195625305,-0.0980171412229538,0.9924795627593994,-0.1224106699228287,0.9891765117645264,-0.1467304676771164,0.9852776527404785,-0.1709618866443634,
0.9807852506637573,-0.1950903236865997,0.9757021069526672,-0.2191012352705002,0.9700312614440918,-0.2429801821708679,0.9637760519981384,-0.2667127549648285,
0.9569403529167175,-0.2902846634387970,0.9495281577110291,-0.3136817514896393,0.9415440559387207,-0.3368898332118988,0.9329928159713745,-0.3598950505256653,
0.9238795042037964,-0.3826834559440613,0.9142097830772400,-0.4052413105964661,0.9039893150329590,-0.4275550842285156,0.8932242989540100,-0.4496113359928131,
0.8819212913513184,-0.4713967144489288,0.8700870275497437,-0.4928981661796570,0.8577286005020142,-0.5141027569770813,0.8448535799980164,-0.5349976420402527,
0.8314695954322815,-0.5555702447891235,0.8175848126411438,-0.5758082270622253,0.8032075166702271,-0.5956993103027344,0.7883464694023132,-0.6152315735816956,
0.7730104923248291,-0.6343932747840881,0.7572088241577148,-0.6531728506088257,0.7409511208534241,-0.6715589761734009,0.7242470979690552,-0.6895405650138855,
0.7071067690849304,-0.7071067690849304,0.6895405650138855,-0.7242470383644104,0.6715589761734009,-0.7409511208534241,0.6531728506088257,-0.7572088241577148,
0.6343932747840881,-0.7730104327201843,0.6152315735816956,-0.7883464097976685,0.5956993103027344,-0.8032075166702271,0.5758082270622253,-0.8175848126411438,
0.5555702447891235,-0.8314695954322815,0.5349976420402527,-0.8448535799980164,0.5141028165817261,-0.8577286005020142,0.4928981959819794,-0.8700869679450989,
0.4713967740535736,-0.8819212317466736,0.4496113061904907,-0.8932242989540100,0.4275551140308380,-0.9039893150329590,0.4052412807941437,-0.9142097830772400,
0.3826834261417389,-0.9238795042037964,0.3598950803279877,-0.9329927563667297,0.3368898332118988,-0.9415440559387207,0.3136817514896393,-0.9495281577110291,
0.2902846336364746,-0.9569403529167175,0.2667127549648285,-0.9637760519981384,0.2429802417755127,-0.9700312614440918,0.2191012203693390,-0.9757021069526672,
0.1950903534889221,-0.9807852506637573,0.1709618568420410,-0.9852776527404785,0.1467304974794388,-0.9891765117645264,0.1224106252193451,-0.9924795627593994,
0.0980171337723732,-0.9951847195625305,0.0735646113753319,-0.9972904324531555,0.0490676499903202,-0.9987954497337341,0.0245412550866604,-0.9996988177299500,
-0.0000000437113883,-1.0000000000000000,-0.0245412234216928,-0.9996988177299500,-0.0490676201879978,-0.9987954497337341,-0.0735645741224289,-0.9972904324531555,
-0.0980171039700508,-0.9951847195625305,-0.1224107071757317,-0.9924795031547546,-0.1467304527759552,-0.9891765117645264,-0.1709619462490082,-0.9852776527404785,
-0.1950903236865997,-0.9807852506637573,-0.2191011905670166,-0.9757021665573120,-0.2429801970720291,-0.9700312614440918,-0.2667127251625061,-0.9637760519981384,
-0.2902847230434418,-0.9569402933120728,-0.3136817216873169,-0.9495281577110291,-0.3368898034095764,-0.9415440559387207,-0.3598950505256653,-0.9329928159713745,
-0.3826833963394165,-0.9238795638084412,-0.4052413403987885,-0.9142097234725952,-0.4275550842285156,-0.9039893150329590,-0.4496113657951355,-0.8932242989540100,
-0.4713966250419617,-0.8819212913513184,-0.4928981661796570,-0.8700870275497437,-0.5141027569770813,-0.8577286005020142,-0.5349977016448975,-0.8448535203933716,
-0.5555701851844788,-0.8314696550369263,-0.5758081674575806,-0.8175848126411438,-0.5956993699073792,-0.8032075166702271,-0.6152315139770508,-0.7883464694023132,
-0.6343932747840881,-0.7730104923248291,-0.6531728506088257,-0.7572088241577148,-0.6715590357780457,-0.7409510612487793,-0.6895405054092407,-0.7242470979690552,
-0.7071067690849304,-0.7071067690849304,-0.7242471575737000,-0.6895405054092407,-0.7409510612487793,-0.6715590357780457,-0.7572088241577148,-0.6531728506088257,
-0.7730104923248291,-0.6343932747840881,-0.7883464694023132,-0.6152315139770508,-0.8032075166702271,-0.5956993699073792,-0.8175848126411438,-0.5758081674575806,
-0.8314696550369263,-0.5555701851844788,-0.8448535203933716,-0.5349977016448975,-0.8577286005020142,-0.5141027569770813,-0.8700870275497437,-0.4928981363773346,
-0.8819212317466736,-0.4713968336582184,-0.8932242989540100,-0.4496113657951355,-0.9039893150329590,-0.4275550544261932,-0.9142097830772400,-0.4052412211894989,
-0.9238795042037964,-0.3826834857463837,-0.9329928159713745,-0.3598950505256653,-0.9415441155433655,-0.3368898034095764,-0.9495281577110291,-0.3136818408966064,
-0.9569403529167175,-0.2902847230434418,-0.9637760519981384,-0.2667127251625061,-0.9700312614440918,-0.2429800778627396,-0.9757021069526672,-0.2191012948751450,
-0.9807853102684021,-0.1950903087854385,-0.9852776527404785,-0.1709618121385574,-0.9891765117645264,-0.1467305719852448,-0.9924795031547546,-0.1224106997251511,
-0.9951847195625305,-0.0980170965194702,-0.9972904920578003,-0.0735644474625587,-0.9987954497337341,-0.0490677244961262,-0.9996988177299500,-0.0245412103831768
]);
let FFT_FAC_512 = new Float32Array([
1.0000000000000000,-0.0000000000000000,0.9999247193336487,-0.0122715383768082,0.9996988177299500,-0.0245412290096283,0.9993223547935486,-0.0368072241544724,
0.9987954497337341,-0.0490676760673523,0.9981181025505066,-0.0613207370042801,0.9972904324531555,-0.0735645666718483,0.9963126182556152,-0.0857973098754883,
0.9951847195625305,-0.0980171412229538,0.9939069747924805,-0.1102222055196762,0.9924795627593994,-0.1224106699228287,0.9909026622772217,-0.1345807015895844,
0.9891765117645264,-0.1467304676771164,0.9873014092445374,-0.1588581502437592,0.9852776527404785,-0.1709618866443634,0.9831054806709290,-0.1830398887395859,
0.9807852506637573,-0.1950903236865997,0.9783173799514771,-0.2071113735437393,0.9757021069526672,-0.2191012352705002,0.9729399681091309,-0.2310581207275391,
0.9700312614440918,-0.2429801821708679,0.9669764637947083,-0.2548656463623047,0.9637760519981384,-0.2667127549648285,0.9604305028915405,-0.2785196900367737,
0.9569403529167175,-0.2902846634387970,0.9533060193061829,-0.3020059466362000,0.9495281577110291,-0.3136817514896393,0.9456073045730591,-0.3253102898597717,
0.9415440559387207,-0.3368898332118988,0.9373390078544617,-0.3484186828136444,0.9329928159713745,-0.3598950505256653,0.9285060763359070,-0.3713172078132629,
0.9238795042037964,-0.3826834559440613,0.9191138744354248,-0.3939920365810394,0.9142097830772400,-0.4052413105964661,0.9091680049896240,-0.4164295494556427,
0.9039893150329590,-0.4275550842285156,0.8986744880676270,-0.4386162459850311,0.8932242989540100,-0.4496113359928131,0.8876396417617798,-0.4605386853218079,
0.8819212913513184,-0.4713967144489288,0.8760700821876526,-0.4821837544441223,0.8700870275497437,-0.4928981661796570,0.8639728426933289,-0.5035383701324463,
0.8577286005020142,-0.5141027569770813,0.8513551950454712,-0.5245897173881531,0.8448535799980164,-0.5349976420402527,0.8382247090339661,-0.5453249812126160,
0.8314695954322815,-0.5555702447891235,0.8245893120765686,-0.5657317638397217,0.8175848126411438,-0.5758082270622253,0.8104572296142578,-0.5857978463172913,
0.8032075166702271,-0.5956993103027344,0.7958369255065918,-0.6055110096931458,0.7883464694023132,-0.6152315735816956,0.7807372212409973,-0.6248595118522644,
0.7730104923248291,-0.6343932747840881,0.7651672363281250,-0.6438315510749817,0.7572088241577148,-0.6531728506088257,0.7491363883018494,-0.6624158024787903,
0.7409511208534241,-0.6715589761734009,0.7326542735099792,-0.6806010007858276,0.7242470979690552,-0.6895405650138855,0.7157308459281921,-0.6983762383460999,
0.7071067690849304,-0.7071067690849304,0.6983762383460999,-0.7157308459281921,0.6895405650138855,-0.7242470383644104,0.6806010007858276,-0.7326542735099792,
0.6715589761734009,-0.7409511208534241,0.6624157428741455,-0.7491363883018494,0.6531728506088257,-0.7572088241577148,0.6438315510749817,-0.7651672959327698,
0.6343932747840881,-0.7730104327201843,0.6248595118522644,-0.7807372212409973,0.6152315735816956,-0.7883464097976685,0.6055110692977905,-0.7958369255065918,
0.5956993103027344,-0.8032075166702271,0.5857978463172913,-0.8104571700096130,0.5758082270622253,-0.8175848126411438,0.5657318234443665,-0.8245893120765686,
0.5555702447891235,-0.8314695954322815,0.5453249812126160,-0.8382247090339661,0.5349976420402527,-0.8448535799980164,0.5245896577835083,-0.8513551950454712,
0.5141028165817261,-0.8577286005020142,0.5035384297370911,-0.8639728426933289,0.4928981959819794,-0.8700869679450989,0.4821837246417999,-0.8760701417922974,
0.4713967740535736,-0.8819212317466736,0.4605387151241302,-0.8876396417617798,0.4496113061904907,-0.8932242989540100,0.4386162757873535,-0.8986744284629822,
0.4275551140308380,-0.9039893150329590,0.4164295494556427,-0.9091680049896240,0.4052412807941437,-0.9142097830772400,0.3939920663833618,-0.9191138148307800,
0.3826834261417389,-0.9238795042037964,0.3713171482086182,-0.9285060763359070,0.3598950803279877,-0.9329927563667297,0.3484186828136444,-0.9373390078544617,
0.3368898332118988,-0.9415440559387207,0.3253102302551270,-0.9456073641777039,0.3136817514896393,-0.9495281577110291,0.3020059466362000,-0.9533060193061829,
0.2902846336364746,-0.9569403529167175,0.2785197198390961,-0.9604305028915405,0.2667127549648285,-0.9637760519981384,0.2548656463623047,-0.9669764637947083,
0.2429802417755127,-0.9700312614440918,0.2310581356287003,-0.9729399681091309,0.2191012203693390,-0.9757021069526672,0.2071113288402557,-0.9783173799514771,
0.1950903534889221,-0.9807852506637573,0.1830398887395859,-0.9831054806709290,0.1709618568420410,-0.9852776527404785,0.1588581949472427,-0.9873014092445374,
0.1467304974794388,-0.9891765117645264,0.1345806866884232,-0.9909026622772217,0.1224106252193451,-0.9924795627593994,0.1102222353219986,-0.9939069747924805,
0.0980171337723732,-0.9951847195625305,0.0857972726225853,-0.9963126182556152,0.0735646113753319,-0.9972904324531555,0.0613207481801510,-0.9981181025505066,
0.0490676499903202,-0.9987954497337341,0.0368071645498276,-0.9993224143981934,0.0245412550866604,-0.9996988177299500,0.0122715290635824,-0.9999247193336487,
-0.0000000437113883,-1.0000000000000000,-0.0122714973986149,-0.9999247193336487,-0.0245412234216928,-0.9996988177299500,-0.0368072502315044,-0.9993223547935486,
-0.0490676201879978,-0.9987954497337341,-0.0613207146525383,-0.9981181025505066,-0.0735645741224289,-0.9972904324531555,-0.0857973620295525,-0.9963126182556152,
-0.0980171039700508,-0.9951847195625305,-0.1102222055196762,-0.9939069747924805,-0.1224107071757317,-0.9924795031547546,-0.1345806568861008,-0.9909026622772217,
-0.1467304527759552,-0.9891765117645264,-0.1588581651449203,-0.9873014092445374,-0.1709619462490082,-0.9852776527404785,-0.1830398589372635,-0.9831054806709290,
-0.1950903236865997,-0.9807852506637573,-0.2071114182472229,-0.9783173799514771,-0.2191011905670166,-0.9757021665573120,-0.2310580909252167,-0.9729399681091309,
-0.2429801970720291,-0.9700312614440918,-0.2548657059669495,-0.9669764637947083,-0.2667127251625061,-0.9637760519981384,-0.2785196900367737,-0.9604305028915405,
-0.2902847230434418,-0.9569402933120728,-0.3020059168338776,-0.9533060789108276,-0.3136817216873169,-0.9495281577110291,-0.3253103196620941,-0.9456073045730591,
-0.3368898034095764,-0.9415440559387207,-0.3484186530113220,-0.9373390078544617,-0.3598950505256653,-0.9329928159713745,-0.3713172376155853,-0.9285060763359070,
-0.3826833963394165,-0.9238795638084412,-0.3939920365810394,-0.9191138744354248,-0.4052413403987885,-0.9142097234725952,-0.4164295196533203,-0.9091680049896240,
-0.4275550842285156,-0.9039893150329590,-0.4386162459850311,-0.8986744284629822,-0.4496113657951355,-0.8932242989540100,-0.4605388045310974,-0.8876395821571350,
-0.4713966250419617,-0.8819212913513184,-0.4821836948394775,-0.8760701417922974,-0.4928981661796570,-0.8700870275497437,-0.5035383701324463,-0.8639728426933289,
-0.5141027569770813,-0.8577286005020142,-0.5245897173881531,-0.8513551354408264,-0.5349977016448975,-0.8448535203933716,-0.5453249216079712,-0.8382247686386108,
-0.5555701851844788,-0.8314696550369263,-0.5657317638397217,-0.8245893120765686,-0.5758081674575806,-0.8175848126411438,-0.5857979059219360,-0.8104571700096130,
-0.5956993699073792,-0.8032075166702271,-0.6055111289024353,-0.7958368659019470,-0.6152315139770508,-0.7883464694023132,-0.6248594522476196,-0.7807372808456421,
-0.6343932747840881,-0.7730104923248291,-0.6438315510749817,-0.7651672363281250,-0.6531728506088257,-0.7572088241577148,-0.6624158024787903,-0.7491363286972046,
-0.6715590357780457,-0.7409510612487793,-0.6806009411811829,-0.7326543331146240,-0.6895405054092407,-0.7242470979690552,-0.6983762383460999,-0.7157308459281921,
-0.7071067690849304,-0.7071067690849304,-0.7157308459281921,-0.6983762383460999,-0.7242471575737000,-0.6895405054092407,-0.7326543331146240,-0.6806009411811829,
-0.7409510612487793,-0.6715590357780457,-0.7491363286972046,-0.6624158024787903,-0.7572088241577148,-0.6531728506088257,-0.7651672959327698,-0.6438315510749817,
-0.7730104923248291,-0.6343932747840881,-0.7807372808456421,-0.6248594522476196,-0.7883464694023132,-0.6152315139770508,-0.7958368659019470,-0.6055111289024353,
-0.8032075166702271,-0.5956993699073792,-0.8104571700096130,-0.5857978463172913,-0.8175848126411438,-0.5758081674575806,-0.8245893120765686,-0.5657317638397217,
-0.8314696550369263,-0.5555701851844788,-0.8382246494293213,-0.5453251004219055,-0.8448535203933716,-0.5349977016448975,-0.8513551950454712,-0.5245897173881531,
-0.8577286005020142,-0.5141027569770813,-0.8639728426933289,-0.5035383701324463,-0.8700870275497437,-0.4928981363773346,-0.8760701417922974,-0.4821836948394775,
-0.8819212317466736,-0.4713968336582184,-0.8876395821571350,-0.4605387747287750,-0.8932242989540100,-0.4496113657951355,-0.8986744880676270,-0.4386162459850311,
-0.9039893150329590,-0.4275550544261932,-0.9091680049896240,-0.4164294898509979,-0.9142097830772400,-0.4052412211894989,-0.9191138148307800,-0.3939921259880066,
-0.9238795042037964,-0.3826834857463837,-0.9285060763359070,-0.3713172376155853,-0.9329928159713745,-0.3598950505256653,-0.9373390078544617,-0.3484186530113220,
-0.9415441155433655,-0.3368898034095764,-0.9456073641777039,-0.3253102004528046,-0.9495281577110291,-0.3136818408966064,-0.9533060193061829,-0.3020060062408447,
-0.9569403529167175,-0.2902847230434418,-0.9604305028915405,-0.2785196900367737,-0.9637760519981384,-0.2667127251625061,-0.9669764637947083,-0.2548655867576599,
-0.9700312614440918,-0.2429800778627396,-0.9729399085044861,-0.2310581952333450,-0.9757021069526672,-0.2191012948751450,-0.9783173799514771,-0.2071114033460617,
-0.9807853102684021,-0.1950903087854385,-0.9831054806709290,-0.1830398440361023,-0.9852776527404785,-0.1709618121385574,-0.9873014092445374,-0.1588580310344696,
-0.9891765117645264,-0.1467305719852448,-0.9909026026725769,-0.1345807611942291,-0.9924795031547546,-0.1224106997251511,-0.9939069747924805,-0.1102221980690956,
-0.9951847195625305,-0.0980170965194702,-0.9963126182556152,-0.0857972279191017,-0.9972904920578003,-0.0735644474625587,-0.9981181025505066,-0.0613208226859570,
-0.9987954497337341,-0.0490677244961262,-0.9993223547935486,-0.0368072390556335,-0.9996988177299500,-0.0245412103831768,-0.9999247193336487,-0.0122714852914214
]);


let iBR512 = new Float32Array(512);
let iP512  = new Float32Array(512);
let _iP512 = new Float32Array(512);
let out512 = new Float32Array(1024);

function fftReal512(realInput) { 
    let size = realInput.length;
    if (size != 512) {
        for (let i = 0; i < 512; i++) {
            iP512[i] = (i < size) ? realInput[i] : 0.0;
        }
        _iP512 = iP512;
    } else {
        _iP512 = realInput;
    }


    //Bit Reversal
    {
        iBR512[0]=_iP512[0]; 
        iBR512[1]=_iP512[256]; 
        iBR512[2]=_iP512[128]; 
        iBR512[3]=_iP512[384]; 
        iBR512[4]=_iP512[64]; 
        iBR512[5]=_iP512[320]; 
        iBR512[6]=_iP512[192]; 
        iBR512[7]=_iP512[448]; 
        iBR512[8]=_iP512[32]; 
        iBR512[9]=_iP512[288]; 
        iBR512[10]=_iP512[160]; 
        iBR512[11]=_iP512[416]; 
        iBR512[12]=_iP512[96]; 
        iBR512[13]=_iP512[352]; 
        iBR512[14]=_iP512[224]; 
        iBR512[15]=_iP512[480]; 
        iBR512[16]=_iP512[16]; 
        iBR512[17]=_iP512[272]; 
        iBR512[18]=_iP512[144]; 
        iBR512[19]=_iP512[400]; 
        iBR512[20]=_iP512[80]; 
        iBR512[21]=_iP512[336]; 
        iBR512[22]=_iP512[208]; 
        iBR512[23]=_iP512[464]; 
        iBR512[24]=_iP512[48]; 
        iBR512[25]=_iP512[304]; 
        iBR512[26]=_iP512[176]; 
        iBR512[27]=_iP512[432]; 
        iBR512[28]=_iP512[112]; 
        iBR512[29]=_iP512[368]; 
        iBR512[30]=_iP512[240]; 
        iBR512[31]=_iP512[496]; 
        iBR512[32]=_iP512[8]; 
        iBR512[33]=_iP512[264]; 
        iBR512[34]=_iP512[136]; 
        iBR512[35]=_iP512[392]; 
        iBR512[36]=_iP512[72]; 
        iBR512[37]=_iP512[328]; 
        iBR512[38]=_iP512[200]; 
        iBR512[39]=_iP512[456]; 
        iBR512[40]=_iP512[40]; 
        iBR512[41]=_iP512[296]; 
        iBR512[42]=_iP512[168]; 
        iBR512[43]=_iP512[424]; 
        iBR512[44]=_iP512[104]; 
        iBR512[45]=_iP512[360]; 
        iBR512[46]=_iP512[232]; 
        iBR512[47]=_iP512[488]; 
        iBR512[48]=_iP512[24]; 
        iBR512[49]=_iP512[280]; 
        iBR512[50]=_iP512[152]; 
        iBR512[51]=_iP512[408]; 
        iBR512[52]=_iP512[88]; 
        iBR512[53]=_iP512[344]; 
        iBR512[54]=_iP512[216]; 
        iBR512[55]=_iP512[472]; 
        iBR512[56]=_iP512[56]; 
        iBR512[57]=_iP512[312]; 
        iBR512[58]=_iP512[184]; 
        iBR512[59]=_iP512[440]; 
        iBR512[60]=_iP512[120]; 
        iBR512[61]=_iP512[376]; 
        iBR512[62]=_iP512[248]; 
        iBR512[63]=_iP512[504]; 
        iBR512[64]=_iP512[4]; 
        iBR512[65]=_iP512[260]; 
        iBR512[66]=_iP512[132]; 
        iBR512[67]=_iP512[388]; 
        iBR512[68]=_iP512[68]; 
        iBR512[69]=_iP512[324]; 
        iBR512[70]=_iP512[196]; 
        iBR512[71]=_iP512[452]; 
        iBR512[72]=_iP512[36]; 
        iBR512[73]=_iP512[292]; 
        iBR512[74]=_iP512[164]; 
        iBR512[75]=_iP512[420]; 
        iBR512[76]=_iP512[100]; 
        iBR512[77]=_iP512[356]; 
        iBR512[78]=_iP512[228]; 
        iBR512[79]=_iP512[484]; 
        iBR512[80]=_iP512[20]; 
        iBR512[81]=_iP512[276]; 
        iBR512[82]=_iP512[148]; 
        iBR512[83]=_iP512[404]; 
        iBR512[84]=_iP512[84]; 
        iBR512[85]=_iP512[340]; 
        iBR512[86]=_iP512[212]; 
        iBR512[87]=_iP512[468]; 
        iBR512[88]=_iP512[52]; 
        iBR512[89]=_iP512[308]; 
        iBR512[90]=_iP512[180]; 
        iBR512[91]=_iP512[436]; 
        iBR512[92]=_iP512[116]; 
        iBR512[93]=_iP512[372]; 
        iBR512[94]=_iP512[244]; 
        iBR512[95]=_iP512[500]; 
        iBR512[96]=_iP512[12]; 
        iBR512[97]=_iP512[268]; 
        iBR512[98]=_iP512[140]; 
        iBR512[99]=_iP512[396]; 
        iBR512[100]=_iP512[76]; 
        iBR512[101]=_iP512[332]; 
        iBR512[102]=_iP512[204]; 
        iBR512[103]=_iP512[460]; 
        iBR512[104]=_iP512[44]; 
        iBR512[105]=_iP512[300]; 
        iBR512[106]=_iP512[172]; 
        iBR512[107]=_iP512[428]; 
        iBR512[108]=_iP512[108]; 
        iBR512[109]=_iP512[364]; 
        iBR512[110]=_iP512[236]; 
        iBR512[111]=_iP512[492]; 
        iBR512[112]=_iP512[28]; 
        iBR512[113]=_iP512[284]; 
        iBR512[114]=_iP512[156]; 
        iBR512[115]=_iP512[412]; 
        iBR512[116]=_iP512[92]; 
        iBR512[117]=_iP512[348]; 
        iBR512[118]=_iP512[220]; 
        iBR512[119]=_iP512[476]; 
        iBR512[120]=_iP512[60]; 
        iBR512[121]=_iP512[316]; 
        iBR512[122]=_iP512[188]; 
        iBR512[123]=_iP512[444]; 
        iBR512[124]=_iP512[124]; 
        iBR512[125]=_iP512[380]; 
        iBR512[126]=_iP512[252]; 
        iBR512[127]=_iP512[508]; 
        iBR512[128]=_iP512[2]; 
        iBR512[129]=_iP512[258]; 
        iBR512[130]=_iP512[130]; 
        iBR512[131]=_iP512[386]; 
        iBR512[132]=_iP512[66]; 
        iBR512[133]=_iP512[322]; 
        iBR512[134]=_iP512[194]; 
        iBR512[135]=_iP512[450]; 
        iBR512[136]=_iP512[34]; 
        iBR512[137]=_iP512[290]; 
        iBR512[138]=_iP512[162]; 
        iBR512[139]=_iP512[418]; 
        iBR512[140]=_iP512[98]; 
        iBR512[141]=_iP512[354]; 
        iBR512[142]=_iP512[226]; 
        iBR512[143]=_iP512[482]; 
        iBR512[144]=_iP512[18]; 
        iBR512[145]=_iP512[274]; 
        iBR512[146]=_iP512[146]; 
        iBR512[147]=_iP512[402]; 
        iBR512[148]=_iP512[82]; 
        iBR512[149]=_iP512[338]; 
        iBR512[150]=_iP512[210]; 
        iBR512[151]=_iP512[466]; 
        iBR512[152]=_iP512[50]; 
        iBR512[153]=_iP512[306]; 
        iBR512[154]=_iP512[178]; 
        iBR512[155]=_iP512[434]; 
        iBR512[156]=_iP512[114]; 
        iBR512[157]=_iP512[370]; 
        iBR512[158]=_iP512[242]; 
        iBR512[159]=_iP512[498]; 
        iBR512[160]=_iP512[10]; 
        iBR512[161]=_iP512[266]; 
        iBR512[162]=_iP512[138]; 
        iBR512[163]=_iP512[394]; 
        iBR512[164]=_iP512[74]; 
        iBR512[165]=_iP512[330]; 
        iBR512[166]=_iP512[202]; 
        iBR512[167]=_iP512[458]; 
        iBR512[168]=_iP512[42]; 
        iBR512[169]=_iP512[298]; 
        iBR512[170]=_iP512[170]; 
        iBR512[171]=_iP512[426]; 
        iBR512[172]=_iP512[106]; 
        iBR512[173]=_iP512[362]; 
        iBR512[174]=_iP512[234]; 
        iBR512[175]=_iP512[490]; 
        iBR512[176]=_iP512[26]; 
        iBR512[177]=_iP512[282]; 
        iBR512[178]=_iP512[154]; 
        iBR512[179]=_iP512[410]; 
        iBR512[180]=_iP512[90]; 
        iBR512[181]=_iP512[346]; 
        iBR512[182]=_iP512[218]; 
        iBR512[183]=_iP512[474]; 
        iBR512[184]=_iP512[58]; 
        iBR512[185]=_iP512[314]; 
        iBR512[186]=_iP512[186]; 
        iBR512[187]=_iP512[442]; 
        iBR512[188]=_iP512[122]; 
        iBR512[189]=_iP512[378]; 
        iBR512[190]=_iP512[250]; 
        iBR512[191]=_iP512[506]; 
        iBR512[192]=_iP512[6]; 
        iBR512[193]=_iP512[262]; 
        iBR512[194]=_iP512[134]; 
        iBR512[195]=_iP512[390]; 
        iBR512[196]=_iP512[70]; 
        iBR512[197]=_iP512[326]; 
        iBR512[198]=_iP512[198]; 
        iBR512[199]=_iP512[454]; 
        iBR512[200]=_iP512[38]; 
        iBR512[201]=_iP512[294]; 
        iBR512[202]=_iP512[166]; 
        iBR512[203]=_iP512[422]; 
        iBR512[204]=_iP512[102]; 
        iBR512[205]=_iP512[358]; 
        iBR512[206]=_iP512[230]; 
        iBR512[207]=_iP512[486]; 
        iBR512[208]=_iP512[22]; 
        iBR512[209]=_iP512[278]; 
        iBR512[210]=_iP512[150]; 
        iBR512[211]=_iP512[406]; 
        iBR512[212]=_iP512[86]; 
        iBR512[213]=_iP512[342]; 
        iBR512[214]=_iP512[214]; 
        iBR512[215]=_iP512[470]; 
        iBR512[216]=_iP512[54]; 
        iBR512[217]=_iP512[310]; 
        iBR512[218]=_iP512[182]; 
        iBR512[219]=_iP512[438]; 
        iBR512[220]=_iP512[118]; 
        iBR512[221]=_iP512[374]; 
        iBR512[222]=_iP512[246]; 
        iBR512[223]=_iP512[502]; 
        iBR512[224]=_iP512[14]; 
        iBR512[225]=_iP512[270]; 
        iBR512[226]=_iP512[142]; 
        iBR512[227]=_iP512[398]; 
        iBR512[228]=_iP512[78]; 
        iBR512[229]=_iP512[334]; 
        iBR512[230]=_iP512[206]; 
        iBR512[231]=_iP512[462]; 
        iBR512[232]=_iP512[46]; 
        iBR512[233]=_iP512[302]; 
        iBR512[234]=_iP512[174]; 
        iBR512[235]=_iP512[430]; 
        iBR512[236]=_iP512[110]; 
        iBR512[237]=_iP512[366]; 
        iBR512[238]=_iP512[238]; 
        iBR512[239]=_iP512[494]; 
        iBR512[240]=_iP512[30]; 
        iBR512[241]=_iP512[286]; 
        iBR512[242]=_iP512[158]; 
        iBR512[243]=_iP512[414]; 
        iBR512[244]=_iP512[94]; 
        iBR512[245]=_iP512[350]; 
        iBR512[246]=_iP512[222]; 
        iBR512[247]=_iP512[478]; 
        iBR512[248]=_iP512[62]; 
        iBR512[249]=_iP512[318]; 
        iBR512[250]=_iP512[190]; 
        iBR512[251]=_iP512[446]; 
        iBR512[252]=_iP512[126]; 
        iBR512[253]=_iP512[382]; 
        iBR512[254]=_iP512[254]; 
        iBR512[255]=_iP512[510]; 
        iBR512[256]=_iP512[1]; 
        iBR512[257]=_iP512[257]; 
        iBR512[258]=_iP512[129]; 
        iBR512[259]=_iP512[385]; 
        iBR512[260]=_iP512[65]; 
        iBR512[261]=_iP512[321]; 
        iBR512[262]=_iP512[193]; 
        iBR512[263]=_iP512[449]; 
        iBR512[264]=_iP512[33]; 
        iBR512[265]=_iP512[289]; 
        iBR512[266]=_iP512[161]; 
        iBR512[267]=_iP512[417]; 
        iBR512[268]=_iP512[97]; 
        iBR512[269]=_iP512[353]; 
        iBR512[270]=_iP512[225]; 
        iBR512[271]=_iP512[481]; 
        iBR512[272]=_iP512[17]; 
        iBR512[273]=_iP512[273]; 
        iBR512[274]=_iP512[145]; 
        iBR512[275]=_iP512[401]; 
        iBR512[276]=_iP512[81]; 
        iBR512[277]=_iP512[337]; 
        iBR512[278]=_iP512[209]; 
        iBR512[279]=_iP512[465]; 
        iBR512[280]=_iP512[49]; 
        iBR512[281]=_iP512[305]; 
        iBR512[282]=_iP512[177]; 
        iBR512[283]=_iP512[433]; 
        iBR512[284]=_iP512[113]; 
        iBR512[285]=_iP512[369]; 
        iBR512[286]=_iP512[241]; 
        iBR512[287]=_iP512[497]; 
        iBR512[288]=_iP512[9]; 
        iBR512[289]=_iP512[265]; 
        iBR512[290]=_iP512[137]; 
        iBR512[291]=_iP512[393]; 
        iBR512[292]=_iP512[73]; 
        iBR512[293]=_iP512[329]; 
        iBR512[294]=_iP512[201]; 
        iBR512[295]=_iP512[457]; 
        iBR512[296]=_iP512[41]; 
        iBR512[297]=_iP512[297]; 
        iBR512[298]=_iP512[169]; 
        iBR512[299]=_iP512[425]; 
        iBR512[300]=_iP512[105]; 
        iBR512[301]=_iP512[361]; 
        iBR512[302]=_iP512[233]; 
        iBR512[303]=_iP512[489]; 
        iBR512[304]=_iP512[25]; 
        iBR512[305]=_iP512[281]; 
        iBR512[306]=_iP512[153]; 
        iBR512[307]=_iP512[409]; 
        iBR512[308]=_iP512[89]; 
        iBR512[309]=_iP512[345]; 
        iBR512[310]=_iP512[217]; 
        iBR512[311]=_iP512[473]; 
        iBR512[312]=_iP512[57]; 
        iBR512[313]=_iP512[313]; 
        iBR512[314]=_iP512[185]; 
        iBR512[315]=_iP512[441]; 
        iBR512[316]=_iP512[121]; 
        iBR512[317]=_iP512[377]; 
        iBR512[318]=_iP512[249]; 
        iBR512[319]=_iP512[505]; 
        iBR512[320]=_iP512[5]; 
        iBR512[321]=_iP512[261]; 
        iBR512[322]=_iP512[133]; 
        iBR512[323]=_iP512[389]; 
        iBR512[324]=_iP512[69]; 
        iBR512[325]=_iP512[325]; 
        iBR512[326]=_iP512[197]; 
        iBR512[327]=_iP512[453]; 
        iBR512[328]=_iP512[37]; 
        iBR512[329]=_iP512[293]; 
        iBR512[330]=_iP512[165]; 
        iBR512[331]=_iP512[421]; 
        iBR512[332]=_iP512[101]; 
        iBR512[333]=_iP512[357]; 
        iBR512[334]=_iP512[229]; 
        iBR512[335]=_iP512[485]; 
        iBR512[336]=_iP512[21]; 
        iBR512[337]=_iP512[277]; 
        iBR512[338]=_iP512[149]; 
        iBR512[339]=_iP512[405]; 
        iBR512[340]=_iP512[85]; 
        iBR512[341]=_iP512[341]; 
        iBR512[342]=_iP512[213]; 
        iBR512[343]=_iP512[469]; 
        iBR512[344]=_iP512[53]; 
        iBR512[345]=_iP512[309]; 
        iBR512[346]=_iP512[181]; 
        iBR512[347]=_iP512[437]; 
        iBR512[348]=_iP512[117]; 
        iBR512[349]=_iP512[373]; 
        iBR512[350]=_iP512[245]; 
        iBR512[351]=_iP512[501]; 
        iBR512[352]=_iP512[13]; 
        iBR512[353]=_iP512[269]; 
        iBR512[354]=_iP512[141]; 
        iBR512[355]=_iP512[397]; 
        iBR512[356]=_iP512[77]; 
        iBR512[357]=_iP512[333]; 
        iBR512[358]=_iP512[205]; 
        iBR512[359]=_iP512[461]; 
        iBR512[360]=_iP512[45]; 
        iBR512[361]=_iP512[301]; 
        iBR512[362]=_iP512[173]; 
        iBR512[363]=_iP512[429]; 
        iBR512[364]=_iP512[109]; 
        iBR512[365]=_iP512[365]; 
        iBR512[366]=_iP512[237]; 
        iBR512[367]=_iP512[493]; 
        iBR512[368]=_iP512[29]; 
        iBR512[369]=_iP512[285]; 
        iBR512[370]=_iP512[157]; 
        iBR512[371]=_iP512[413]; 
        iBR512[372]=_iP512[93]; 
        iBR512[373]=_iP512[349]; 
        iBR512[374]=_iP512[221]; 
        iBR512[375]=_iP512[477]; 
        iBR512[376]=_iP512[61]; 
        iBR512[377]=_iP512[317]; 
        iBR512[378]=_iP512[189]; 
        iBR512[379]=_iP512[445]; 
        iBR512[380]=_iP512[125]; 
        iBR512[381]=_iP512[381]; 
        iBR512[382]=_iP512[253]; 
        iBR512[383]=_iP512[509]; 
        iBR512[384]=_iP512[3]; 
        iBR512[385]=_iP512[259]; 
        iBR512[386]=_iP512[131]; 
        iBR512[387]=_iP512[387]; 
        iBR512[388]=_iP512[67]; 
        iBR512[389]=_iP512[323]; 
        iBR512[390]=_iP512[195]; 
        iBR512[391]=_iP512[451]; 
        iBR512[392]=_iP512[35]; 
        iBR512[393]=_iP512[291]; 
        iBR512[394]=_iP512[163]; 
        iBR512[395]=_iP512[419]; 
        iBR512[396]=_iP512[99]; 
        iBR512[397]=_iP512[355]; 
        iBR512[398]=_iP512[227]; 
        iBR512[399]=_iP512[483]; 
        iBR512[400]=_iP512[19]; 
        iBR512[401]=_iP512[275]; 
        iBR512[402]=_iP512[147]; 
        iBR512[403]=_iP512[403]; 
        iBR512[404]=_iP512[83]; 
        iBR512[405]=_iP512[339]; 
        iBR512[406]=_iP512[211]; 
        iBR512[407]=_iP512[467]; 
        iBR512[408]=_iP512[51]; 
        iBR512[409]=_iP512[307]; 
        iBR512[410]=_iP512[179]; 
        iBR512[411]=_iP512[435]; 
        iBR512[412]=_iP512[115]; 
        iBR512[413]=_iP512[371]; 
        iBR512[414]=_iP512[243]; 
        iBR512[415]=_iP512[499]; 
        iBR512[416]=_iP512[11]; 
        iBR512[417]=_iP512[267]; 
        iBR512[418]=_iP512[139]; 
        iBR512[419]=_iP512[395]; 
        iBR512[420]=_iP512[75]; 
        iBR512[421]=_iP512[331]; 
        iBR512[422]=_iP512[203]; 
        iBR512[423]=_iP512[459]; 
        iBR512[424]=_iP512[43]; 
        iBR512[425]=_iP512[299]; 
        iBR512[426]=_iP512[171]; 
        iBR512[427]=_iP512[427]; 
        iBR512[428]=_iP512[107]; 
        iBR512[429]=_iP512[363]; 
        iBR512[430]=_iP512[235]; 
        iBR512[431]=_iP512[491]; 
        iBR512[432]=_iP512[27]; 
        iBR512[433]=_iP512[283]; 
        iBR512[434]=_iP512[155]; 
        iBR512[435]=_iP512[411]; 
        iBR512[436]=_iP512[91]; 
        iBR512[437]=_iP512[347]; 
        iBR512[438]=_iP512[219]; 
        iBR512[439]=_iP512[475]; 
        iBR512[440]=_iP512[59]; 
        iBR512[441]=_iP512[315]; 
        iBR512[442]=_iP512[187]; 
        iBR512[443]=_iP512[443]; 
        iBR512[444]=_iP512[123]; 
        iBR512[445]=_iP512[379]; 
        iBR512[446]=_iP512[251]; 
        iBR512[447]=_iP512[507]; 
        iBR512[448]=_iP512[7]; 
        iBR512[449]=_iP512[263]; 
        iBR512[450]=_iP512[135]; 
        iBR512[451]=_iP512[391]; 
        iBR512[452]=_iP512[71]; 
        iBR512[453]=_iP512[327]; 
        iBR512[454]=_iP512[199]; 
        iBR512[455]=_iP512[455]; 
        iBR512[456]=_iP512[39]; 
        iBR512[457]=_iP512[295]; 
        iBR512[458]=_iP512[167]; 
        iBR512[459]=_iP512[423]; 
        iBR512[460]=_iP512[103]; 
        iBR512[461]=_iP512[359]; 
        iBR512[462]=_iP512[231]; 
        iBR512[463]=_iP512[487]; 
        iBR512[464]=_iP512[23]; 
        iBR512[465]=_iP512[279]; 
        iBR512[466]=_iP512[151]; 
        iBR512[467]=_iP512[407]; 
        iBR512[468]=_iP512[87]; 
        iBR512[469]=_iP512[343]; 
        iBR512[470]=_iP512[215]; 
        iBR512[471]=_iP512[471]; 
        iBR512[472]=_iP512[55]; 
        iBR512[473]=_iP512[311]; 
        iBR512[474]=_iP512[183]; 
        iBR512[475]=_iP512[439]; 
        iBR512[476]=_iP512[119]; 
        iBR512[477]=_iP512[375]; 
        iBR512[478]=_iP512[247]; 
        iBR512[479]=_iP512[503]; 
        iBR512[480]=_iP512[15]; 
        iBR512[481]=_iP512[271]; 
        iBR512[482]=_iP512[143]; 
        iBR512[483]=_iP512[399]; 
        iBR512[484]=_iP512[79]; 
        iBR512[485]=_iP512[335]; 
        iBR512[486]=_iP512[207]; 
        iBR512[487]=_iP512[463]; 
        iBR512[488]=_iP512[47]; 
        iBR512[489]=_iP512[303]; 
        iBR512[490]=_iP512[175]; 
        iBR512[491]=_iP512[431]; 
        iBR512[492]=_iP512[111]; 
        iBR512[493]=_iP512[367]; 
        iBR512[494]=_iP512[239]; 
        iBR512[495]=_iP512[495]; 
        iBR512[496]=_iP512[31]; 
        iBR512[497]=_iP512[287]; 
        iBR512[498]=_iP512[159]; 
        iBR512[499]=_iP512[415]; 
        iBR512[500]=_iP512[95]; 
        iBR512[501]=_iP512[351]; 
        iBR512[502]=_iP512[223]; 
        iBR512[503]=_iP512[479]; 
        iBR512[504]=_iP512[63]; 
        iBR512[505]=_iP512[319]; 
        iBR512[506]=_iP512[191]; 
        iBR512[507]=_iP512[447]; 
        iBR512[508]=_iP512[127]; 
        iBR512[509]=_iP512[383]; 
        iBR512[510]=_iP512[255]; 
        iBR512[511]=_iP512[511]; 
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 4 - FFT step for SIZE 4/8 
    ////////////////////////////////////////////////

    for (let idx = 0, out_idx = 0; idx < 512; idx += 4, out_idx += 8) {
        let x0aRe = iBR512[idx    ];
        let x1aRe = iBR512[idx + 1];
        let x2aRe = iBR512[idx + 2];
        let x3aRe = iBR512[idx + 3];

        let sum1  =   x0aRe + x1aRe;
        let sum2  =   x2aRe + x3aRe;
        let diff1 =   x0aRe - x1aRe;
        let diff2 =   x3aRe - x2aRe;

        out512[out_idx]     = sum1 + sum2;
        out512[out_idx + 1] = 0.0;
        out512[out_idx + 2] = diff1;
        out512[out_idx + 3] = diff2;
        out512[out_idx + 4] = sum1 - sum2;
        out512[out_idx + 5] = 0.0;
        out512[out_idx + 6] = diff1;
        out512[out_idx + 7] = -diff2;
    }

    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 8 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 4; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 8 + j;
         let oI = 8 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 16 + j;
         let oI = 16 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 24 + j;
         let oI = 24 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 32 + j;
         let oI = 32 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 40 + j;
         let oI = 40 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 48 + j;
         let oI = 48 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 56 + j;
         let oI = 56 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 64 + j;
         let oI = 64 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 72 + j;
         let oI = 72 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 80 + j;
         let oI = 80 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 88 + j;
         let oI = 88 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 96 + j;
         let oI = 96 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 104 + j;
         let oI = 104 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 112 + j;
         let oI = 112 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 120 + j;
         let oI = 120 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 136 + j;
         let oI = 136 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 144 + j;
         let oI = 144 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 152 + j;
         let oI = 152 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 160 + j;
         let oI = 160 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 168 + j;
         let oI = 168 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 176 + j;
         let oI = 176 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 184 + j;
         let oI = 184 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 192 + j;
         let oI = 192 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 200 + j;
         let oI = 200 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 208 + j;
         let oI = 208 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 216 + j;
         let oI = 216 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 224 + j;
         let oI = 224 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 232 + j;
         let oI = 232 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 240 + j;
         let oI = 240 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 248 + j;
         let oI = 248 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 264 + j;
         let oI = 264 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 272 + j;
         let oI = 272 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 280 + j;
         let oI = 280 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 288 + j;
         let oI = 288 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 296 + j;
         let oI = 296 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 304 + j;
         let oI = 304 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 312 + j;
         let oI = 312 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 320 + j;
         let oI = 320 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 328 + j;
         let oI = 328 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 336 + j;
         let oI = 336 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 344 + j;
         let oI = 344 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 352 + j;
         let oI = 352 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 360 + j;
         let oI = 360 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 368 + j;
         let oI = 368 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 376 + j;
         let oI = 376 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 384 + j;
         let oI = 384 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 392 + j;
         let oI = 392 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 400 + j;
         let oI = 400 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 408 + j;
         let oI = 408 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 416 + j;
         let oI = 416 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 424 + j;
         let oI = 424 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 432 + j;
         let oI = 432 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 440 + j;
         let oI = 440 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 448 + j;
         let oI = 448 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 456 + j;
         let oI = 456 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 464 + j;
         let oI = 464 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 472 + j;
         let oI = 472 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 480 + j;
         let oI = 480 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 488 + j;
         let oI = 488 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 496 + j;
         let oI = 496 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 4; j++) { 
         let eI = 504 + j;
         let oI = 504 + j + 4;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_8[j * 2 + 0];
         let tIm  = FFT_FAC_8[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 16 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 8; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 16 + j;
         let oI = 16 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 32 + j;
         let oI = 32 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 48 + j;
         let oI = 48 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 64 + j;
         let oI = 64 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 80 + j;
         let oI = 80 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 96 + j;
         let oI = 96 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 112 + j;
         let oI = 112 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 144 + j;
         let oI = 144 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 160 + j;
         let oI = 160 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 176 + j;
         let oI = 176 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 192 + j;
         let oI = 192 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 208 + j;
         let oI = 208 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 224 + j;
         let oI = 224 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 240 + j;
         let oI = 240 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 272 + j;
         let oI = 272 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 288 + j;
         let oI = 288 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 304 + j;
         let oI = 304 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 320 + j;
         let oI = 320 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 336 + j;
         let oI = 336 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 352 + j;
         let oI = 352 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 368 + j;
         let oI = 368 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 384 + j;
         let oI = 384 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 400 + j;
         let oI = 400 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 416 + j;
         let oI = 416 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 432 + j;
         let oI = 432 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 448 + j;
         let oI = 448 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 464 + j;
         let oI = 464 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 480 + j;
         let oI = 480 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 8; j++) { 
         let eI = 496 + j;
         let oI = 496 + j + 8;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_16[j * 2 + 0];
         let tIm  = FFT_FAC_16[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 32 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 16; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 32 + j;
         let oI = 32 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 64 + j;
         let oI = 64 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 96 + j;
         let oI = 96 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 160 + j;
         let oI = 160 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 192 + j;
         let oI = 192 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 224 + j;
         let oI = 224 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 288 + j;
         let oI = 288 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 320 + j;
         let oI = 320 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 352 + j;
         let oI = 352 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 384 + j;
         let oI = 384 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 416 + j;
         let oI = 416 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 448 + j;
         let oI = 448 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 16; j++) { 
         let eI = 480 + j;
         let oI = 480 + j + 16;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_32[j * 2 + 0];
         let tIm  = FFT_FAC_32[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 64 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 32; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 32;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 64 + j;
         let oI = 64 + j + 32;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 32;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 192 + j;
         let oI = 192 + j + 32;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 32;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 320 + j;
         let oI = 320 + j + 32;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 384 + j;
         let oI = 384 + j + 32;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 32; j++) { 
         let eI = 448 + j;
         let oI = 448 + j + 32;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_64[j * 2 + 0];
         let tIm  = FFT_FAC_64[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 128 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 64; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 64;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 128 + j;
         let oI = 128 + j + 64;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 64;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 64; j++) { 
         let eI = 384 + j;
         let oI = 384 + j + 64;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_128[j * 2 + 0];
         let tIm  = FFT_FAC_128[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 256 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 128; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 128;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_256[j * 2 + 0];
         let tIm  = FFT_FAC_256[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
     for (let j = 0; j < 128; j++) { 
         let eI = 256 + j;
         let oI = 256 + j + 128;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_256[j * 2 + 0];
         let tIm  = FFT_FAC_256[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 
    ////////////////////////////////////////////////
    ////////////////////////////////////////////////
    // RADIX 2 (rolled) - FFT step for SIZE 512 
    ////////////////////////////////////////////////
    { 
     for (let j = 0; j < 256; j++) { 
         let eI = 0 + j;
         let oI = 0 + j + 256;
         let eRe  = out512[eI * 2    ];
         let eIm  = out512[eI * 2 + 1];
         let oRe  = out512[oI * 2    ];
         let oIm  = out512[oI * 2 + 1];
         let tRe  = FFT_FAC_512[j * 2 + 0];
         let tIm  = FFT_FAC_512[j * 2 + 1];
         let t_oRe = oRe * tRe - oIm * tIm;
         let t_oIm = oRe * tIm + oIm * tRe;
         out512[eI * 2    ] = eRe + t_oRe;
         out512[eI * 2 + 1] = eIm + t_oIm;
         out512[oI * 2    ] = eRe - t_oRe;
         out512[oI * 2 + 1] = eIm - t_oIm;
     }
    } 

    return out512;
} 

export {fftReal512}; 
